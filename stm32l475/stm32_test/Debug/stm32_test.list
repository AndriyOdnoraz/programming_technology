
stm32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004b78  08004b78  00005b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bc8  08004bc8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004bc8  08004bc8  00005bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bd0  08004bd0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd0  08004bd0  00005bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bd4  08004bd4  00005bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004bd8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  2000000c  08004be4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000077c  08004be4  0000677c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a8e  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b9  00000000  00000000  0001daca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00020b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001134  00000000  00000000  00022188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272d2  00000000  00000000  000232bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159f8  00000000  00000000  0004a58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f03df  00000000  00000000  0005ff86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000001e  00000000  00000000  00150365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd8  00000000  00000000  00150384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000115  00000000  00000000  00155f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000a25  00000000  00000000  00156071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800019c:	f000 b80c 	b.w	80001b8 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f004 fb7c 	bl	80048a4 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__aeabi_idiv0>:
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004b60 	.word	0x08004b60

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004b60 	.word	0x08004b60

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 ff03 	bl	800100a <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f832 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f9fa 	bl	8000600 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800020c:	f000 f890 	bl	8000330 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000210:	f000 f8c6 	bl	80003a0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000214:	f000 f902 	bl	800041c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000218:	f000 f926 	bl	8000468 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800021c:	f000 f962 	bl	80004e4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000220:	f000 f990 	bl	8000544 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000224:	f000 f9be 	bl	80005a4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800022e:	480c      	ldr	r0, [pc, #48]	@ (8000260 <main+0x64>)
 8000230:	f001 fb4c 	bl	80018cc <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart1, (uint8_t*)"Ping\r\n", 6, HAL_MAX_DELAY);
 8000234:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000238:	2206      	movs	r2, #6
 800023a:	490a      	ldr	r1, [pc, #40]	@ (8000264 <main+0x68>)
 800023c:	480a      	ldr	r0, [pc, #40]	@ (8000268 <main+0x6c>)
 800023e:	f003 fafc 	bl	800383a <HAL_UART_Transmit>
	  HAL_Delay(1000u);
 8000242:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000246:	f000 ff55 	bl	80010f4 <HAL_Delay>
    /* LED Indication */
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800024a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800024e:	4804      	ldr	r0, [pc, #16]	@ (8000260 <main+0x64>)
 8000250:	f001 fb54 	bl	80018fc <HAL_GPIO_TogglePin>
    HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f000 ff4c 	bl	80010f4 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"Ping\r\n", 6, HAL_MAX_DELAY);
 800025c:	bf00      	nop
 800025e:	e7e9      	b.n	8000234 <main+0x38>
 8000260:	48000400 	.word	0x48000400
 8000264:	08004b78 	.word	0x08004b78
 8000268:	2000015c 	.word	0x2000015c

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b096      	sub	sp, #88	@ 0x58
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0314 	add.w	r3, r7, #20
 8000276:	2244      	movs	r2, #68	@ 0x44
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f004 fae5 	bl	800484a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	463b      	mov	r3, r7
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800028e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000292:	f001 fdf3 	bl	8001e7c <HAL_PWREx_ControlVoltageScaling>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800029c:	f000 fb62 	bl	8000964 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002a0:	f001 fdce 	bl	8001e40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002a4:	4b21      	ldr	r3, [pc, #132]	@ (800032c <SystemClock_Config+0xc0>)
 80002a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80002aa:	4a20      	ldr	r2, [pc, #128]	@ (800032c <SystemClock_Config+0xc0>)
 80002ac:	f023 0318 	bic.w	r3, r3, #24
 80002b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80002b4:	2314      	movs	r3, #20
 80002b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002b8:	2301      	movs	r3, #1
 80002ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002bc:	2301      	movs	r3, #1
 80002be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002c4:	2360      	movs	r3, #96	@ 0x60
 80002c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c8:	2302      	movs	r3, #2
 80002ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002cc:	2301      	movs	r3, #1
 80002ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002d0:	2301      	movs	r3, #1
 80002d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002d4:	2328      	movs	r3, #40	@ 0x28
 80002d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002d8:	2307      	movs	r3, #7
 80002da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002dc:	2302      	movs	r3, #2
 80002de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e0:	2302      	movs	r3, #2
 80002e2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 fee9 	bl	80020c0 <HAL_RCC_OscConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002f4:	f000 fb36 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f8:	230f      	movs	r3, #15
 80002fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fc:	2303      	movs	r3, #3
 80002fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800030c:	463b      	mov	r3, r7
 800030e:	2104      	movs	r1, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f002 fab1 	bl	8002878 <HAL_RCC_ClockConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800031c:	f000 fb22 	bl	8000964 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000320:	f002 ffb8 	bl	8003294 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000324:	bf00      	nop
 8000326:	3758      	adds	r7, #88	@ 0x58
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40021000 	.word	0x40021000

08000330 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000334:	4b18      	ldr	r3, [pc, #96]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 8000336:	4a19      	ldr	r2, [pc, #100]	@ (800039c <MX_DFSDM1_Init+0x6c>)
 8000338:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800033a:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 800033c:	2201      	movs	r2, #1
 800033e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000340:	4b15      	ldr	r3, [pc, #84]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000346:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 8000348:	2202      	movs	r2, #2
 800034a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800034c:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000352:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 8000354:	2200      	movs	r2, #0
 8000356:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 800035a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800035e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000360:	4b0d      	ldr	r3, [pc, #52]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000366:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 8000368:	2204      	movs	r2, #4
 800036a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800036c:	4b0a      	ldr	r3, [pc, #40]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 800036e:	2200      	movs	r2, #0
 8000370:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000372:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 8000374:	2201      	movs	r2, #1
 8000376:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000378:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 800037a:	2200      	movs	r2, #0
 800037c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800037e:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 8000380:	2200      	movs	r2, #0
 8000382:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	@ (8000398 <MX_DFSDM1_Init+0x68>)
 8000386:	f000 ffeb 	bl	8001360 <HAL_DFSDM_ChannelInit>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000390:	f000 fae8 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000028 	.word	0x20000028
 800039c:	40016020 	.word	0x40016020

080003a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000414 <MX_I2C2_Init+0x74>)
 80003a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000418 <MX_I2C2_Init+0x78>)
 80003a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000414 <MX_I2C2_Init+0x74>)
 80003ac:	f640 6214 	movw	r2, #3604	@ 0xe14
 80003b0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003b2:	4b18      	ldr	r3, [pc, #96]	@ (8000414 <MX_I2C2_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b8:	4b16      	ldr	r3, [pc, #88]	@ (8000414 <MX_I2C2_Init+0x74>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003be:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <MX_I2C2_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003c4:	4b13      	ldr	r3, [pc, #76]	@ (8000414 <MX_I2C2_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003ca:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <MX_I2C2_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d0:	4b10      	ldr	r3, [pc, #64]	@ (8000414 <MX_I2C2_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <MX_I2C2_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003dc:	480d      	ldr	r0, [pc, #52]	@ (8000414 <MX_I2C2_Init+0x74>)
 80003de:	f001 faca 	bl	8001976 <HAL_I2C_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80003e8:	f000 fabc 	bl	8000964 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ec:	2100      	movs	r1, #0
 80003ee:	4809      	ldr	r0, [pc, #36]	@ (8000414 <MX_I2C2_Init+0x74>)
 80003f0:	f001 fb5c 	bl	8001aac <HAL_I2CEx_ConfigAnalogFilter>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80003fa:	f000 fab3 	bl	8000964 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003fe:	2100      	movs	r1, #0
 8000400:	4804      	ldr	r0, [pc, #16]	@ (8000414 <MX_I2C2_Init+0x74>)
 8000402:	f001 fb9e 	bl	8001b42 <HAL_I2CEx_ConfigDigitalFilter>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800040c:	f000 faaa 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000060 	.word	0x20000060
 8000418:	40005800 	.word	0x40005800

0800041c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000420:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <MX_QUADSPI_Init+0x44>)
 8000422:	4a10      	ldr	r2, [pc, #64]	@ (8000464 <MX_QUADSPI_Init+0x48>)
 8000424:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000426:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <MX_QUADSPI_Init+0x44>)
 8000428:	2202      	movs	r2, #2
 800042a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800042c:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <MX_QUADSPI_Init+0x44>)
 800042e:	2204      	movs	r2, #4
 8000430:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000432:	4b0b      	ldr	r3, [pc, #44]	@ (8000460 <MX_QUADSPI_Init+0x44>)
 8000434:	2210      	movs	r2, #16
 8000436:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <MX_QUADSPI_Init+0x44>)
 800043a:	2217      	movs	r2, #23
 800043c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800043e:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <MX_QUADSPI_Init+0x44>)
 8000440:	2200      	movs	r2, #0
 8000442:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000444:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <MX_QUADSPI_Init+0x44>)
 8000446:	2200      	movs	r2, #0
 8000448:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800044a:	4805      	ldr	r0, [pc, #20]	@ (8000460 <MX_QUADSPI_Init+0x44>)
 800044c:	f001 fd7c 	bl	8001f48 <HAL_QSPI_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000456:	f000 fa85 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	200000b4 	.word	0x200000b4
 8000464:	a0001000 	.word	0xa0001000

08000468 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800046c:	4b1b      	ldr	r3, [pc, #108]	@ (80004dc <MX_SPI3_Init+0x74>)
 800046e:	4a1c      	ldr	r2, [pc, #112]	@ (80004e0 <MX_SPI3_Init+0x78>)
 8000470:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000472:	4b1a      	ldr	r3, [pc, #104]	@ (80004dc <MX_SPI3_Init+0x74>)
 8000474:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000478:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800047a:	4b18      	ldr	r3, [pc, #96]	@ (80004dc <MX_SPI3_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000480:	4b16      	ldr	r3, [pc, #88]	@ (80004dc <MX_SPI3_Init+0x74>)
 8000482:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000486:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000488:	4b14      	ldr	r3, [pc, #80]	@ (80004dc <MX_SPI3_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800048e:	4b13      	ldr	r3, [pc, #76]	@ (80004dc <MX_SPI3_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000494:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <MX_SPI3_Init+0x74>)
 8000496:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800049a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800049c:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <MX_SPI3_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <MX_SPI3_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <MX_SPI3_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <MX_SPI3_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80004b4:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <MX_SPI3_Init+0x74>)
 80004b6:	2207      	movs	r2, #7
 80004b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <MX_SPI3_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <MX_SPI3_Init+0x74>)
 80004c2:	2208      	movs	r2, #8
 80004c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80004c6:	4805      	ldr	r0, [pc, #20]	@ (80004dc <MX_SPI3_Init+0x74>)
 80004c8:	f003 f8c6 	bl	8003658 <HAL_SPI_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80004d2:	f000 fa47 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	200000f8 	.word	0x200000f8
 80004e0:	40003c00 	.word	0x40003c00

080004e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004e8:	4b14      	ldr	r3, [pc, #80]	@ (800053c <MX_USART1_UART_Init+0x58>)
 80004ea:	4a15      	ldr	r2, [pc, #84]	@ (8000540 <MX_USART1_UART_Init+0x5c>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004ee:	4b13      	ldr	r3, [pc, #76]	@ (800053c <MX_USART1_UART_Init+0x58>)
 80004f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b11      	ldr	r3, [pc, #68]	@ (800053c <MX_USART1_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <MX_USART1_UART_Init+0x58>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000502:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <MX_USART1_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <MX_USART1_UART_Init+0x58>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	@ (800053c <MX_USART1_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b09      	ldr	r3, [pc, #36]	@ (800053c <MX_USART1_UART_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800051a:	4b08      	ldr	r3, [pc, #32]	@ (800053c <MX_USART1_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <MX_USART1_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	@ (800053c <MX_USART1_UART_Init+0x58>)
 8000528:	f003 f939 	bl	800379e <HAL_UART_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000532:	f000 fa17 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	2000015c 	.word	0x2000015c
 8000540:	40013800 	.word	0x40013800

08000544 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000548:	4b14      	ldr	r3, [pc, #80]	@ (800059c <MX_USART3_UART_Init+0x58>)
 800054a:	4a15      	ldr	r2, [pc, #84]	@ (80005a0 <MX_USART3_UART_Init+0x5c>)
 800054c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800054e:	4b13      	ldr	r3, [pc, #76]	@ (800059c <MX_USART3_UART_Init+0x58>)
 8000550:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000554:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000556:	4b11      	ldr	r3, [pc, #68]	@ (800059c <MX_USART3_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800055c:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <MX_USART3_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000562:	4b0e      	ldr	r3, [pc, #56]	@ (800059c <MX_USART3_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000568:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <MX_USART3_UART_Init+0x58>)
 800056a:	220c      	movs	r2, #12
 800056c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	4b0b      	ldr	r3, [pc, #44]	@ (800059c <MX_USART3_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000574:	4b09      	ldr	r3, [pc, #36]	@ (800059c <MX_USART3_UART_Init+0x58>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800057a:	4b08      	ldr	r3, [pc, #32]	@ (800059c <MX_USART3_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000580:	4b06      	ldr	r3, [pc, #24]	@ (800059c <MX_USART3_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000586:	4805      	ldr	r0, [pc, #20]	@ (800059c <MX_USART3_UART_Init+0x58>)
 8000588:	f003 f909 	bl	800379e <HAL_UART_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000592:	f000 f9e7 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200001e4 	.word	0x200001e4
 80005a0:	40004800 	.word	0x40004800

080005a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80005a8:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005b2:	2206      	movs	r2, #6
 80005b4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80005b6:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005be:	2202      	movs	r2, #2
 80005c0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005e8:	f001 faf7 	bl	8001bda <HAL_PCD_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80005f2:	f000 f9b7 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000026c 	.word	0x2000026c

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	@ 0x28
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000616:	4bbd      	ldr	r3, [pc, #756]	@ (800090c <MX_GPIO_Init+0x30c>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	4abc      	ldr	r2, [pc, #752]	@ (800090c <MX_GPIO_Init+0x30c>)
 800061c:	f043 0310 	orr.w	r3, r3, #16
 8000620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000622:	4bba      	ldr	r3, [pc, #744]	@ (800090c <MX_GPIO_Init+0x30c>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	f003 0310 	and.w	r3, r3, #16
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	4bb7      	ldr	r3, [pc, #732]	@ (800090c <MX_GPIO_Init+0x30c>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	4ab6      	ldr	r2, [pc, #728]	@ (800090c <MX_GPIO_Init+0x30c>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063a:	4bb4      	ldr	r3, [pc, #720]	@ (800090c <MX_GPIO_Init+0x30c>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4bb1      	ldr	r3, [pc, #708]	@ (800090c <MX_GPIO_Init+0x30c>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	4ab0      	ldr	r2, [pc, #704]	@ (800090c <MX_GPIO_Init+0x30c>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000652:	4bae      	ldr	r3, [pc, #696]	@ (800090c <MX_GPIO_Init+0x30c>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4bab      	ldr	r3, [pc, #684]	@ (800090c <MX_GPIO_Init+0x30c>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	4aaa      	ldr	r2, [pc, #680]	@ (800090c <MX_GPIO_Init+0x30c>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066a:	4ba8      	ldr	r3, [pc, #672]	@ (800090c <MX_GPIO_Init+0x30c>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000676:	4ba5      	ldr	r3, [pc, #660]	@ (800090c <MX_GPIO_Init+0x30c>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	4aa4      	ldr	r2, [pc, #656]	@ (800090c <MX_GPIO_Init+0x30c>)
 800067c:	f043 0308 	orr.w	r3, r3, #8
 8000680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000682:	4ba2      	ldr	r3, [pc, #648]	@ (800090c <MX_GPIO_Init+0x30c>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	f003 0308 	and.w	r3, r3, #8
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000694:	489e      	ldr	r0, [pc, #632]	@ (8000910 <MX_GPIO_Init+0x310>)
 8000696:	f001 f919 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f248 1104 	movw	r1, #33028	@ 0x8104
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a4:	f001 f912 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80006a8:	2200      	movs	r2, #0
 80006aa:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80006ae:	4899      	ldr	r0, [pc, #612]	@ (8000914 <MX_GPIO_Init+0x314>)
 80006b0:	f001 f90c 	bl	80018cc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f241 0181 	movw	r1, #4225	@ 0x1081
 80006ba:	4897      	ldr	r0, [pc, #604]	@ (8000918 <MX_GPIO_Init+0x318>)
 80006bc:	f001 f906 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c6:	4894      	ldr	r0, [pc, #592]	@ (8000918 <MX_GPIO_Init+0x318>)
 80006c8:	f001 f900 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80006d2:	4892      	ldr	r0, [pc, #584]	@ (800091c <MX_GPIO_Init+0x31c>)
 80006d4:	f001 f8fa 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2120      	movs	r1, #32
 80006dc:	488d      	ldr	r0, [pc, #564]	@ (8000914 <MX_GPIO_Init+0x314>)
 80006de:	f001 f8f5 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	488a      	ldr	r0, [pc, #552]	@ (8000910 <MX_GPIO_Init+0x310>)
 80006e8:	f001 f8f0 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80006ec:	f240 1315 	movw	r3, #277	@ 0x115
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4882      	ldr	r0, [pc, #520]	@ (8000910 <MX_GPIO_Init+0x310>)
 8000706:	f000 ff37 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800070a:	236a      	movs	r3, #106	@ 0x6a
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	487c      	ldr	r0, [pc, #496]	@ (8000910 <MX_GPIO_Init+0x310>)
 8000720:	f000 ff2a 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000724:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800072a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	4878      	ldr	r0, [pc, #480]	@ (800091c <MX_GPIO_Init+0x31c>)
 800073c:	f000 ff1c 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000740:	233f      	movs	r3, #63	@ 0x3f
 8000742:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000744:	230b      	movs	r3, #11
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	4872      	ldr	r0, [pc, #456]	@ (800091c <MX_GPIO_Init+0x31c>)
 8000754:	f000 ff10 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000758:	2303      	movs	r3, #3
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000768:	2308      	movs	r3, #8
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000776:	f000 feff 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800077a:	f248 1304 	movw	r3, #33028	@ 0x8104
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000796:	f000 feef 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800079a:	2308      	movs	r3, #8
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007aa:	2301      	movs	r3, #1
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b8:	f000 fede 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80007bc:	2310      	movs	r3, #16
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007c0:	230b      	movs	r3, #11
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d2:	f000 fed1 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80007d6:	23e0      	movs	r3, #224	@ 0xe0
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007e6:	2305      	movs	r3, #5
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f4:	f000 fec0 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80007f8:	2301      	movs	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	4841      	ldr	r0, [pc, #260]	@ (8000914 <MX_GPIO_Init+0x314>)
 800080e:	f000 feb3 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000812:	2302      	movs	r3, #2
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000816:	230b      	movs	r3, #11
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	483b      	ldr	r0, [pc, #236]	@ (8000914 <MX_GPIO_Init+0x314>)
 8000826:	f000 fea7 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800082a:	f24f 0334 	movw	r3, #61492	@ 0xf034
 800082e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4834      	ldr	r0, [pc, #208]	@ (8000914 <MX_GPIO_Init+0x314>)
 8000844:	f000 fe98 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000848:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 800084c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	482e      	ldr	r0, [pc, #184]	@ (8000918 <MX_GPIO_Init+0x318>)
 8000860:	f000 fe8a 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000864:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4826      	ldr	r0, [pc, #152]	@ (8000918 <MX_GPIO_Init+0x318>)
 800087e:	f000 fe7b 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000882:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4820      	ldr	r0, [pc, #128]	@ (800091c <MX_GPIO_Init+0x31c>)
 800089c:	f000 fe6c 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80008a0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4819      	ldr	r0, [pc, #100]	@ (800091c <MX_GPIO_Init+0x31c>)
 80008b8:	f000 fe5e 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80008bc:	2302      	movs	r3, #2
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008cc:	2305      	movs	r3, #5
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4810      	ldr	r0, [pc, #64]	@ (8000918 <MX_GPIO_Init+0x318>)
 80008d8:	f000 fe4e 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80008dc:	2378      	movs	r3, #120	@ 0x78
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ec:	2307      	movs	r3, #7
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	4808      	ldr	r0, [pc, #32]	@ (8000918 <MX_GPIO_Init+0x318>)
 80008f8:	f000 fe3e 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80008fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000902:	2312      	movs	r3, #18
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	e00a      	b.n	8000920 <MX_GPIO_Init+0x320>
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000
 8000910:	48001000 	.word	0x48001000
 8000914:	48000400 	.word	0x48000400
 8000918:	48000c00 	.word	0x48000c00
 800091c:	48000800 	.word	0x48000800
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000926:	2304      	movs	r3, #4
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	480b      	ldr	r0, [pc, #44]	@ (8000960 <MX_GPIO_Init+0x360>)
 8000932:	f000 fe21 	bl	8001578 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2017      	movs	r0, #23
 800093c:	f000 fcd9 	bl	80012f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000940:	2017      	movs	r0, #23
 8000942:	f000 fcf2 	bl	800132a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2028      	movs	r0, #40	@ 0x28
 800094c:	f000 fcd1 	bl	80012f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000950:	2028      	movs	r0, #40	@ 0x28
 8000952:	f000 fcea 	bl	800132a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	@ 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	48000400 	.word	0x48000400

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    /* LED Indication */
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800096c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <Error_Handler+0x20>)
 8000972:	f000 ffc3 	bl	80018fc <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8000976:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800097a:	f000 fbbb 	bl	80010f4 <HAL_Delay>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800097e:	bf00      	nop
 8000980:	e7f4      	b.n	800096c <Error_Handler+0x8>
 8000982:	bf00      	nop
 8000984:	48000400 	.word	0x48000400

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <HAL_MspInit+0x44>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000992:	4a0e      	ldr	r2, [pc, #56]	@ (80009cc <HAL_MspInit+0x44>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6613      	str	r3, [r2, #96]	@ 0x60
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <HAL_MspInit+0x44>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <HAL_MspInit+0x44>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009aa:	4a08      	ldr	r2, [pc, #32]	@ (80009cc <HAL_MspInit+0x44>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_MspInit+0x44>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b0ac      	sub	sp, #176	@ 0xb0
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2288      	movs	r2, #136	@ 0x88
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f003 ff2a 	bl	800484a <memset>
  if(DFSDM1_Init == 0)
 80009f6:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d142      	bne.n	8000a84 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80009fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 f956 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000a1a:	f7ff ffa3 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a22:	4a1b      	ldr	r2, [pc, #108]	@ (8000a90 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000a24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a36:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3a:	4a15      	ldr	r2, [pc, #84]	@ (8000a90 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a42:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000a4e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000a52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000a68:	2306      	movs	r3, #6
 8000a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a6e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a72:	4619      	mov	r1, r3
 8000a74:	4807      	ldr	r0, [pc, #28]	@ (8000a94 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000a76:	f000 fd7f 	bl	8001578 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000a7a:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	4a02      	ldr	r2, [pc, #8]	@ (8000a8c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a82:	6013      	str	r3, [r2, #0]
  }

}
 8000a84:	bf00      	nop
 8000a86:	37b0      	adds	r7, #176	@ 0xb0
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000750 	.word	0x20000750
 8000a90:	40021000 	.word	0x40021000
 8000a94:	48001000 	.word	0x48001000

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2288      	movs	r2, #136	@ 0x88
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fec6 	bl	800484a <memset>
  if(hi2c->Instance==I2C2)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a21      	ldr	r2, [pc, #132]	@ (8000b48 <HAL_I2C_MspInit+0xb0>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d13b      	bne.n	8000b40 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ac8:	2380      	movs	r3, #128	@ 0x80
 8000aca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f002 f8f3 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ae0:	f7ff ff40 	bl	8000964 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <HAL_I2C_MspInit+0xb4>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae8:	4a18      	ldr	r2, [pc, #96]	@ (8000b4c <HAL_I2C_MspInit+0xb4>)
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <HAL_I2C_MspInit+0xb4>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000afc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b04:	2312      	movs	r3, #18
 8000b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b16:	2304      	movs	r3, #4
 8000b18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b20:	4619      	mov	r1, r3
 8000b22:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <HAL_I2C_MspInit+0xb8>)
 8000b24:	f000 fd28 	bl	8001578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <HAL_I2C_MspInit+0xb4>)
 8000b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2c:	4a07      	ldr	r2, [pc, #28]	@ (8000b4c <HAL_I2C_MspInit+0xb4>)
 8000b2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HAL_I2C_MspInit+0xb4>)
 8000b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	37b0      	adds	r7, #176	@ 0xb0
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40005800 	.word	0x40005800
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	48000400 	.word	0x48000400

08000b54 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a17      	ldr	r2, [pc, #92]	@ (8000bd0 <HAL_QSPI_MspInit+0x7c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d128      	bne.n	8000bc8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <HAL_QSPI_MspInit+0x80>)
 8000b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b7a:	4a16      	ldr	r2, [pc, #88]	@ (8000bd4 <HAL_QSPI_MspInit+0x80>)
 8000b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b80:	6513      	str	r3, [r2, #80]	@ 0x50
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <HAL_QSPI_MspInit+0x80>)
 8000b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <HAL_QSPI_MspInit+0x80>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	4a10      	ldr	r2, [pc, #64]	@ (8000bd4 <HAL_QSPI_MspInit+0x80>)
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <HAL_QSPI_MspInit+0x80>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000ba6:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000baa:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000bb8:	230a      	movs	r3, #10
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <HAL_QSPI_MspInit+0x84>)
 8000bc4:	f000 fcd8 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	@ 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	a0001000 	.word	0xa0001000
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	48001000 	.word	0x48001000

08000bdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a17      	ldr	r2, [pc, #92]	@ (8000c58 <HAL_SPI_MspInit+0x7c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d128      	bne.n	8000c50 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bfe:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <HAL_SPI_MspInit+0x80>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	4a16      	ldr	r2, [pc, #88]	@ (8000c5c <HAL_SPI_MspInit+0x80>)
 8000c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c0a:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <HAL_SPI_MspInit+0x80>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <HAL_SPI_MspInit+0x80>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1a:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <HAL_SPI_MspInit+0x80>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_SPI_MspInit+0x80>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000c2e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c40:	2306      	movs	r3, #6
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <HAL_SPI_MspInit+0x84>)
 8000c4c:	f000 fc94 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	@ 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40003c00 	.word	0x40003c00
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48000800 	.word	0x48000800

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0ae      	sub	sp, #184	@ 0xb8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	2288      	movs	r2, #136	@ 0x88
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f003 fde0 	bl	800484a <memset>
  if(huart->Instance==USART1)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a42      	ldr	r2, [pc, #264]	@ (8000d98 <HAL_UART_MspInit+0x134>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d13b      	bne.n	8000d0c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 f80d 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cac:	f7ff fe5a 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8000d9c <HAL_UART_MspInit+0x138>)
 8000cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb4:	4a39      	ldr	r2, [pc, #228]	@ (8000d9c <HAL_UART_MspInit+0x138>)
 8000cb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cba:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cbc:	4b37      	ldr	r3, [pc, #220]	@ (8000d9c <HAL_UART_MspInit+0x138>)
 8000cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc4:	61bb      	str	r3, [r7, #24]
 8000cc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	4b34      	ldr	r3, [pc, #208]	@ (8000d9c <HAL_UART_MspInit+0x138>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ccc:	4a33      	ldr	r2, [pc, #204]	@ (8000d9c <HAL_UART_MspInit+0x138>)
 8000cce:	f043 0302 	orr.w	r3, r3, #2
 8000cd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd4:	4b31      	ldr	r3, [pc, #196]	@ (8000d9c <HAL_UART_MspInit+0x138>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000ce0:	23c0      	movs	r3, #192	@ 0xc0
 8000ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4826      	ldr	r0, [pc, #152]	@ (8000da0 <HAL_UART_MspInit+0x13c>)
 8000d06:	f000 fc37 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d0a:	e040      	b.n	8000d8e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a24      	ldr	r2, [pc, #144]	@ (8000da4 <HAL_UART_MspInit+0x140>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d13b      	bne.n	8000d8e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d16:	2304      	movs	r3, #4
 8000d18:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 ffcc 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000d2e:	f7ff fe19 	bl	8000964 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <HAL_UART_MspInit+0x138>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d36:	4a19      	ldr	r2, [pc, #100]	@ (8000d9c <HAL_UART_MspInit+0x138>)
 8000d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <HAL_UART_MspInit+0x138>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <HAL_UART_MspInit+0x138>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	4a13      	ldr	r2, [pc, #76]	@ (8000d9c <HAL_UART_MspInit+0x138>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_UART_MspInit+0x138>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000d62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d82:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4807      	ldr	r0, [pc, #28]	@ (8000da8 <HAL_UART_MspInit+0x144>)
 8000d8a:	f000 fbf5 	bl	8001578 <HAL_GPIO_Init>
}
 8000d8e:	bf00      	nop
 8000d90:	37b8      	adds	r7, #184	@ 0xb8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40013800 	.word	0x40013800
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	48000400 	.word	0x48000400
 8000da4:	40004800 	.word	0x40004800
 8000da8:	48000c00 	.word	0x48000c00

08000dac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0ac      	sub	sp, #176	@ 0xb0
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2288      	movs	r2, #136	@ 0x88
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 fd3c 	bl	800484a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dda:	d17c      	bne.n	8000ed6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ddc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000de2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000de6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000df2:	2318      	movs	r3, #24
 8000df4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000df6:	2307      	movs	r3, #7
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000e02:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e06:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 ff57 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000e18:	f7ff fda4 	bl	8000964 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b30      	ldr	r3, [pc, #192]	@ (8000ee0 <HAL_PCD_MspInit+0x134>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e20:	4a2f      	ldr	r2, [pc, #188]	@ (8000ee0 <HAL_PCD_MspInit+0x134>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <HAL_PCD_MspInit+0x134>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000e34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e52:	f000 fb91 	bl	8001578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000e56:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e70:	230a      	movs	r3, #10
 8000e72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e80:	f000 fb7a 	bl	8001578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e84:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <HAL_PCD_MspInit+0x134>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e88:	4a15      	ldr	r2, [pc, #84]	@ (8000ee0 <HAL_PCD_MspInit+0x134>)
 8000e8a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e90:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <HAL_PCD_MspInit+0x134>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <HAL_PCD_MspInit+0x134>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d114      	bne.n	8000ed2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <HAL_PCD_MspInit+0x134>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee0 <HAL_PCD_MspInit+0x134>)
 8000eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <HAL_PCD_MspInit+0x134>)
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000ec0:	f001 f832 	bl	8001f28 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_PCD_MspInit+0x134>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec8:	4a05      	ldr	r2, [pc, #20]	@ (8000ee0 <HAL_PCD_MspInit+0x134>)
 8000eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	6593      	str	r3, [r2, #88]	@ 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ed0:	e001      	b.n	8000ed6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8000ed2:	f001 f829 	bl	8001f28 <HAL_PWREx_EnableVddUSB>
}
 8000ed6:	bf00      	nop
 8000ed8:	37b0      	adds	r7, #176	@ 0xb0
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <NMI_Handler+0x4>

08000eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3a:	f000 f8bb 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8000f46:	2020      	movs	r0, #32
 8000f48:	f000 fcf2 	bl	8001930 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8000f4c:	2040      	movs	r0, #64	@ 0x40
 8000f4e:	f000 fcef 	bl	8001930 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8000f52:	2080      	movs	r0, #128	@ 0x80
 8000f54:	f000 fcec 	bl	8001930 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8000f58:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f5c:	f000 fce8 	bl	8001930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8000f68:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f6c:	f000 fce0 	bl	8001930 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000f70:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f74:	f000 fcdc 	bl	8001930 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8000f78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f7c:	f000 fcd8 	bl	8001930 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8000f80:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f84:	f000 fcd4 	bl	8001930 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8000f88:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000f8c:	f000 fcd0 	bl	8001930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fbc:	f7ff ffea 	bl	8000f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	@ (8000ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <LoopForever+0xe>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001004 <LoopForever+0x16>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f003 fc39 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fea:	f7ff f907 	bl	80001fc <main>

08000fee <LoopForever>:

LoopForever:
    b LoopForever
 8000fee:	e7fe      	b.n	8000fee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ffc:	08004bd8 	.word	0x08004bd8
  ldr r2, =_sbss
 8001000:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001004:	2000077c 	.word	0x2000077c

08001008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_2_IRQHandler>

0800100a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 f961 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101a:	2000      	movs	r0, #0
 800101c:	f000 f80e 	bl	800103c <HAL_InitTick>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	e001      	b.n	8001030 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800102c:	f7ff fcac 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001030:	79fb      	ldrb	r3, [r7, #7]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001048:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <HAL_InitTick+0x6c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d023      	beq.n	8001098 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <HAL_InitTick+0x70>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <HAL_InitTick+0x6c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001062:	fbb2 f3f3 	udiv	r3, r2, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f96d 	bl	8001346 <HAL_SYSTICK_Config>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10f      	bne.n	8001092 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d809      	bhi.n	800108c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001080:	f000 f937 	bl	80012f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001084:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <HAL_InitTick+0x74>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e007      	b.n	800109c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e004      	b.n	800109c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	e001      	b.n	800109c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000754 	.word	0x20000754

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	@ (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000754 	.word	0x20000754

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <HAL_Delay+0x44>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	@ (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	@ (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	@ (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	@ 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	@ 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff29 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff3e 	bl	8001184 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff8e 	bl	8001230 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5d 	bl	80011dc <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff31 	bl	80011a0 <__NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffa2 	bl	8001298 <SysTick_Config>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e0ac      	b.n	80014cc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f8b2 	bl	80014e0 <DFSDM_GetChannelFromInstance>
 800137c:	4603      	mov	r3, r0
 800137e:	4a55      	ldr	r2, [pc, #340]	@ (80014d4 <HAL_DFSDM_ChannelInit+0x174>)
 8001380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e09f      	b.n	80014cc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fb1f 	bl	80009d0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001392:	4b51      	ldr	r3, [pc, #324]	@ (80014d8 <HAL_DFSDM_ChannelInit+0x178>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	4a4f      	ldr	r2, [pc, #316]	@ (80014d8 <HAL_DFSDM_ChannelInit+0x178>)
 800139a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800139c:	4b4e      	ldr	r3, [pc, #312]	@ (80014d8 <HAL_DFSDM_ChannelInit+0x178>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d125      	bne.n	80013f0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80013a4:	4b4d      	ldr	r3, [pc, #308]	@ (80014dc <HAL_DFSDM_ChannelInit+0x17c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a4c      	ldr	r2, [pc, #304]	@ (80014dc <HAL_DFSDM_ChannelInit+0x17c>)
 80013aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80013ae:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80013b0:	4b4a      	ldr	r3, [pc, #296]	@ (80014dc <HAL_DFSDM_ChannelInit+0x17c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4948      	ldr	r1, [pc, #288]	@ (80014dc <HAL_DFSDM_ChannelInit+0x17c>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80013be:	4b47      	ldr	r3, [pc, #284]	@ (80014dc <HAL_DFSDM_ChannelInit+0x17c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a46      	ldr	r2, [pc, #280]	@ (80014dc <HAL_DFSDM_ChannelInit+0x17c>)
 80013c4:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80013c8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	791b      	ldrb	r3, [r3, #4]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d108      	bne.n	80013e4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80013d2:	4b42      	ldr	r3, [pc, #264]	@ (80014dc <HAL_DFSDM_ChannelInit+0x17c>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	3b01      	subs	r3, #1
 80013dc:	041b      	lsls	r3, r3, #16
 80013de:	493f      	ldr	r1, [pc, #252]	@ (80014dc <HAL_DFSDM_ChannelInit+0x17c>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80013e4:	4b3d      	ldr	r3, [pc, #244]	@ (80014dc <HAL_DFSDM_ChannelInit+0x17c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a3c      	ldr	r2, [pc, #240]	@ (80014dc <HAL_DFSDM_ChannelInit+0x17c>)
 80013ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80013ee:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80013fe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6819      	ldr	r1, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800140e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001414:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 020f 	bic.w	r2, r2, #15
 800142c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6819      	ldr	r1, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001454:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6899      	ldr	r1, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001464:	3b01      	subs	r3, #1
 8001466:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f002 0207 	and.w	r2, r2, #7
 8001480:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014ac:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f810 	bl	80014e0 <DFSDM_GetChannelFromInstance>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4904      	ldr	r1, [pc, #16]	@ (80014d4 <HAL_DFSDM_ChannelInit+0x174>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000075c 	.word	0x2000075c
 80014d8:	20000758 	.word	0x20000758
 80014dc:	40016000 	.word	0x40016000

080014e0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a1c      	ldr	r2, [pc, #112]	@ (800155c <DFSDM_GetChannelFromInstance+0x7c>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d102      	bne.n	80014f6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	e02b      	b.n	800154e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a19      	ldr	r2, [pc, #100]	@ (8001560 <DFSDM_GetChannelFromInstance+0x80>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d102      	bne.n	8001504 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80014fe:	2301      	movs	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	e024      	b.n	800154e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <DFSDM_GetChannelFromInstance+0x84>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d102      	bne.n	8001512 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800150c:	2302      	movs	r3, #2
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	e01d      	b.n	800154e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <DFSDM_GetChannelFromInstance+0x88>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d102      	bne.n	8001520 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800151a:	2304      	movs	r3, #4
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	e016      	b.n	800154e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a12      	ldr	r2, [pc, #72]	@ (800156c <DFSDM_GetChannelFromInstance+0x8c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d102      	bne.n	800152e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001528:	2305      	movs	r3, #5
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	e00f      	b.n	800154e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a0f      	ldr	r2, [pc, #60]	@ (8001570 <DFSDM_GetChannelFromInstance+0x90>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d102      	bne.n	800153c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001536:	2306      	movs	r3, #6
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	e008      	b.n	800154e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a0d      	ldr	r2, [pc, #52]	@ (8001574 <DFSDM_GetChannelFromInstance+0x94>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d102      	bne.n	800154a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001544:	2307      	movs	r3, #7
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	e001      	b.n	800154e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800154a:	2303      	movs	r3, #3
 800154c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40016000 	.word	0x40016000
 8001560:	40016020 	.word	0x40016020
 8001564:	40016040 	.word	0x40016040
 8001568:	40016080 	.word	0x40016080
 800156c:	400160a0 	.word	0x400160a0
 8001570:	400160c0 	.word	0x400160c0
 8001574:	400160e0 	.word	0x400160e0

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001586:	e17f      	b.n	8001888 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2101      	movs	r1, #1
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8171 	beq.w	8001882 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d005      	beq.n	80015b8 <HAL_GPIO_Init+0x40>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d130      	bne.n	800161a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ee:	2201      	movs	r2, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	f003 0201 	and.w	r2, r3, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b03      	cmp	r3, #3
 8001624:	d118      	bne.n	8001658 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800162c:	2201      	movs	r2, #1
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	f003 0201 	and.w	r2, r3, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b03      	cmp	r3, #3
 8001662:	d017      	beq.n	8001694 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d123      	bne.n	80016e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	6939      	ldr	r1, [r7, #16]
 80016e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0203 	and.w	r2, r3, #3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80ac 	beq.w	8001882 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	4b5f      	ldr	r3, [pc, #380]	@ (80018a8 <HAL_GPIO_Init+0x330>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172e:	4a5e      	ldr	r2, [pc, #376]	@ (80018a8 <HAL_GPIO_Init+0x330>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6613      	str	r3, [r2, #96]	@ 0x60
 8001736:	4b5c      	ldr	r3, [pc, #368]	@ (80018a8 <HAL_GPIO_Init+0x330>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001742:	4a5a      	ldr	r2, [pc, #360]	@ (80018ac <HAL_GPIO_Init+0x334>)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3302      	adds	r3, #2
 800174a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	220f      	movs	r2, #15
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800176c:	d025      	beq.n	80017ba <HAL_GPIO_Init+0x242>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4f      	ldr	r2, [pc, #316]	@ (80018b0 <HAL_GPIO_Init+0x338>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01f      	beq.n	80017b6 <HAL_GPIO_Init+0x23e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4e      	ldr	r2, [pc, #312]	@ (80018b4 <HAL_GPIO_Init+0x33c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d019      	beq.n	80017b2 <HAL_GPIO_Init+0x23a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4d      	ldr	r2, [pc, #308]	@ (80018b8 <HAL_GPIO_Init+0x340>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d013      	beq.n	80017ae <HAL_GPIO_Init+0x236>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4c      	ldr	r2, [pc, #304]	@ (80018bc <HAL_GPIO_Init+0x344>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_GPIO_Init+0x232>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4b      	ldr	r2, [pc, #300]	@ (80018c0 <HAL_GPIO_Init+0x348>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d007      	beq.n	80017a6 <HAL_GPIO_Init+0x22e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4a      	ldr	r2, [pc, #296]	@ (80018c4 <HAL_GPIO_Init+0x34c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_GPIO_Init+0x22a>
 800179e:	2306      	movs	r3, #6
 80017a0:	e00c      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017a2:	2307      	movs	r3, #7
 80017a4:	e00a      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017a6:	2305      	movs	r3, #5
 80017a8:	e008      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e004      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e002      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017ba:	2300      	movs	r3, #0
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	f002 0203 	and.w	r2, r2, #3
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	4093      	lsls	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017cc:	4937      	ldr	r1, [pc, #220]	@ (80018ac <HAL_GPIO_Init+0x334>)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017da:	4b3b      	ldr	r3, [pc, #236]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017fe:	4a32      	ldr	r2, [pc, #200]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001804:	4b30      	ldr	r3, [pc, #192]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001828:	4a27      	ldr	r2, [pc, #156]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800182e:	4b26      	ldr	r3, [pc, #152]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001852:	4a1d      	ldr	r2, [pc, #116]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800187c:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa22 f303 	lsr.w	r3, r2, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	f47f ae78 	bne.w	8001588 <HAL_GPIO_Init+0x10>
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000
 80018b0:	48000400 	.word	0x48000400
 80018b4:	48000800 	.word	0x48000800
 80018b8:	48000c00 	.word	0x48000c00
 80018bc:	48001000 	.word	0x48001000
 80018c0:	48001400 	.word	0x48001400
 80018c4:	48001800 	.word	0x48001800
 80018c8:	40010400 	.word	0x40010400

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e8:	e002      	b.n	80018f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4013      	ands	r3, r2
 8001914:	041a      	lsls	r2, r3, #16
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43d9      	mvns	r1, r3
 800191a:	887b      	ldrh	r3, [r7, #2]
 800191c:	400b      	ands	r3, r1
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800193a:	4b08      	ldr	r3, [pc, #32]	@ (800195c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001946:	4a05      	ldr	r2, [pc, #20]	@ (800195c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f806 	bl	8001960 <HAL_GPIO_EXTI_Callback>
  }
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40010400 	.word	0x40010400

08001960 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e08d      	b.n	8001aa4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d106      	bne.n	80019a2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff f87b 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2224      	movs	r2, #36	@ 0x24
 80019a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d107      	bne.n	80019f0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	e006      	b.n	80019fe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80019fc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d108      	bne.n	8001a18 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	e007      	b.n	8001a28 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a26:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a3a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69d9      	ldr	r1, [r3, #28]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1a      	ldr	r2, [r3, #32]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b20      	cmp	r3, #32
 8001ac0:	d138      	bne.n	8001b34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e032      	b.n	8001b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2224      	movs	r2, #36	@ 0x24
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0201 	bic.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001afe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6819      	ldr	r1, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e000      	b.n	8001b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b34:	2302      	movs	r3, #2
  }
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d139      	bne.n	8001bcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e033      	b.n	8001bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2224      	movs	r2, #36	@ 0x24
 8001b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0201 	bic.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e000      	b.n	8001bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bcc:	2302      	movs	r3, #2
  }
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af02      	add	r7, sp, #8
 8001be0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e101      	b.n	8001df0 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d106      	bne.n	8001c06 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff f8d3 	bl	8000dac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 fb97 	bl	800434c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7c1a      	ldrb	r2, [r3, #16]
 8001c26:	f88d 2000 	strb.w	r2, [sp]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c2e:	f002 fb60 	bl	80042f2 <USB_CoreInit>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0d5      	b.n	8001df0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 fb8f 	bl	800436e <USB_SetCurrentMode>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0c6      	b.n	8001df0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
 8001c66:	e04a      	b.n	8001cfe <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	3315      	adds	r3, #21
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	3314      	adds	r3, #20
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	b298      	uxth	r0, r3
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	332e      	adds	r3, #46	@ 0x2e
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3318      	adds	r3, #24
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	331c      	adds	r3, #28
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3320      	adds	r3, #32
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3324      	adds	r3, #36	@ 0x24
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	791b      	ldrb	r3, [r3, #4]
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d3af      	bcc.n	8001c68 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e044      	b.n	8001d98 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	3301      	adds	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	791b      	ldrb	r3, [r3, #4]
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d3b5      	bcc.n	8001d0e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7c1a      	ldrb	r2, [r3, #16]
 8001daa:	f88d 2000 	strb.w	r2, [sp]
 8001dae:	3304      	adds	r3, #4
 8001db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db2:	f002 fb29 	bl	8004408 <USB_DevInit>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e013      	b.n	8001df0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7b1b      	ldrb	r3, [r3, #12]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d102      	bne.n	8001de4 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f80a 	bl	8001df8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f002 fcce 	bl	800478a <USB_DevDisconnect>

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	f043 0303 	orr.w	r3, r3, #3
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a04      	ldr	r2, [pc, #16]	@ (8001e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40007000 	.word	0x40007000

08001e60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40007000 	.word	0x40007000

08001e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e8a:	d130      	bne.n	8001eee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e8c:	4b23      	ldr	r3, [pc, #140]	@ (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e98:	d038      	beq.n	8001f0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e9a:	4b20      	ldr	r3, [pc, #128]	@ (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ea8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2232      	movs	r2, #50	@ 0x32
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	0c9b      	lsrs	r3, r3, #18
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ec0:	e002      	b.n	8001ec8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed4:	d102      	bne.n	8001edc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f2      	bne.n	8001ec2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001edc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee8:	d110      	bne.n	8001f0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e00f      	b.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eee:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efa:	d007      	beq.n	8001f0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001efc:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f04:	4a05      	ldr	r2, [pc, #20]	@ (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	20000000 	.word	0x20000000
 8001f24:	431bde83 	.word	0x431bde83

08001f28 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a04      	ldr	r2, [pc, #16]	@ (8001f44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f36:	6053      	str	r3, [r2, #4]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40007000 	.word	0x40007000

08001f48 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001f50:	f7ff f8c4 	bl	80010dc <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e063      	b.n	8002028 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10b      	bne.n	8001f84 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe fded 	bl	8000b54 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001f7a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f858 	bl	8002034 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	021a      	lsls	r2, r3, #8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2120      	movs	r1, #32
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f850 	bl	8002050 <QSPI_WaitFlagStateUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001fb4:	7afb      	ldrb	r3, [r7, #11]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d131      	bne.n	800201e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001fc4:	f023 0310 	bic.w	r3, r3, #16
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6852      	ldr	r2, [r2, #4]
 8001fcc:	0611      	lsls	r1, r2, #24
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68d2      	ldr	r2, [r2, #12]
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <HAL_QSPI_Init+0xe8>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6912      	ldr	r2, [r2, #16]
 8001fea:	0411      	lsls	r1, r2, #16
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6952      	ldr	r2, [r2, #20]
 8001ff0:	4311      	orrs	r1, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6992      	ldr	r2, [r2, #24]
 8001ff6:	4311      	orrs	r1, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8002026:	7afb      	ldrb	r3, [r7, #11]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	ffe0f8fe 	.word	0xffe0f8fe

08002034 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	4613      	mov	r3, r2
 800205e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002060:	e01a      	b.n	8002098 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002068:	d016      	beq.n	8002098 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800206a:	f7ff f837 	bl	80010dc <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	429a      	cmp	r2, r3
 8002078:	d302      	bcc.n	8002080 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10b      	bne.n	8002098 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2204      	movs	r2, #4
 8002084:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208c:	f043 0201 	orr.w	r2, r3, #1
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e00e      	b.n	80020b6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf14      	ite	ne
 80020a6:	2301      	movne	r3, #1
 80020a8:	2300      	moveq	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d1d6      	bne.n	8002062 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e3ca      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d2:	4b97      	ldr	r3, [pc, #604]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020dc:	4b94      	ldr	r3, [pc, #592]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80e4 	beq.w	80022bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <HAL_RCC_OscConfig+0x4a>
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	f040 808b 	bne.w	8002218 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b01      	cmp	r3, #1
 8002106:	f040 8087 	bne.w	8002218 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800210a:	4b89      	ldr	r3, [pc, #548]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_RCC_OscConfig+0x62>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e3a2      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1a      	ldr	r2, [r3, #32]
 8002126:	4b82      	ldr	r3, [pc, #520]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d004      	beq.n	800213c <HAL_RCC_OscConfig+0x7c>
 8002132:	4b7f      	ldr	r3, [pc, #508]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800213a:	e005      	b.n	8002148 <HAL_RCC_OscConfig+0x88>
 800213c:	4b7c      	ldr	r3, [pc, #496]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 800213e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002148:	4293      	cmp	r3, r2
 800214a:	d223      	bcs.n	8002194 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fd55 	bl	8002c00 <RCC_SetFlashLatencyFromMSIRange>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e383      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002160:	4b73      	ldr	r3, [pc, #460]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a72      	ldr	r2, [pc, #456]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002166:	f043 0308 	orr.w	r3, r3, #8
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b70      	ldr	r3, [pc, #448]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	496d      	ldr	r1, [pc, #436]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800217e:	4b6c      	ldr	r3, [pc, #432]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	4968      	ldr	r1, [pc, #416]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
 8002192:	e025      	b.n	80021e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002194:	4b66      	ldr	r3, [pc, #408]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a65      	ldr	r2, [pc, #404]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 800219a:	f043 0308 	orr.w	r3, r3, #8
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b63      	ldr	r3, [pc, #396]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4960      	ldr	r1, [pc, #384]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	495b      	ldr	r1, [pc, #364]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fd15 	bl	8002c00 <RCC_SetFlashLatencyFromMSIRange>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e343      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021e0:	f000 fc4a 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b52      	ldr	r3, [pc, #328]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	4950      	ldr	r1, [pc, #320]	@ (8002334 <HAL_RCC_OscConfig+0x274>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
 80021fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002338 <HAL_RCC_OscConfig+0x278>)
 80021fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002200:	4b4e      	ldr	r3, [pc, #312]	@ (800233c <HAL_RCC_OscConfig+0x27c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe ff19 	bl	800103c <HAL_InitTick>
 800220a:	4603      	mov	r3, r0
 800220c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d052      	beq.n	80022ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	e327      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d032      	beq.n	8002286 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002220:	4b43      	ldr	r3, [pc, #268]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a42      	ldr	r2, [pc, #264]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800222c:	f7fe ff56 	bl	80010dc <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002234:	f7fe ff52 	bl	80010dc <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e310      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002246:	4b3a      	ldr	r3, [pc, #232]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002252:	4b37      	ldr	r3, [pc, #220]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a36      	ldr	r2, [pc, #216]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002258:	f043 0308 	orr.w	r3, r3, #8
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b34      	ldr	r3, [pc, #208]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4931      	ldr	r1, [pc, #196]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002270:	4b2f      	ldr	r3, [pc, #188]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	492c      	ldr	r1, [pc, #176]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
 8002284:	e01a      	b.n	80022bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002286:	4b2a      	ldr	r3, [pc, #168]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a29      	ldr	r2, [pc, #164]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002292:	f7fe ff23 	bl	80010dc <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800229a:	f7fe ff1f 	bl	80010dc <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e2dd      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022ac:	4b20      	ldr	r3, [pc, #128]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f0      	bne.n	800229a <HAL_RCC_OscConfig+0x1da>
 80022b8:	e000      	b.n	80022bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d074      	beq.n	80023b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d005      	beq.n	80022da <HAL_RCC_OscConfig+0x21a>
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	d10e      	bne.n	80022f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d10b      	bne.n	80022f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022da:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d064      	beq.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d160      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e2ba      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x24a>
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0b      	ldr	r2, [pc, #44]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	e026      	b.n	8002358 <HAL_RCC_OscConfig+0x298>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002312:	d115      	bne.n	8002340 <HAL_RCC_OscConfig+0x280>
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 800231a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b03      	ldr	r3, [pc, #12]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a02      	ldr	r2, [pc, #8]	@ (8002330 <HAL_RCC_OscConfig+0x270>)
 8002326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	e014      	b.n	8002358 <HAL_RCC_OscConfig+0x298>
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	08004b80 	.word	0x08004b80
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004
 8002340:	4ba0      	ldr	r3, [pc, #640]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a9f      	ldr	r2, [pc, #636]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b9d      	ldr	r3, [pc, #628]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a9c      	ldr	r2, [pc, #624]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe febc 	bl	80010dc <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002368:	f7fe feb8 	bl	80010dc <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	@ 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e276      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237a:	4b92      	ldr	r3, [pc, #584]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x2a8>
 8002386:	e014      	b.n	80023b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fea8 	bl	80010dc <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002390:	f7fe fea4 	bl	80010dc <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	@ 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e262      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023a2:	4b88      	ldr	r3, [pc, #544]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x2d0>
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d060      	beq.n	8002480 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_OscConfig+0x310>
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d119      	bne.n	80023fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d116      	bne.n	80023fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d0:	4b7c      	ldr	r3, [pc, #496]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_OscConfig+0x328>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e23f      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e8:	4b76      	ldr	r3, [pc, #472]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	061b      	lsls	r3, r3, #24
 80023f6:	4973      	ldr	r1, [pc, #460]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023fc:	e040      	b.n	8002480 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d023      	beq.n	800244e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002406:	4b6f      	ldr	r3, [pc, #444]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a6e      	ldr	r2, [pc, #440]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fe63 	bl	80010dc <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241a:	f7fe fe5f 	bl	80010dc <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e21d      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242c:	4b65      	ldr	r3, [pc, #404]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4b62      	ldr	r3, [pc, #392]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	061b      	lsls	r3, r3, #24
 8002446:	495f      	ldr	r1, [pc, #380]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
 800244c:	e018      	b.n	8002480 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244e:	4b5d      	ldr	r3, [pc, #372]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a5c      	ldr	r2, [pc, #368]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe fe3f 	bl	80010dc <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002462:	f7fe fe3b 	bl	80010dc <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1f9      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002474:	4b53      	ldr	r3, [pc, #332]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f0      	bne.n	8002462 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d03c      	beq.n	8002506 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01c      	beq.n	80024ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002494:	4b4b      	ldr	r3, [pc, #300]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800249a:	4a4a      	ldr	r2, [pc, #296]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe fe1a 	bl	80010dc <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ac:	f7fe fe16 	bl	80010dc <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1d4      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024be:	4b41      	ldr	r3, [pc, #260]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 80024c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ef      	beq.n	80024ac <HAL_RCC_OscConfig+0x3ec>
 80024cc:	e01b      	b.n	8002506 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ce:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 80024d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d4:	4a3b      	ldr	r2, [pc, #236]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024de:	f7fe fdfd 	bl	80010dc <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e6:	f7fe fdf9 	bl	80010dc <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e1b7      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024f8:	4b32      	ldr	r3, [pc, #200]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 80024fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ef      	bne.n	80024e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80a6 	beq.w	8002660 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002514:	2300      	movs	r3, #0
 8002516:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002518:	4b2a      	ldr	r3, [pc, #168]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10d      	bne.n	8002540 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002524:	4b27      	ldr	r3, [pc, #156]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	4a26      	ldr	r2, [pc, #152]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 800252a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800252e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002530:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253c:	2301      	movs	r3, #1
 800253e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002540:	4b21      	ldr	r3, [pc, #132]	@ (80025c8 <HAL_RCC_OscConfig+0x508>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d118      	bne.n	800257e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800254c:	4b1e      	ldr	r3, [pc, #120]	@ (80025c8 <HAL_RCC_OscConfig+0x508>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1d      	ldr	r2, [pc, #116]	@ (80025c8 <HAL_RCC_OscConfig+0x508>)
 8002552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002556:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002558:	f7fe fdc0 	bl	80010dc <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002560:	f7fe fdbc 	bl	80010dc <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e17a      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <HAL_RCC_OscConfig+0x508>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d108      	bne.n	8002598 <HAL_RCC_OscConfig+0x4d8>
 8002586:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002596:	e029      	b.n	80025ec <HAL_RCC_OscConfig+0x52c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b05      	cmp	r3, #5
 800259e:	d115      	bne.n	80025cc <HAL_RCC_OscConfig+0x50c>
 80025a0:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a6:	4a07      	ldr	r2, [pc, #28]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025b0:	4b04      	ldr	r3, [pc, #16]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b6:	4a03      	ldr	r2, [pc, #12]	@ (80025c4 <HAL_RCC_OscConfig+0x504>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c0:	e014      	b.n	80025ec <HAL_RCC_OscConfig+0x52c>
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40007000 	.word	0x40007000
 80025cc:	4b9c      	ldr	r3, [pc, #624]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d2:	4a9b      	ldr	r2, [pc, #620]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025dc:	4b98      	ldr	r3, [pc, #608]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e2:	4a97      	ldr	r2, [pc, #604]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 80025e4:	f023 0304 	bic.w	r3, r3, #4
 80025e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d016      	beq.n	8002622 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7fe fd72 	bl	80010dc <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7fe fd6e 	bl	80010dc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e12a      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002612:	4b8b      	ldr	r3, [pc, #556]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ed      	beq.n	80025fc <HAL_RCC_OscConfig+0x53c>
 8002620:	e015      	b.n	800264e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7fe fd5b 	bl	80010dc <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7fe fd57 	bl	80010dc <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e113      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002640:	4b7f      	ldr	r3, [pc, #508]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ed      	bne.n	800262a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264e:	7ffb      	ldrb	r3, [r7, #31]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002654:	4b7a      	ldr	r3, [pc, #488]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002658:	4a79      	ldr	r2, [pc, #484]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 800265a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800265e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80fe 	beq.w	8002866 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266e:	2b02      	cmp	r3, #2
 8002670:	f040 80d0 	bne.w	8002814 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002674:	4b72      	ldr	r3, [pc, #456]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002684:	429a      	cmp	r2, r3
 8002686:	d130      	bne.n	80026ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	3b01      	subs	r3, #1
 8002694:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d127      	bne.n	80026ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d11f      	bne.n	80026ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026b4:	2a07      	cmp	r2, #7
 80026b6:	bf14      	ite	ne
 80026b8:	2201      	movne	r2, #1
 80026ba:	2200      	moveq	r2, #0
 80026bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026be:	4293      	cmp	r3, r2
 80026c0:	d113      	bne.n	80026ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	085b      	lsrs	r3, r3, #1
 80026ce:	3b01      	subs	r3, #1
 80026d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d109      	bne.n	80026ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d06e      	beq.n	80027c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	2b0c      	cmp	r3, #12
 80026ee:	d069      	beq.n	80027c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026f0:	4b53      	ldr	r3, [pc, #332]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d105      	bne.n	8002708 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026fc:	4b50      	ldr	r3, [pc, #320]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0ad      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800270c:	4b4c      	ldr	r3, [pc, #304]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a4b      	ldr	r2, [pc, #300]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 8002712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002716:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002718:	f7fe fce0 	bl	80010dc <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fcdc 	bl	80010dc <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e09a      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002732:	4b43      	ldr	r3, [pc, #268]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800273e:	4b40      	ldr	r3, [pc, #256]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	4b40      	ldr	r3, [pc, #256]	@ (8002844 <HAL_RCC_OscConfig+0x784>)
 8002744:	4013      	ands	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800274e:	3a01      	subs	r2, #1
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	4311      	orrs	r1, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002758:	0212      	lsls	r2, r2, #8
 800275a:	4311      	orrs	r1, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002760:	0852      	lsrs	r2, r2, #1
 8002762:	3a01      	subs	r2, #1
 8002764:	0552      	lsls	r2, r2, #21
 8002766:	4311      	orrs	r1, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800276c:	0852      	lsrs	r2, r2, #1
 800276e:	3a01      	subs	r2, #1
 8002770:	0652      	lsls	r2, r2, #25
 8002772:	4311      	orrs	r1, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002778:	0912      	lsrs	r2, r2, #4
 800277a:	0452      	lsls	r2, r2, #17
 800277c:	430a      	orrs	r2, r1
 800277e:	4930      	ldr	r1, [pc, #192]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 8002780:	4313      	orrs	r3, r2
 8002782:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002784:	4b2e      	ldr	r3, [pc, #184]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a2d      	ldr	r2, [pc, #180]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 800278a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800278e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002790:	4b2b      	ldr	r3, [pc, #172]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4a2a      	ldr	r2, [pc, #168]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 8002796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800279a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800279c:	f7fe fc9e 	bl	80010dc <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe fc9a 	bl	80010dc <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e058      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b6:	4b22      	ldr	r3, [pc, #136]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027c2:	e050      	b.n	8002866 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e04f      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d148      	bne.n	8002866 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a19      	ldr	r2, [pc, #100]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 80027da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027e0:	4b17      	ldr	r3, [pc, #92]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a16      	ldr	r2, [pc, #88]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 80027e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027ec:	f7fe fc76 	bl	80010dc <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe fc72 	bl	80010dc <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e030      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002806:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x734>
 8002812:	e028      	b.n	8002866 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b0c      	cmp	r3, #12
 8002818:	d023      	beq.n	8002862 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b09      	ldr	r3, [pc, #36]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a08      	ldr	r2, [pc, #32]	@ (8002840 <HAL_RCC_OscConfig+0x780>)
 8002820:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fc59 	bl	80010dc <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800282c:	e00c      	b.n	8002848 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe fc55 	bl	80010dc <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d905      	bls.n	8002848 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e013      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
 8002840:	40021000 	.word	0x40021000
 8002844:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002848:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <HAL_RCC_OscConfig+0x7b0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ec      	bne.n	800282e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_RCC_OscConfig+0x7b0>)
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	4905      	ldr	r1, [pc, #20]	@ (8002870 <HAL_RCC_OscConfig+0x7b0>)
 800285a:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <HAL_RCC_OscConfig+0x7b4>)
 800285c:	4013      	ands	r3, r2
 800285e:	60cb      	str	r3, [r1, #12]
 8002860:	e001      	b.n	8002866 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3720      	adds	r7, #32
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	feeefffc 	.word	0xfeeefffc

08002878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0e7      	b.n	8002a5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800288c:	4b75      	ldr	r3, [pc, #468]	@ (8002a64 <HAL_RCC_ClockConfig+0x1ec>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d910      	bls.n	80028bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b72      	ldr	r3, [pc, #456]	@ (8002a64 <HAL_RCC_ClockConfig+0x1ec>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 0207 	bic.w	r2, r3, #7
 80028a2:	4970      	ldr	r1, [pc, #448]	@ (8002a64 <HAL_RCC_ClockConfig+0x1ec>)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002a64 <HAL_RCC_ClockConfig+0x1ec>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0cf      	b.n	8002a5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d010      	beq.n	80028ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4b66      	ldr	r3, [pc, #408]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d908      	bls.n	80028ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b63      	ldr	r3, [pc, #396]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4960      	ldr	r1, [pc, #384]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d04c      	beq.n	8002990 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d121      	bne.n	800294e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0a6      	b.n	8002a5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002916:	4b54      	ldr	r3, [pc, #336]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d115      	bne.n	800294e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e09a      	b.n	8002a5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800292e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e08e      	b.n	8002a5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800293e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e086      	b.n	8002a5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800294e:	4b46      	ldr	r3, [pc, #280]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f023 0203 	bic.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4943      	ldr	r1, [pc, #268]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 800295c:	4313      	orrs	r3, r2
 800295e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002960:	f7fe fbbc 	bl	80010dc <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	e00a      	b.n	800297e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002968:	f7fe fbb8 	bl	80010dc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e06e      	b.n	8002a5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 020c 	and.w	r2, r3, #12
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	429a      	cmp	r2, r3
 800298e:	d1eb      	bne.n	8002968 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d010      	beq.n	80029be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	4b31      	ldr	r3, [pc, #196]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d208      	bcs.n	80029be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	492b      	ldr	r1, [pc, #172]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029be:	4b29      	ldr	r3, [pc, #164]	@ (8002a64 <HAL_RCC_ClockConfig+0x1ec>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d210      	bcs.n	80029ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029cc:	4b25      	ldr	r3, [pc, #148]	@ (8002a64 <HAL_RCC_ClockConfig+0x1ec>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 0207 	bic.w	r2, r3, #7
 80029d4:	4923      	ldr	r1, [pc, #140]	@ (8002a64 <HAL_RCC_ClockConfig+0x1ec>)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	4313      	orrs	r3, r2
 80029da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029dc:	4b21      	ldr	r3, [pc, #132]	@ (8002a64 <HAL_RCC_ClockConfig+0x1ec>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e036      	b.n	8002a5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4918      	ldr	r1, [pc, #96]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d009      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a18:	4b13      	ldr	r3, [pc, #76]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4910      	ldr	r1, [pc, #64]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a2c:	f000 f824 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b0d      	ldr	r3, [pc, #52]	@ (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	490b      	ldr	r1, [pc, #44]	@ (8002a6c <HAL_RCC_ClockConfig+0x1f4>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
 8002a48:	4a09      	ldr	r2, [pc, #36]	@ (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 8002a4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a4c:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_RCC_ClockConfig+0x1fc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe faf3 	bl	800103c <HAL_InitTick>
 8002a56:	4603      	mov	r3, r0
 8002a58:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a5a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40022000 	.word	0x40022000
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	08004b80 	.word	0x08004b80
 8002a70:	20000000 	.word	0x20000000
 8002a74:	20000004 	.word	0x20000004

08002a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	@ 0x24
 8002a7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a86:	4b3e      	ldr	r3, [pc, #248]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a90:	4b3b      	ldr	r3, [pc, #236]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x34>
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d121      	bne.n	8002aea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d11e      	bne.n	8002aea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002aac:	4b34      	ldr	r3, [pc, #208]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ab8:	4b31      	ldr	r3, [pc, #196]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e005      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002adc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10d      	bne.n	8002b00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ae8:	e00a      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d102      	bne.n	8002af6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002af0:	4b25      	ldr	r3, [pc, #148]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	e004      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002afc:	4b23      	ldr	r3, [pc, #140]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8002afe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	d134      	bne.n	8002b70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b06:	4b1e      	ldr	r3, [pc, #120]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d003      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0xac>
 8002b1c:	e005      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b20:	617b      	str	r3, [r7, #20]
      break;
 8002b22:	e005      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b24:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b26:	617b      	str	r3, [r7, #20]
      break;
 8002b28:	e002      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	617b      	str	r3, [r7, #20]
      break;
 8002b2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b30:	4b13      	ldr	r3, [pc, #76]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b3e:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	fb03 f202 	mul.w	r2, r3, r2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b56:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	0e5b      	lsrs	r3, r3, #25
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	3301      	adds	r3, #1
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b70:	69bb      	ldr	r3, [r7, #24]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3724      	adds	r7, #36	@ 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	08004b98 	.word	0x08004b98
 8002b88:	00f42400 	.word	0x00f42400
 8002b8c:	007a1200 	.word	0x007a1200

08002b90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b94:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000000 	.word	0x20000000

08002ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bac:	f7ff fff0 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4904      	ldr	r1, [pc, #16]	@ (8002bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	08004b90 	.word	0x08004b90

08002bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bd8:	f7ff ffda 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	0adb      	lsrs	r3, r3, #11
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4904      	ldr	r1, [pc, #16]	@ (8002bfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	08004b90 	.word	0x08004b90

08002c00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c18:	f7ff f922 	bl	8001e60 <HAL_PWREx_GetVoltageRange>
 8002c1c:	6178      	str	r0, [r7, #20]
 8002c1e:	e014      	b.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c20:	4b25      	ldr	r3, [pc, #148]	@ (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c24:	4a24      	ldr	r2, [pc, #144]	@ (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c2c:	4b22      	ldr	r3, [pc, #136]	@ (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c38:	f7ff f912 	bl	8001e60 <HAL_PWREx_GetVoltageRange>
 8002c3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c42:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c50:	d10b      	bne.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b80      	cmp	r3, #128	@ 0x80
 8002c56:	d919      	bls.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c5c:	d902      	bls.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c5e:	2302      	movs	r3, #2
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	e013      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c64:	2301      	movs	r3, #1
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	e010      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b80      	cmp	r3, #128	@ 0x80
 8002c6e:	d902      	bls.n	8002c76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c70:	2303      	movs	r3, #3
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	e00a      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b80      	cmp	r3, #128	@ 0x80
 8002c7a:	d102      	bne.n	8002c82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	e004      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b70      	cmp	r3, #112	@ 0x70
 8002c86:	d101      	bne.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c88:	2301      	movs	r3, #1
 8002c8a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 0207 	bic.w	r2, r3, #7
 8002c94:	4909      	ldr	r1, [pc, #36]	@ (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c9c:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d001      	beq.n	8002cae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40022000 	.word	0x40022000

08002cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cc8:	2300      	movs	r3, #0
 8002cca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ccc:	2300      	movs	r3, #0
 8002cce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d041      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ce0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ce4:	d02a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ce6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002cea:	d824      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cf2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cf6:	d81e      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d00:	d010      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d02:	e018      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d04:	4b86      	ldr	r3, [pc, #536]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4a85      	ldr	r2, [pc, #532]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d0e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d10:	e015      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 facb 	bl	80032b4 <RCCEx_PLLSAI1_Config>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d22:	e00c      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3320      	adds	r3, #32
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fbb6 	bl	800349c <RCCEx_PLLSAI2_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d34:	e003      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	74fb      	strb	r3, [r7, #19]
      break;
 8002d3a:	e000      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d3e:	7cfb      	ldrb	r3, [r7, #19]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10b      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d44:	4b76      	ldr	r3, [pc, #472]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d52:	4973      	ldr	r1, [pc, #460]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d5a:	e001      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
 8002d5e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d041      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d74:	d02a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d7a:	d824      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d80:	d008      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d86:	d81e      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d90:	d010      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d92:	e018      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d94:	4b62      	ldr	r3, [pc, #392]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a61      	ldr	r2, [pc, #388]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002da0:	e015      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fa83 	bl	80032b4 <RCCEx_PLLSAI1_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002db2:	e00c      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3320      	adds	r3, #32
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fb6e 	bl	800349c <RCCEx_PLLSAI2_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dc4:	e003      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	74fb      	strb	r3, [r7, #19]
      break;
 8002dca:	e000      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dce:	7cfb      	ldrb	r3, [r7, #19]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10b      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dd4:	4b52      	ldr	r3, [pc, #328]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dda:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002de2:	494f      	ldr	r1, [pc, #316]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002dea:	e001      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80a0 	beq.w	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e02:	4b47      	ldr	r3, [pc, #284]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e12:	2300      	movs	r3, #0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00d      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e18:	4b41      	ldr	r3, [pc, #260]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	4a40      	ldr	r2, [pc, #256]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e24:	4b3e      	ldr	r3, [pc, #248]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e30:	2301      	movs	r3, #1
 8002e32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e34:	4b3b      	ldr	r3, [pc, #236]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a3a      	ldr	r2, [pc, #232]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e40:	f7fe f94c 	bl	80010dc <HAL_GetTick>
 8002e44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e46:	e009      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e48:	f7fe f948 	bl	80010dc <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d902      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	74fb      	strb	r3, [r7, #19]
        break;
 8002e5a:	e005      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e5c:	4b31      	ldr	r3, [pc, #196]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ef      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e68:	7cfb      	ldrb	r3, [r7, #19]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d15c      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01f      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d019      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e8c:	4b24      	ldr	r3, [pc, #144]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e98:	4b21      	ldr	r3, [pc, #132]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9e:	4a20      	ldr	r2, [pc, #128]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eae:	4a1c      	ldr	r2, [pc, #112]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eb8:	4a19      	ldr	r2, [pc, #100]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d016      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eca:	f7fe f907 	bl	80010dc <HAL_GetTick>
 8002ece:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed0:	e00b      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe f903 	bl	80010dc <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d902      	bls.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ee8:	e006      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eea:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0ec      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002efe:	4b08      	ldr	r3, [pc, #32]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f0e:	4904      	ldr	r1, [pc, #16]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f16:	e009      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f18:	7cfb      	ldrb	r3, [r7, #19]
 8002f1a:	74bb      	strb	r3, [r7, #18]
 8002f1c:	e006      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f2c:	7c7b      	ldrb	r3, [r7, #17]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d105      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f32:	4b9e      	ldr	r3, [pc, #632]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f36:	4a9d      	ldr	r2, [pc, #628]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f4a:	4b98      	ldr	r3, [pc, #608]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f50:	f023 0203 	bic.w	r2, r3, #3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f58:	4994      	ldr	r1, [pc, #592]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f6c:	4b8f      	ldr	r3, [pc, #572]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f72:	f023 020c 	bic.w	r2, r3, #12
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7a:	498c      	ldr	r1, [pc, #560]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f8e:	4b87      	ldr	r3, [pc, #540]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	4983      	ldr	r1, [pc, #524]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	497b      	ldr	r1, [pc, #492]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fd2:	4b76      	ldr	r3, [pc, #472]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe0:	4972      	ldr	r1, [pc, #456]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ff4:	4b6d      	ldr	r3, [pc, #436]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003002:	496a      	ldr	r1, [pc, #424]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003016:	4b65      	ldr	r3, [pc, #404]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003024:	4961      	ldr	r1, [pc, #388]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003038:	4b5c      	ldr	r3, [pc, #368]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003046:	4959      	ldr	r1, [pc, #356]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800305a:	4b54      	ldr	r3, [pc, #336]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003060:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003068:	4950      	ldr	r1, [pc, #320]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800307c:	4b4b      	ldr	r3, [pc, #300]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003082:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308a:	4948      	ldr	r1, [pc, #288]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800309e:	4b43      	ldr	r3, [pc, #268]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ac:	493f      	ldr	r1, [pc, #252]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d028      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030c0:	4b3a      	ldr	r3, [pc, #232]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ce:	4937      	ldr	r1, [pc, #220]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030de:	d106      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030e0:	4b32      	ldr	r3, [pc, #200]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a31      	ldr	r2, [pc, #196]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030ea:	60d3      	str	r3, [r2, #12]
 80030ec:	e011      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030f6:	d10c      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	2101      	movs	r1, #1
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f8d8 	bl	80032b4 <RCCEx_PLLSAI1_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800310e:	7cfb      	ldrb	r3, [r7, #19]
 8003110:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d028      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800311e:	4b23      	ldr	r3, [pc, #140]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003124:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312c:	491f      	ldr	r1, [pc, #124]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800313c:	d106      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800313e:	4b1b      	ldr	r3, [pc, #108]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4a1a      	ldr	r2, [pc, #104]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003144:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003148:	60d3      	str	r3, [r2, #12]
 800314a:	e011      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003150:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003154:	d10c      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	2101      	movs	r1, #1
 800315c:	4618      	mov	r0, r3
 800315e:	f000 f8a9 	bl	80032b4 <RCCEx_PLLSAI1_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800316c:	7cfb      	ldrb	r3, [r7, #19]
 800316e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d02b      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800317c:	4b0b      	ldr	r3, [pc, #44]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003182:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318a:	4908      	ldr	r1, [pc, #32]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003196:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800319a:	d109      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800319c:	4b03      	ldr	r3, [pc, #12]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a02      	ldr	r2, [pc, #8]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031a6:	60d3      	str	r3, [r2, #12]
 80031a8:	e014      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	2101      	movs	r1, #1
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 f877 	bl	80032b4 <RCCEx_PLLSAI1_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ca:	7cfb      	ldrb	r3, [r7, #19]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d02f      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031ee:	4928      	ldr	r1, [pc, #160]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031fe:	d10d      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	2102      	movs	r1, #2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f854 	bl	80032b4 <RCCEx_PLLSAI1_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d014      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003216:	7cfb      	ldrb	r3, [r7, #19]
 8003218:	74bb      	strb	r3, [r7, #18]
 800321a:	e011      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003224:	d10c      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3320      	adds	r3, #32
 800322a:	2102      	movs	r1, #2
 800322c:	4618      	mov	r0, r3
 800322e:	f000 f935 	bl	800349c <RCCEx_PLLSAI2_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003236:	7cfb      	ldrb	r3, [r7, #19]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800324c:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003252:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800325a:	490d      	ldr	r1, [pc, #52]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00b      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800326e:	4b08      	ldr	r3, [pc, #32]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003274:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800327e:	4904      	ldr	r1, [pc, #16]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003286:	7cbb      	ldrb	r3, [r7, #18]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000

08003294 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003298:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a04      	ldr	r2, [pc, #16]	@ (80032b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	6013      	str	r3, [r2, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000

080032b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032c2:	4b75      	ldr	r3, [pc, #468]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d018      	beq.n	8003300 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032ce:	4b72      	ldr	r3, [pc, #456]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0203 	and.w	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d10d      	bne.n	80032fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
       ||
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032e6:	4b6c      	ldr	r3, [pc, #432]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
       ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d047      	beq.n	800338a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	e044      	b.n	800338a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d018      	beq.n	800333a <RCCEx_PLLSAI1_Config+0x86>
 8003308:	2b03      	cmp	r3, #3
 800330a:	d825      	bhi.n	8003358 <RCCEx_PLLSAI1_Config+0xa4>
 800330c:	2b01      	cmp	r3, #1
 800330e:	d002      	beq.n	8003316 <RCCEx_PLLSAI1_Config+0x62>
 8003310:	2b02      	cmp	r3, #2
 8003312:	d009      	beq.n	8003328 <RCCEx_PLLSAI1_Config+0x74>
 8003314:	e020      	b.n	8003358 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003316:	4b60      	ldr	r3, [pc, #384]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d11d      	bne.n	800335e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003326:	e01a      	b.n	800335e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003328:	4b5b      	ldr	r3, [pc, #364]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d116      	bne.n	8003362 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003338:	e013      	b.n	8003362 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800333a:	4b57      	ldr	r3, [pc, #348]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10f      	bne.n	8003366 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003346:	4b54      	ldr	r3, [pc, #336]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003356:	e006      	b.n	8003366 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
      break;
 800335c:	e004      	b.n	8003368 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335e:	bf00      	nop
 8003360:	e002      	b.n	8003368 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003362:	bf00      	nop
 8003364:	e000      	b.n	8003368 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003366:	bf00      	nop
    }

    if(status == HAL_OK)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10d      	bne.n	800338a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800336e:	4b4a      	ldr	r3, [pc, #296]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6819      	ldr	r1, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	430b      	orrs	r3, r1
 8003384:	4944      	ldr	r1, [pc, #272]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003386:	4313      	orrs	r3, r2
 8003388:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d17d      	bne.n	800348c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003390:	4b41      	ldr	r3, [pc, #260]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a40      	ldr	r2, [pc, #256]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003396:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800339a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339c:	f7fd fe9e 	bl	80010dc <HAL_GetTick>
 80033a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033a2:	e009      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033a4:	f7fd fe9a 	bl	80010dc <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d902      	bls.n	80033b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	73fb      	strb	r3, [r7, #15]
        break;
 80033b6:	e005      	b.n	80033c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033b8:	4b37      	ldr	r3, [pc, #220]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1ef      	bne.n	80033a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d160      	bne.n	800348c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d111      	bne.n	80033f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033d0:	4b31      	ldr	r3, [pc, #196]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80033d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6892      	ldr	r2, [r2, #8]
 80033e0:	0211      	lsls	r1, r2, #8
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68d2      	ldr	r2, [r2, #12]
 80033e6:	0912      	lsrs	r2, r2, #4
 80033e8:	0452      	lsls	r2, r2, #17
 80033ea:	430a      	orrs	r2, r1
 80033ec:	492a      	ldr	r1, [pc, #168]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	610b      	str	r3, [r1, #16]
 80033f2:	e027      	b.n	8003444 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d112      	bne.n	8003420 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033fa:	4b27      	ldr	r3, [pc, #156]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003402:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6892      	ldr	r2, [r2, #8]
 800340a:	0211      	lsls	r1, r2, #8
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6912      	ldr	r2, [r2, #16]
 8003410:	0852      	lsrs	r2, r2, #1
 8003412:	3a01      	subs	r2, #1
 8003414:	0552      	lsls	r2, r2, #21
 8003416:	430a      	orrs	r2, r1
 8003418:	491f      	ldr	r1, [pc, #124]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341a:	4313      	orrs	r3, r2
 800341c:	610b      	str	r3, [r1, #16]
 800341e:	e011      	b.n	8003444 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003420:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003428:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6892      	ldr	r2, [r2, #8]
 8003430:	0211      	lsls	r1, r2, #8
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6952      	ldr	r2, [r2, #20]
 8003436:	0852      	lsrs	r2, r2, #1
 8003438:	3a01      	subs	r2, #1
 800343a:	0652      	lsls	r2, r2, #25
 800343c:	430a      	orrs	r2, r1
 800343e:	4916      	ldr	r1, [pc, #88]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003440:	4313      	orrs	r3, r2
 8003442:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003444:	4b14      	ldr	r3, [pc, #80]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a13      	ldr	r2, [pc, #76]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800344e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fd fe44 	bl	80010dc <HAL_GetTick>
 8003454:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003456:	e009      	b.n	800346c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003458:	f7fd fe40 	bl	80010dc <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d902      	bls.n	800346c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	73fb      	strb	r3, [r7, #15]
          break;
 800346a:	e005      	b.n	8003478 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800346c:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ef      	beq.n	8003458 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800347e:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	4904      	ldr	r1, [pc, #16]	@ (8003498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003488:	4313      	orrs	r3, r2
 800348a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000

0800349c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d018      	beq.n	80034e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034b6:	4b67      	ldr	r3, [pc, #412]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0203 	and.w	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d10d      	bne.n	80034e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
       ||
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034ce:	4b61      	ldr	r3, [pc, #388]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
       ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d047      	beq.n	8003572 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
 80034e6:	e044      	b.n	8003572 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d018      	beq.n	8003522 <RCCEx_PLLSAI2_Config+0x86>
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d825      	bhi.n	8003540 <RCCEx_PLLSAI2_Config+0xa4>
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d002      	beq.n	80034fe <RCCEx_PLLSAI2_Config+0x62>
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d009      	beq.n	8003510 <RCCEx_PLLSAI2_Config+0x74>
 80034fc:	e020      	b.n	8003540 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034fe:	4b55      	ldr	r3, [pc, #340]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11d      	bne.n	8003546 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350e:	e01a      	b.n	8003546 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003510:	4b50      	ldr	r3, [pc, #320]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003518:	2b00      	cmp	r3, #0
 800351a:	d116      	bne.n	800354a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003520:	e013      	b.n	800354a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003522:	4b4c      	ldr	r3, [pc, #304]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10f      	bne.n	800354e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800352e:	4b49      	ldr	r3, [pc, #292]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800353e:	e006      	b.n	800354e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      break;
 8003544:	e004      	b.n	8003550 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003546:	bf00      	nop
 8003548:	e002      	b.n	8003550 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800354e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10d      	bne.n	8003572 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003556:	4b3f      	ldr	r3, [pc, #252]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6819      	ldr	r1, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	430b      	orrs	r3, r1
 800356c:	4939      	ldr	r1, [pc, #228]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356e:	4313      	orrs	r3, r2
 8003570:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d167      	bne.n	8003648 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003578:	4b36      	ldr	r3, [pc, #216]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a35      	ldr	r2, [pc, #212]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003584:	f7fd fdaa 	bl	80010dc <HAL_GetTick>
 8003588:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800358a:	e009      	b.n	80035a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800358c:	f7fd fda6 	bl	80010dc <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d902      	bls.n	80035a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	73fb      	strb	r3, [r7, #15]
        break;
 800359e:	e005      	b.n	80035ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ef      	bne.n	800358c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d14a      	bne.n	8003648 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d111      	bne.n	80035dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035b8:	4b26      	ldr	r3, [pc, #152]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80035c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6892      	ldr	r2, [r2, #8]
 80035c8:	0211      	lsls	r1, r2, #8
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68d2      	ldr	r2, [r2, #12]
 80035ce:	0912      	lsrs	r2, r2, #4
 80035d0:	0452      	lsls	r2, r2, #17
 80035d2:	430a      	orrs	r2, r1
 80035d4:	491f      	ldr	r1, [pc, #124]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	614b      	str	r3, [r1, #20]
 80035da:	e011      	b.n	8003600 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80035e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6892      	ldr	r2, [r2, #8]
 80035ec:	0211      	lsls	r1, r2, #8
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6912      	ldr	r2, [r2, #16]
 80035f2:	0852      	lsrs	r2, r2, #1
 80035f4:	3a01      	subs	r2, #1
 80035f6:	0652      	lsls	r2, r2, #25
 80035f8:	430a      	orrs	r2, r1
 80035fa:	4916      	ldr	r1, [pc, #88]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003600:	4b14      	ldr	r3, [pc, #80]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a13      	ldr	r2, [pc, #76]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800360a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360c:	f7fd fd66 	bl	80010dc <HAL_GetTick>
 8003610:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003612:	e009      	b.n	8003628 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003614:	f7fd fd62 	bl	80010dc <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d902      	bls.n	8003628 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	73fb      	strb	r3, [r7, #15]
          break;
 8003626:	e005      	b.n	8003634 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003628:	4b0a      	ldr	r3, [pc, #40]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0ef      	beq.n	8003614 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800363a:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	4904      	ldr	r1, [pc, #16]	@ (8003654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003644:	4313      	orrs	r3, r2
 8003646:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003648:	7bfb      	ldrb	r3, [r7, #15]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000

08003658 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e095      	b.n	8003796 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	2b00      	cmp	r3, #0
 8003670:	d108      	bne.n	8003684 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800367a:	d009      	beq.n	8003690 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	61da      	str	r2, [r3, #28]
 8003682:	e005      	b.n	8003690 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd fa96 	bl	8000bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036d0:	d902      	bls.n	80036d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e002      	b.n	80036de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80036e6:	d007      	beq.n	80036f8 <HAL_SPI_Init+0xa0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036f0:	d002      	beq.n	80036f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800373a:	ea42 0103 	orr.w	r1, r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003742:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	0c1b      	lsrs	r3, r3, #16
 8003754:	f003 0204 	and.w	r2, r3, #4
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003774:	ea42 0103 	orr.w	r1, r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e040      	b.n	8003832 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fd fa4f 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2224      	movs	r2, #36	@ 0x24
 80037ca:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fb69 	bl	8003ebc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f8ae 	bl	800394c <UART_SetConfig>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e01b      	b.n	8003832 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003808:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003818:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fbe8 	bl	8004000 <UART_CheckIdleState>
 8003830:	4603      	mov	r3, r0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b08a      	sub	sp, #40	@ 0x28
 800383e:	af02      	add	r7, sp, #8
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800384e:	2b20      	cmp	r3, #32
 8003850:	d177      	bne.n	8003942 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_UART_Transmit+0x24>
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e070      	b.n	8003944 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2221      	movs	r2, #33	@ 0x21
 800386e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003870:	f7fd fc34 	bl	80010dc <HAL_GetTick>
 8003874:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	88fa      	ldrh	r2, [r7, #6]
 8003882:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800388e:	d108      	bne.n	80038a2 <HAL_UART_Transmit+0x68>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	e003      	b.n	80038aa <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038aa:	e02f      	b.n	800390c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2200      	movs	r2, #0
 80038b4:	2180      	movs	r1, #128	@ 0x80
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 fc4a 	bl	8004150 <UART_WaitOnFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2220      	movs	r2, #32
 80038c6:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e03b      	b.n	8003944 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10b      	bne.n	80038ea <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	881a      	ldrh	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038de:	b292      	uxth	r2, r2
 80038e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	3302      	adds	r3, #2
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	e007      	b.n	80038fa <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	781a      	ldrb	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	3301      	adds	r3, #1
 80038f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1c9      	bne.n	80038ac <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2200      	movs	r2, #0
 8003920:	2140      	movs	r1, #64	@ 0x40
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fc14 	bl	8004150 <UART_WaitOnFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d004      	beq.n	8003938 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e005      	b.n	8003944 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	e000      	b.n	8003944 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003942:	2302      	movs	r3, #2
  }
}
 8003944:	4618      	mov	r0, r3
 8003946:	3720      	adds	r7, #32
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800394c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003950:	b08a      	sub	sp, #40	@ 0x28
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	431a      	orrs	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	4313      	orrs	r3, r2
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4ba4      	ldr	r3, [pc, #656]	@ (8003c0c <UART_SetConfig+0x2c0>)
 800397c:	4013      	ands	r3, r2
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003984:	430b      	orrs	r3, r1
 8003986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a99      	ldr	r2, [pc, #612]	@ (8003c10 <UART_SetConfig+0x2c4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b4:	4313      	orrs	r3, r2
 80039b6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c8:	430a      	orrs	r2, r1
 80039ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a90      	ldr	r2, [pc, #576]	@ (8003c14 <UART_SetConfig+0x2c8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d126      	bne.n	8003a24 <UART_SetConfig+0xd8>
 80039d6:	4b90      	ldr	r3, [pc, #576]	@ (8003c18 <UART_SetConfig+0x2cc>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d81b      	bhi.n	8003a1c <UART_SetConfig+0xd0>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <UART_SetConfig+0xa0>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	080039fd 	.word	0x080039fd
 80039f0:	08003a0d 	.word	0x08003a0d
 80039f4:	08003a05 	.word	0x08003a05
 80039f8:	08003a15 	.word	0x08003a15
 80039fc:	2301      	movs	r3, #1
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a02:	e116      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003a04:	2302      	movs	r3, #2
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a0a:	e112      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a12:	e10e      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003a14:	2308      	movs	r3, #8
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a1a:	e10a      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a22:	e106      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a7c      	ldr	r2, [pc, #496]	@ (8003c1c <UART_SetConfig+0x2d0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d138      	bne.n	8003aa0 <UART_SetConfig+0x154>
 8003a2e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c18 <UART_SetConfig+0x2cc>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a34:	f003 030c 	and.w	r3, r3, #12
 8003a38:	2b0c      	cmp	r3, #12
 8003a3a:	d82d      	bhi.n	8003a98 <UART_SetConfig+0x14c>
 8003a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a44 <UART_SetConfig+0xf8>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003a79 	.word	0x08003a79
 8003a48:	08003a99 	.word	0x08003a99
 8003a4c:	08003a99 	.word	0x08003a99
 8003a50:	08003a99 	.word	0x08003a99
 8003a54:	08003a89 	.word	0x08003a89
 8003a58:	08003a99 	.word	0x08003a99
 8003a5c:	08003a99 	.word	0x08003a99
 8003a60:	08003a99 	.word	0x08003a99
 8003a64:	08003a81 	.word	0x08003a81
 8003a68:	08003a99 	.word	0x08003a99
 8003a6c:	08003a99 	.word	0x08003a99
 8003a70:	08003a99 	.word	0x08003a99
 8003a74:	08003a91 	.word	0x08003a91
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a7e:	e0d8      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003a80:	2302      	movs	r3, #2
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a86:	e0d4      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8e:	e0d0      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003a90:	2308      	movs	r3, #8
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a96:	e0cc      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a9e:	e0c8      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a5e      	ldr	r2, [pc, #376]	@ (8003c20 <UART_SetConfig+0x2d4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d125      	bne.n	8003af6 <UART_SetConfig+0x1aa>
 8003aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8003c18 <UART_SetConfig+0x2cc>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ab4:	2b30      	cmp	r3, #48	@ 0x30
 8003ab6:	d016      	beq.n	8003ae6 <UART_SetConfig+0x19a>
 8003ab8:	2b30      	cmp	r3, #48	@ 0x30
 8003aba:	d818      	bhi.n	8003aee <UART_SetConfig+0x1a2>
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d00a      	beq.n	8003ad6 <UART_SetConfig+0x18a>
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d814      	bhi.n	8003aee <UART_SetConfig+0x1a2>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <UART_SetConfig+0x182>
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d008      	beq.n	8003ade <UART_SetConfig+0x192>
 8003acc:	e00f      	b.n	8003aee <UART_SetConfig+0x1a2>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad4:	e0ad      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003adc:	e0a9      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003ade:	2304      	movs	r3, #4
 8003ae0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae4:	e0a5      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003ae6:	2308      	movs	r3, #8
 8003ae8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aec:	e0a1      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003aee:	2310      	movs	r3, #16
 8003af0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af4:	e09d      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a4a      	ldr	r2, [pc, #296]	@ (8003c24 <UART_SetConfig+0x2d8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d125      	bne.n	8003b4c <UART_SetConfig+0x200>
 8003b00:	4b45      	ldr	r3, [pc, #276]	@ (8003c18 <UART_SetConfig+0x2cc>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b0c:	d016      	beq.n	8003b3c <UART_SetConfig+0x1f0>
 8003b0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b10:	d818      	bhi.n	8003b44 <UART_SetConfig+0x1f8>
 8003b12:	2b80      	cmp	r3, #128	@ 0x80
 8003b14:	d00a      	beq.n	8003b2c <UART_SetConfig+0x1e0>
 8003b16:	2b80      	cmp	r3, #128	@ 0x80
 8003b18:	d814      	bhi.n	8003b44 <UART_SetConfig+0x1f8>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <UART_SetConfig+0x1d8>
 8003b1e:	2b40      	cmp	r3, #64	@ 0x40
 8003b20:	d008      	beq.n	8003b34 <UART_SetConfig+0x1e8>
 8003b22:	e00f      	b.n	8003b44 <UART_SetConfig+0x1f8>
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b2a:	e082      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b32:	e07e      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003b34:	2304      	movs	r3, #4
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3a:	e07a      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003b3c:	2308      	movs	r3, #8
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b42:	e076      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003b44:	2310      	movs	r3, #16
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4a:	e072      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a35      	ldr	r2, [pc, #212]	@ (8003c28 <UART_SetConfig+0x2dc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d12a      	bne.n	8003bac <UART_SetConfig+0x260>
 8003b56:	4b30      	ldr	r3, [pc, #192]	@ (8003c18 <UART_SetConfig+0x2cc>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b64:	d01a      	beq.n	8003b9c <UART_SetConfig+0x250>
 8003b66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b6a:	d81b      	bhi.n	8003ba4 <UART_SetConfig+0x258>
 8003b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b70:	d00c      	beq.n	8003b8c <UART_SetConfig+0x240>
 8003b72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b76:	d815      	bhi.n	8003ba4 <UART_SetConfig+0x258>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <UART_SetConfig+0x238>
 8003b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b80:	d008      	beq.n	8003b94 <UART_SetConfig+0x248>
 8003b82:	e00f      	b.n	8003ba4 <UART_SetConfig+0x258>
 8003b84:	2300      	movs	r3, #0
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b8a:	e052      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b92:	e04e      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003b94:	2304      	movs	r3, #4
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9a:	e04a      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba2:	e046      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003baa:	e042      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a17      	ldr	r2, [pc, #92]	@ (8003c10 <UART_SetConfig+0x2c4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d13a      	bne.n	8003c2c <UART_SetConfig+0x2e0>
 8003bb6:	4b18      	ldr	r3, [pc, #96]	@ (8003c18 <UART_SetConfig+0x2cc>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bc4:	d01a      	beq.n	8003bfc <UART_SetConfig+0x2b0>
 8003bc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bca:	d81b      	bhi.n	8003c04 <UART_SetConfig+0x2b8>
 8003bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bd0:	d00c      	beq.n	8003bec <UART_SetConfig+0x2a0>
 8003bd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bd6:	d815      	bhi.n	8003c04 <UART_SetConfig+0x2b8>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <UART_SetConfig+0x298>
 8003bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be0:	d008      	beq.n	8003bf4 <UART_SetConfig+0x2a8>
 8003be2:	e00f      	b.n	8003c04 <UART_SetConfig+0x2b8>
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bea:	e022      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003bec:	2302      	movs	r3, #2
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bf2:	e01e      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bfa:	e01a      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c02:	e016      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003c04:	2310      	movs	r3, #16
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0a:	e012      	b.n	8003c32 <UART_SetConfig+0x2e6>
 8003c0c:	efff69f3 	.word	0xefff69f3
 8003c10:	40008000 	.word	0x40008000
 8003c14:	40013800 	.word	0x40013800
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40004400 	.word	0x40004400
 8003c20:	40004800 	.word	0x40004800
 8003c24:	40004c00 	.word	0x40004c00
 8003c28:	40005000 	.word	0x40005000
 8003c2c:	2310      	movs	r3, #16
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a9f      	ldr	r2, [pc, #636]	@ (8003eb4 <UART_SetConfig+0x568>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d17a      	bne.n	8003d32 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d824      	bhi.n	8003c8e <UART_SetConfig+0x342>
 8003c44:	a201      	add	r2, pc, #4	@ (adr r2, 8003c4c <UART_SetConfig+0x300>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c71 	.word	0x08003c71
 8003c50:	08003c8f 	.word	0x08003c8f
 8003c54:	08003c79 	.word	0x08003c79
 8003c58:	08003c8f 	.word	0x08003c8f
 8003c5c:	08003c7f 	.word	0x08003c7f
 8003c60:	08003c8f 	.word	0x08003c8f
 8003c64:	08003c8f 	.word	0x08003c8f
 8003c68:	08003c8f 	.word	0x08003c8f
 8003c6c:	08003c87 	.word	0x08003c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c70:	f7fe ff9a 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8003c74:	61f8      	str	r0, [r7, #28]
        break;
 8003c76:	e010      	b.n	8003c9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c78:	4b8f      	ldr	r3, [pc, #572]	@ (8003eb8 <UART_SetConfig+0x56c>)
 8003c7a:	61fb      	str	r3, [r7, #28]
        break;
 8003c7c:	e00d      	b.n	8003c9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c7e:	f7fe fefb 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 8003c82:	61f8      	str	r0, [r7, #28]
        break;
 8003c84:	e009      	b.n	8003c9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c8a:	61fb      	str	r3, [r7, #28]
        break;
 8003c8c:	e005      	b.n	8003c9a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80fb 	beq.w	8003e98 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	4413      	add	r3, r2
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d305      	bcc.n	8003cbe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d903      	bls.n	8003cc6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cc4:	e0e8      	b.n	8003e98 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	461c      	mov	r4, r3
 8003ccc:	4615      	mov	r5, r2
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	022b      	lsls	r3, r5, #8
 8003cd8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cdc:	0222      	lsls	r2, r4, #8
 8003cde:	68f9      	ldr	r1, [r7, #12]
 8003ce0:	6849      	ldr	r1, [r1, #4]
 8003ce2:	0849      	lsrs	r1, r1, #1
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	4688      	mov	r8, r1
 8003ce8:	4681      	mov	r9, r0
 8003cea:	eb12 0a08 	adds.w	sl, r2, r8
 8003cee:	eb43 0b09 	adc.w	fp, r3, r9
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d00:	4650      	mov	r0, sl
 8003d02:	4659      	mov	r1, fp
 8003d04:	f7fc fa40 	bl	8000188 <__aeabi_uldivmod>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d16:	d308      	bcc.n	8003d2a <UART_SetConfig+0x3de>
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d1e:	d204      	bcs.n	8003d2a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	60da      	str	r2, [r3, #12]
 8003d28:	e0b6      	b.n	8003e98 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d30:	e0b2      	b.n	8003e98 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d3a:	d15e      	bne.n	8003dfa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d828      	bhi.n	8003d96 <UART_SetConfig+0x44a>
 8003d44:	a201      	add	r2, pc, #4	@ (adr r2, 8003d4c <UART_SetConfig+0x400>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d81 	.word	0x08003d81
 8003d58:	08003d97 	.word	0x08003d97
 8003d5c:	08003d87 	.word	0x08003d87
 8003d60:	08003d97 	.word	0x08003d97
 8003d64:	08003d97 	.word	0x08003d97
 8003d68:	08003d97 	.word	0x08003d97
 8003d6c:	08003d8f 	.word	0x08003d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d70:	f7fe ff1a 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8003d74:	61f8      	str	r0, [r7, #28]
        break;
 8003d76:	e014      	b.n	8003da2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d78:	f7fe ff2c 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 8003d7c:	61f8      	str	r0, [r7, #28]
        break;
 8003d7e:	e010      	b.n	8003da2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d80:	4b4d      	ldr	r3, [pc, #308]	@ (8003eb8 <UART_SetConfig+0x56c>)
 8003d82:	61fb      	str	r3, [r7, #28]
        break;
 8003d84:	e00d      	b.n	8003da2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d86:	f7fe fe77 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 8003d8a:	61f8      	str	r0, [r7, #28]
        break;
 8003d8c:	e009      	b.n	8003da2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d92:	61fb      	str	r3, [r7, #28]
        break;
 8003d94:	e005      	b.n	8003da2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003da0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d077      	beq.n	8003e98 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005a      	lsls	r2, r3, #1
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	441a      	add	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b0f      	cmp	r3, #15
 8003dc2:	d916      	bls.n	8003df2 <UART_SetConfig+0x4a6>
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dca:	d212      	bcs.n	8003df2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	f023 030f 	bic.w	r3, r3, #15
 8003dd4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	8afb      	ldrh	r3, [r7, #22]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	8afa      	ldrh	r2, [r7, #22]
 8003dee:	60da      	str	r2, [r3, #12]
 8003df0:	e052      	b.n	8003e98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003df8:	e04e      	b.n	8003e98 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dfa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d827      	bhi.n	8003e52 <UART_SetConfig+0x506>
 8003e02:	a201      	add	r2, pc, #4	@ (adr r2, 8003e08 <UART_SetConfig+0x4bc>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e2d 	.word	0x08003e2d
 8003e0c:	08003e35 	.word	0x08003e35
 8003e10:	08003e3d 	.word	0x08003e3d
 8003e14:	08003e53 	.word	0x08003e53
 8003e18:	08003e43 	.word	0x08003e43
 8003e1c:	08003e53 	.word	0x08003e53
 8003e20:	08003e53 	.word	0x08003e53
 8003e24:	08003e53 	.word	0x08003e53
 8003e28:	08003e4b 	.word	0x08003e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e2c:	f7fe febc 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8003e30:	61f8      	str	r0, [r7, #28]
        break;
 8003e32:	e014      	b.n	8003e5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e34:	f7fe fece 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 8003e38:	61f8      	str	r0, [r7, #28]
        break;
 8003e3a:	e010      	b.n	8003e5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb8 <UART_SetConfig+0x56c>)
 8003e3e:	61fb      	str	r3, [r7, #28]
        break;
 8003e40:	e00d      	b.n	8003e5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e42:	f7fe fe19 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 8003e46:	61f8      	str	r0, [r7, #28]
        break;
 8003e48:	e009      	b.n	8003e5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e4e:	61fb      	str	r3, [r7, #28]
        break;
 8003e50:	e005      	b.n	8003e5e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e5c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d019      	beq.n	8003e98 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	085a      	lsrs	r2, r3, #1
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	441a      	add	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	2b0f      	cmp	r3, #15
 8003e7c:	d909      	bls.n	8003e92 <UART_SetConfig+0x546>
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e84:	d205      	bcs.n	8003e92 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60da      	str	r2, [r3, #12]
 8003e90:	e002      	b.n	8003e98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ea4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3728      	adds	r7, #40	@ 0x28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40008000 	.word	0x40008000
 8003eb8:	00f42400 	.word	0x00f42400

08003ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01a      	beq.n	8003fd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fba:	d10a      	bne.n	8003fd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b098      	sub	sp, #96	@ 0x60
 8004004:	af02      	add	r7, sp, #8
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004010:	f7fd f864 	bl	80010dc <HAL_GetTick>
 8004014:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b08      	cmp	r3, #8
 8004022:	d12e      	bne.n	8004082 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004024:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800402c:	2200      	movs	r2, #0
 800402e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f88c 	bl	8004150 <UART_WaitOnFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d021      	beq.n	8004082 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800404c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004052:	653b      	str	r3, [r7, #80]	@ 0x50
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800405c:	647b      	str	r3, [r7, #68]	@ 0x44
 800405e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800406a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e6      	bne.n	800403e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e062      	b.n	8004148 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b04      	cmp	r3, #4
 800408e:	d149      	bne.n	8004124 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004090:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004098:	2200      	movs	r2, #0
 800409a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f856 	bl	8004150 <UART_WaitOnFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d03c      	beq.n	8004124 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	623b      	str	r3, [r7, #32]
   return(result);
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e6      	bne.n	80040aa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3308      	adds	r3, #8
 80040e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3308      	adds	r3, #8
 80040fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040fc:	61fa      	str	r2, [r7, #28]
 80040fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	69b9      	ldr	r1, [r7, #24]
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	617b      	str	r3, [r7, #20]
   return(result);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e011      	b.n	8004148 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3758      	adds	r7, #88	@ 0x58
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004160:	e04f      	b.n	8004202 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004168:	d04b      	beq.n	8004202 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416a:	f7fc ffb7 	bl	80010dc <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	429a      	cmp	r2, r3
 8004178:	d302      	bcc.n	8004180 <UART_WaitOnFlagUntilTimeout+0x30>
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e04e      	b.n	8004222 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d037      	beq.n	8004202 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b80      	cmp	r3, #128	@ 0x80
 8004196:	d034      	beq.n	8004202 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b40      	cmp	r3, #64	@ 0x40
 800419c:	d031      	beq.n	8004202 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d110      	bne.n	80041ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2208      	movs	r2, #8
 80041b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f838 	bl	800422a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2208      	movs	r2, #8
 80041be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e029      	b.n	8004222 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041dc:	d111      	bne.n	8004202 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f81e 	bl	800422a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e00f      	b.n	8004222 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4013      	ands	r3, r2
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	429a      	cmp	r2, r3
 8004210:	bf0c      	ite	eq
 8004212:	2301      	moveq	r3, #1
 8004214:	2300      	movne	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	79fb      	ldrb	r3, [r7, #7]
 800421c:	429a      	cmp	r2, r3
 800421e:	d0a0      	beq.n	8004162 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800422a:	b480      	push	{r7}
 800422c:	b095      	sub	sp, #84	@ 0x54
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004242:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004250:	643b      	str	r3, [r7, #64]	@ 0x40
 8004252:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004256:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800425e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e6      	bne.n	8004232 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3308      	adds	r3, #8
 800426a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	61fb      	str	r3, [r7, #28]
   return(result);
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f023 0301 	bic.w	r3, r3, #1
 800427a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3308      	adds	r3, #8
 8004282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004284:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004286:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800428a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e5      	bne.n	8004264 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800429c:	2b01      	cmp	r3, #1
 800429e:	d118      	bne.n	80042d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f023 0310 	bic.w	r3, r3, #16
 80042b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042be:	61bb      	str	r3, [r7, #24]
 80042c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6979      	ldr	r1, [r7, #20]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	613b      	str	r3, [r7, #16]
   return(result);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e6      	bne.n	80042a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042e6:	bf00      	nop
 80042e8:	3754      	adds	r7, #84	@ 0x54
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042f2:	b084      	sub	sp, #16
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	f107 001c 	add.w	r0, r7, #28
 8004300:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fa69 	bl	80047e8 <USB_CoreReset>
 8004316:	4603      	mov	r3, r0
 8004318:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800431a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004326:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	639a      	str	r2, [r3, #56]	@ 0x38
 800432e:	e005      	b.n	800433c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004334:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800433c:	7bfb      	ldrb	r3, [r7, #15]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004348:	b004      	add	sp, #16
 800434a:	4770      	bx	lr

0800434c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f023 0201 	bic.w	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d115      	bne.n	80043bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800439c:	200a      	movs	r0, #10
 800439e:	f7fc fea9 	bl	80010f4 <HAL_Delay>
      ms += 10U;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	330a      	adds	r3, #10
 80043a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fa0f 	bl	80047cc <USB_GetMode>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d01e      	beq.n	80043f2 <USB_SetCurrentMode+0x84>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80043b8:	d9f0      	bls.n	800439c <USB_SetCurrentMode+0x2e>
 80043ba:	e01a      	b.n	80043f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d115      	bne.n	80043ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043ce:	200a      	movs	r0, #10
 80043d0:	f7fc fe90 	bl	80010f4 <HAL_Delay>
      ms += 10U;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	330a      	adds	r3, #10
 80043d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f9f6 	bl	80047cc <USB_GetMode>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <USB_SetCurrentMode+0x84>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80043ea:	d9f0      	bls.n	80043ce <USB_SetCurrentMode+0x60>
 80043ec:	e001      	b.n	80043f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e005      	b.n	80043fe <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2bc8      	cmp	r3, #200	@ 0xc8
 80043f6:	d101      	bne.n	80043fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004408:	b084      	sub	sp, #16
 800440a:	b580      	push	{r7, lr}
 800440c:	b086      	sub	sp, #24
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004422:	2300      	movs	r3, #0
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	e009      	b.n	800443c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	3340      	adds	r3, #64	@ 0x40
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	2200      	movs	r2, #0
 8004434:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	3301      	adds	r3, #1
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b0e      	cmp	r3, #14
 8004440:	d9f2      	bls.n	8004428 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004442:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004446:	2b00      	cmp	r3, #0
 8004448:	d11c      	bne.n	8004484 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004458:	f043 0302 	orr.w	r3, r3, #2
 800445c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004462:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e005      	b.n	8004490 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004488:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004496:	461a      	mov	r2, r3
 8004498:	2300      	movs	r3, #0
 800449a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800449c:	2103      	movs	r1, #3
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f95a 	bl	8004758 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044a4:	2110      	movs	r1, #16
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f8f6 	bl	8004698 <USB_FlushTxFifo>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f920 	bl	80046fc <USB_FlushRxFifo>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044cc:	461a      	mov	r2, r3
 80044ce:	2300      	movs	r3, #0
 80044d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d8:	461a      	mov	r2, r3
 80044da:	2300      	movs	r3, #0
 80044dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044e4:	461a      	mov	r2, r3
 80044e6:	2300      	movs	r3, #0
 80044e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044ea:	2300      	movs	r3, #0
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	e043      	b.n	8004578 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004502:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004506:	d118      	bne.n	800453a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10a      	bne.n	8004524 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800451a:	461a      	mov	r2, r3
 800451c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e013      	b.n	800454c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004530:	461a      	mov	r2, r3
 8004532:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	e008      	b.n	800454c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004546:	461a      	mov	r2, r3
 8004548:	2300      	movs	r3, #0
 800454a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004558:	461a      	mov	r2, r3
 800455a:	2300      	movs	r3, #0
 800455c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800456a:	461a      	mov	r2, r3
 800456c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004570:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	3301      	adds	r3, #1
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800457c:	461a      	mov	r2, r3
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4293      	cmp	r3, r2
 8004582:	d3b5      	bcc.n	80044f0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	e043      	b.n	8004612 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800459c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045a0:	d118      	bne.n	80045d4 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b4:	461a      	mov	r2, r3
 80045b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	e013      	b.n	80045e6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ca:	461a      	mov	r2, r3
 80045cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e008      	b.n	80045e6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e0:	461a      	mov	r2, r3
 80045e2:	2300      	movs	r3, #0
 80045e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f2:	461a      	mov	r2, r3
 80045f4:	2300      	movs	r3, #0
 80045f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004604:	461a      	mov	r2, r3
 8004606:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800460a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	3301      	adds	r3, #1
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004616:	461a      	mov	r2, r3
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4293      	cmp	r3, r2
 800461c:	d3b5      	bcc.n	800458a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800462c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004630:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800463e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	f043 0210 	orr.w	r2, r3, #16
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699a      	ldr	r2, [r3, #24]
 8004650:	4b10      	ldr	r3, [pc, #64]	@ (8004694 <USB_DevInit+0x28c>)
 8004652:	4313      	orrs	r3, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004658:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f043 0208 	orr.w	r2, r3, #8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800466c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004670:	2b01      	cmp	r3, #1
 8004672:	d107      	bne.n	8004684 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800467c:	f043 0304 	orr.w	r3, r3, #4
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004684:	7dfb      	ldrb	r3, [r7, #23]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004690:	b004      	add	sp, #16
 8004692:	4770      	bx	lr
 8004694:	803c3800 	.word	0x803c3800

08004698 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3301      	adds	r3, #1
 80046aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046b2:	d901      	bls.n	80046b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e01b      	b.n	80046f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	daf2      	bge.n	80046a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	019b      	lsls	r3, r3, #6
 80046c8:	f043 0220 	orr.w	r2, r3, #32
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3301      	adds	r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046dc:	d901      	bls.n	80046e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e006      	b.n	80046f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d0f0      	beq.n	80046d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3301      	adds	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004714:	d901      	bls.n	800471a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e018      	b.n	800474c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	daf2      	bge.n	8004708 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2210      	movs	r2, #16
 800472a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3301      	adds	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004738:	d901      	bls.n	800473e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e006      	b.n	800474c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	2b10      	cmp	r3, #16
 8004748:	d0f0      	beq.n	800472c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	68f9      	ldr	r1, [r7, #12]
 8004774:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004778:	4313      	orrs	r3, r2
 800477a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800478a:	b480      	push	{r7}
 800478c:	b085      	sub	sp, #20
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80047a4:	f023 0303 	bic.w	r3, r3, #3
 80047a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047b8:	f043 0302 	orr.w	r3, r3, #2
 80047bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f003 0301 	and.w	r3, r3, #1
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3301      	adds	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004800:	d901      	bls.n	8004806 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e01b      	b.n	800483e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	daf2      	bge.n	80047f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f043 0201 	orr.w	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3301      	adds	r3, #1
 8004822:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800482a:	d901      	bls.n	8004830 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e006      	b.n	800483e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b01      	cmp	r3, #1
 800483a:	d0f0      	beq.n	800481e <USB_CoreReset+0x36>

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <memset>:
 800484a:	4402      	add	r2, r0
 800484c:	4603      	mov	r3, r0
 800484e:	4293      	cmp	r3, r2
 8004850:	d100      	bne.n	8004854 <memset+0xa>
 8004852:	4770      	bx	lr
 8004854:	f803 1b01 	strb.w	r1, [r3], #1
 8004858:	e7f9      	b.n	800484e <memset+0x4>
	...

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <__libc_init_array+0x38>)
 8004860:	4d0d      	ldr	r5, [pc, #52]	@ (8004898 <__libc_init_array+0x3c>)
 8004862:	1b5b      	subs	r3, r3, r5
 8004864:	109c      	asrs	r4, r3, #2
 8004866:	2600      	movs	r6, #0
 8004868:	42a6      	cmp	r6, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	f000 f978 	bl	8004b60 <_init>
 8004870:	4d0a      	ldr	r5, [pc, #40]	@ (800489c <__libc_init_array+0x40>)
 8004872:	4b0b      	ldr	r3, [pc, #44]	@ (80048a0 <__libc_init_array+0x44>)
 8004874:	1b5b      	subs	r3, r3, r5
 8004876:	109c      	asrs	r4, r3, #2
 8004878:	2600      	movs	r6, #0
 800487a:	42a6      	cmp	r6, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f855 3b04 	ldr.w	r3, [r5], #4
 8004884:	4798      	blx	r3
 8004886:	3601      	adds	r6, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f855 3b04 	ldr.w	r3, [r5], #4
 800488e:	4798      	blx	r3
 8004890:	3601      	adds	r6, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	08004bd0 	.word	0x08004bd0
 8004898:	08004bd0 	.word	0x08004bd0
 800489c:	08004bd0 	.word	0x08004bd0
 80048a0:	08004bd4 	.word	0x08004bd4

080048a4 <__udivmoddi4>:
 80048a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a8:	468c      	mov	ip, r1
 80048aa:	468e      	mov	lr, r1
 80048ac:	9e08      	ldr	r6, [sp, #32]
 80048ae:	4615      	mov	r5, r2
 80048b0:	4604      	mov	r4, r0
 80048b2:	4619      	mov	r1, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f040 80d0 	bne.w	8004a5a <__udivmoddi4+0x1b6>
 80048ba:	4572      	cmp	r2, lr
 80048bc:	d947      	bls.n	800494e <__udivmoddi4+0xaa>
 80048be:	fab2 f782 	clz	r7, r2
 80048c2:	b14f      	cbz	r7, 80048d8 <__udivmoddi4+0x34>
 80048c4:	f1c7 0320 	rsb	r3, r7, #32
 80048c8:	fa0e fc07 	lsl.w	ip, lr, r7
 80048cc:	fa20 f303 	lsr.w	r3, r0, r3
 80048d0:	40bd      	lsls	r5, r7
 80048d2:	ea43 0c0c 	orr.w	ip, r3, ip
 80048d6:	40bc      	lsls	r4, r7
 80048d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80048dc:	b2a8      	uxth	r0, r5
 80048de:	fbbc f8fe 	udiv	r8, ip, lr
 80048e2:	0c23      	lsrs	r3, r4, #16
 80048e4:	fb0e cc18 	mls	ip, lr, r8, ip
 80048e8:	fb08 f900 	mul.w	r9, r8, r0
 80048ec:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80048f0:	4599      	cmp	r9, r3
 80048f2:	d928      	bls.n	8004946 <__udivmoddi4+0xa2>
 80048f4:	18eb      	adds	r3, r5, r3
 80048f6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80048fa:	d204      	bcs.n	8004906 <__udivmoddi4+0x62>
 80048fc:	4599      	cmp	r9, r3
 80048fe:	d902      	bls.n	8004906 <__udivmoddi4+0x62>
 8004900:	f1a8 0202 	sub.w	r2, r8, #2
 8004904:	442b      	add	r3, r5
 8004906:	eba3 0309 	sub.w	r3, r3, r9
 800490a:	b2a4      	uxth	r4, r4
 800490c:	fbb3 fcfe 	udiv	ip, r3, lr
 8004910:	fb0e 331c 	mls	r3, lr, ip, r3
 8004914:	fb0c f000 	mul.w	r0, ip, r0
 8004918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800491c:	42a0      	cmp	r0, r4
 800491e:	d914      	bls.n	800494a <__udivmoddi4+0xa6>
 8004920:	192c      	adds	r4, r5, r4
 8004922:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8004926:	d204      	bcs.n	8004932 <__udivmoddi4+0x8e>
 8004928:	42a0      	cmp	r0, r4
 800492a:	d902      	bls.n	8004932 <__udivmoddi4+0x8e>
 800492c:	f1ac 0302 	sub.w	r3, ip, #2
 8004930:	442c      	add	r4, r5
 8004932:	1a24      	subs	r4, r4, r0
 8004934:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8004938:	b11e      	cbz	r6, 8004942 <__udivmoddi4+0x9e>
 800493a:	40fc      	lsrs	r4, r7
 800493c:	2300      	movs	r3, #0
 800493e:	6034      	str	r4, [r6, #0]
 8004940:	6073      	str	r3, [r6, #4]
 8004942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004946:	4642      	mov	r2, r8
 8004948:	e7dd      	b.n	8004906 <__udivmoddi4+0x62>
 800494a:	4663      	mov	r3, ip
 800494c:	e7f1      	b.n	8004932 <__udivmoddi4+0x8e>
 800494e:	2a00      	cmp	r2, #0
 8004950:	d079      	beq.n	8004a46 <__udivmoddi4+0x1a2>
 8004952:	fab2 f382 	clz	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d03f      	beq.n	80049da <__udivmoddi4+0x136>
 800495a:	4619      	mov	r1, r3
 800495c:	f1c1 0320 	rsb	r3, r1, #32
 8004960:	fa02 f501 	lsl.w	r5, r2, r1
 8004964:	fa2e f203 	lsr.w	r2, lr, r3
 8004968:	fa0e fe01 	lsl.w	lr, lr, r1
 800496c:	fa20 f303 	lsr.w	r3, r0, r3
 8004970:	ea43 030e 	orr.w	r3, r3, lr
 8004974:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004978:	fa00 f401 	lsl.w	r4, r0, r1
 800497c:	fbb2 fcfe 	udiv	ip, r2, lr
 8004980:	b2af      	uxth	r7, r5
 8004982:	fb0e 201c 	mls	r0, lr, ip, r2
 8004986:	0c1a      	lsrs	r2, r3, #16
 8004988:	fb0c f807 	mul.w	r8, ip, r7
 800498c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004990:	4590      	cmp	r8, r2
 8004992:	d95a      	bls.n	8004a4a <__udivmoddi4+0x1a6>
 8004994:	18aa      	adds	r2, r5, r2
 8004996:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 800499a:	d204      	bcs.n	80049a6 <__udivmoddi4+0x102>
 800499c:	4590      	cmp	r8, r2
 800499e:	d902      	bls.n	80049a6 <__udivmoddi4+0x102>
 80049a0:	f1ac 0002 	sub.w	r0, ip, #2
 80049a4:	442a      	add	r2, r5
 80049a6:	eba2 0208 	sub.w	r2, r2, r8
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	fbb2 fcfe 	udiv	ip, r2, lr
 80049b0:	fb0e 221c 	mls	r2, lr, ip, r2
 80049b4:	fb0c f707 	mul.w	r7, ip, r7
 80049b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049bc:	429f      	cmp	r7, r3
 80049be:	d946      	bls.n	8004a4e <__udivmoddi4+0x1aa>
 80049c0:	18eb      	adds	r3, r5, r3
 80049c2:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 80049c6:	d204      	bcs.n	80049d2 <__udivmoddi4+0x12e>
 80049c8:	429f      	cmp	r7, r3
 80049ca:	d902      	bls.n	80049d2 <__udivmoddi4+0x12e>
 80049cc:	f1ac 0202 	sub.w	r2, ip, #2
 80049d0:	442b      	add	r3, r5
 80049d2:	1bdb      	subs	r3, r3, r7
 80049d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80049d8:	e002      	b.n	80049e0 <__udivmoddi4+0x13c>
 80049da:	ebae 0302 	sub.w	r3, lr, r2
 80049de:	2201      	movs	r2, #1
 80049e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80049e4:	b2af      	uxth	r7, r5
 80049e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80049ea:	0c20      	lsrs	r0, r4, #16
 80049ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80049f0:	fb0c f807 	mul.w	r8, ip, r7
 80049f4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80049f8:	4598      	cmp	r8, r3
 80049fa:	d92a      	bls.n	8004a52 <__udivmoddi4+0x1ae>
 80049fc:	18eb      	adds	r3, r5, r3
 80049fe:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8004a02:	d204      	bcs.n	8004a0e <__udivmoddi4+0x16a>
 8004a04:	4598      	cmp	r8, r3
 8004a06:	d902      	bls.n	8004a0e <__udivmoddi4+0x16a>
 8004a08:	f1ac 0002 	sub.w	r0, ip, #2
 8004a0c:	442b      	add	r3, r5
 8004a0e:	eba3 0308 	sub.w	r3, r3, r8
 8004a12:	b2a4      	uxth	r4, r4
 8004a14:	fbb3 fcfe 	udiv	ip, r3, lr
 8004a18:	fb0e 331c 	mls	r3, lr, ip, r3
 8004a1c:	fb0c f707 	mul.w	r7, ip, r7
 8004a20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004a24:	42a7      	cmp	r7, r4
 8004a26:	d916      	bls.n	8004a56 <__udivmoddi4+0x1b2>
 8004a28:	192c      	adds	r4, r5, r4
 8004a2a:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8004a2e:	d204      	bcs.n	8004a3a <__udivmoddi4+0x196>
 8004a30:	42a7      	cmp	r7, r4
 8004a32:	d902      	bls.n	8004a3a <__udivmoddi4+0x196>
 8004a34:	f1ac 0302 	sub.w	r3, ip, #2
 8004a38:	442c      	add	r4, r5
 8004a3a:	1be4      	subs	r4, r4, r7
 8004a3c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004a40:	460f      	mov	r7, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	e778      	b.n	8004938 <__udivmoddi4+0x94>
 8004a46:	211f      	movs	r1, #31
 8004a48:	e788      	b.n	800495c <__udivmoddi4+0xb8>
 8004a4a:	4660      	mov	r0, ip
 8004a4c:	e7ab      	b.n	80049a6 <__udivmoddi4+0x102>
 8004a4e:	4662      	mov	r2, ip
 8004a50:	e7bf      	b.n	80049d2 <__udivmoddi4+0x12e>
 8004a52:	4660      	mov	r0, ip
 8004a54:	e7db      	b.n	8004a0e <__udivmoddi4+0x16a>
 8004a56:	4663      	mov	r3, ip
 8004a58:	e7ef      	b.n	8004a3a <__udivmoddi4+0x196>
 8004a5a:	4573      	cmp	r3, lr
 8004a5c:	d906      	bls.n	8004a6c <__udivmoddi4+0x1c8>
 8004a5e:	b916      	cbnz	r6, 8004a66 <__udivmoddi4+0x1c2>
 8004a60:	2100      	movs	r1, #0
 8004a62:	4608      	mov	r0, r1
 8004a64:	e76d      	b.n	8004942 <__udivmoddi4+0x9e>
 8004a66:	e9c6 0e00 	strd	r0, lr, [r6]
 8004a6a:	e7f9      	b.n	8004a60 <__udivmoddi4+0x1bc>
 8004a6c:	fab3 f783 	clz	r7, r3
 8004a70:	b987      	cbnz	r7, 8004a94 <__udivmoddi4+0x1f0>
 8004a72:	4573      	cmp	r3, lr
 8004a74:	d301      	bcc.n	8004a7a <__udivmoddi4+0x1d6>
 8004a76:	4282      	cmp	r2, r0
 8004a78:	d807      	bhi.n	8004a8a <__udivmoddi4+0x1e6>
 8004a7a:	1a84      	subs	r4, r0, r2
 8004a7c:	eb6e 0303 	sbc.w	r3, lr, r3
 8004a80:	2001      	movs	r0, #1
 8004a82:	469c      	mov	ip, r3
 8004a84:	b91e      	cbnz	r6, 8004a8e <__udivmoddi4+0x1ea>
 8004a86:	2100      	movs	r1, #0
 8004a88:	e75b      	b.n	8004942 <__udivmoddi4+0x9e>
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	e7fa      	b.n	8004a84 <__udivmoddi4+0x1e0>
 8004a8e:	e9c6 4c00 	strd	r4, ip, [r6]
 8004a92:	e7f8      	b.n	8004a86 <__udivmoddi4+0x1e2>
 8004a94:	f1c7 0c20 	rsb	ip, r7, #32
 8004a98:	40bb      	lsls	r3, r7
 8004a9a:	fa22 f50c 	lsr.w	r5, r2, ip
 8004a9e:	431d      	orrs	r5, r3
 8004aa0:	fa20 f10c 	lsr.w	r1, r0, ip
 8004aa4:	fa2e f30c 	lsr.w	r3, lr, ip
 8004aa8:	fa0e fe07 	lsl.w	lr, lr, r7
 8004aac:	ea41 010e 	orr.w	r1, r1, lr
 8004ab0:	ea4f 4915 	mov.w	r9, r5, lsr #16
 8004ab4:	fa00 f407 	lsl.w	r4, r0, r7
 8004ab8:	fbb3 f8f9 	udiv	r8, r3, r9
 8004abc:	fa1f fe85 	uxth.w	lr, r5
 8004ac0:	fb09 3018 	mls	r0, r9, r8, r3
 8004ac4:	0c0b      	lsrs	r3, r1, #16
 8004ac6:	fb08 fa0e 	mul.w	sl, r8, lr
 8004aca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004ace:	459a      	cmp	sl, r3
 8004ad0:	fa02 f207 	lsl.w	r2, r2, r7
 8004ad4:	d940      	bls.n	8004b58 <__udivmoddi4+0x2b4>
 8004ad6:	18eb      	adds	r3, r5, r3
 8004ad8:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8004adc:	d204      	bcs.n	8004ae8 <__udivmoddi4+0x244>
 8004ade:	459a      	cmp	sl, r3
 8004ae0:	d902      	bls.n	8004ae8 <__udivmoddi4+0x244>
 8004ae2:	f1a8 0002 	sub.w	r0, r8, #2
 8004ae6:	442b      	add	r3, r5
 8004ae8:	eba3 030a 	sub.w	r3, r3, sl
 8004aec:	b289      	uxth	r1, r1
 8004aee:	fbb3 f8f9 	udiv	r8, r3, r9
 8004af2:	fb09 3318 	mls	r3, r9, r8, r3
 8004af6:	fb08 fe0e 	mul.w	lr, r8, lr
 8004afa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004afe:	458e      	cmp	lr, r1
 8004b00:	d92c      	bls.n	8004b5c <__udivmoddi4+0x2b8>
 8004b02:	1869      	adds	r1, r5, r1
 8004b04:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004b08:	d204      	bcs.n	8004b14 <__udivmoddi4+0x270>
 8004b0a:	458e      	cmp	lr, r1
 8004b0c:	d902      	bls.n	8004b14 <__udivmoddi4+0x270>
 8004b0e:	f1a8 0302 	sub.w	r3, r8, #2
 8004b12:	4429      	add	r1, r5
 8004b14:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004b18:	fba0 9802 	umull	r9, r8, r0, r2
 8004b1c:	eba1 010e 	sub.w	r1, r1, lr
 8004b20:	4541      	cmp	r1, r8
 8004b22:	46ce      	mov	lr, r9
 8004b24:	4643      	mov	r3, r8
 8004b26:	d302      	bcc.n	8004b2e <__udivmoddi4+0x28a>
 8004b28:	d106      	bne.n	8004b38 <__udivmoddi4+0x294>
 8004b2a:	454c      	cmp	r4, r9
 8004b2c:	d204      	bcs.n	8004b38 <__udivmoddi4+0x294>
 8004b2e:	ebb9 0e02 	subs.w	lr, r9, r2
 8004b32:	eb68 0305 	sbc.w	r3, r8, r5
 8004b36:	3801      	subs	r0, #1
 8004b38:	2e00      	cmp	r6, #0
 8004b3a:	d0a4      	beq.n	8004a86 <__udivmoddi4+0x1e2>
 8004b3c:	ebb4 020e 	subs.w	r2, r4, lr
 8004b40:	eb61 0103 	sbc.w	r1, r1, r3
 8004b44:	fa01 fc0c 	lsl.w	ip, r1, ip
 8004b48:	fa22 f307 	lsr.w	r3, r2, r7
 8004b4c:	ea4c 0303 	orr.w	r3, ip, r3
 8004b50:	40f9      	lsrs	r1, r7
 8004b52:	e9c6 3100 	strd	r3, r1, [r6]
 8004b56:	e796      	b.n	8004a86 <__udivmoddi4+0x1e2>
 8004b58:	4640      	mov	r0, r8
 8004b5a:	e7c5      	b.n	8004ae8 <__udivmoddi4+0x244>
 8004b5c:	4643      	mov	r3, r8
 8004b5e:	e7d9      	b.n	8004b14 <__udivmoddi4+0x270>

08004b60 <_init>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr

08004b6c <_fini>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr
