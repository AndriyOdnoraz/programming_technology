
stm32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b98  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004d20  08004d20  00005d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d84  08004d84  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004d84  08004d84  00005d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d8c  08004d8c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d8c  08004d8c  00005d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d90  08004d90  00005d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004d94  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  2000000c  08004da0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  08004da0  00006788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017eb4  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003300  00000000  00000000  0001def0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  000211f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117f  00000000  00000000  00022850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027575  00000000  00000000  000239cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016150  00000000  00000000  0004af44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f04fd  00000000  00000000  00061094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000001e  00000000  00000000  00151591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cb0  00000000  00000000  001515b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000115  00000000  00000000  00157260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000a25  00000000  00000000  00157375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800019c:	f000 b80c 	b.w	80001b8 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f004 fc50 	bl	8004a4c <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__aeabi_idiv0>:
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004d08 	.word	0x08004d08

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004d08 	.word	0x08004d08

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 ffd7 	bl	80011b2 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f82e 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f9f6 	bl	80005f8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800020c:	f000 f88c 	bl	8000328 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000210:	f000 f8c2 	bl	8000398 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000214:	f000 f8fe 	bl	8000414 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000218:	f000 f922 	bl	8000460 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800021c:	f000 f95e 	bl	80004dc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000220:	f000 f98c 	bl	800053c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000224:	f000 f9ba 	bl	800059c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_Init();
 8000228:	f000 ffc3 	bl	80011b2 <HAL_Init>
  SystemClock_Config();
 800022c:	f000 f81a 	bl	8000264 <SystemClock_Config>
  MX_GPIO_Init();
 8000230:	f000 f9e2 	bl	80005f8 <MX_GPIO_Init>
  LED_Init();
 8000234:	f000 fba4 	bl	8000980 <LED_Init>
  LED_SetMode(LED_BLINK_SLOW);
 8000238:	2002      	movs	r0, #2
 800023a:	f000 fba7 	bl	800098c <LED_SetMode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_UART_Transmit(&huart1, (uint8_t *)"Ping\r\n", 6, HAL_MAX_DELAY);
 800023e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000242:	2206      	movs	r2, #6
 8000244:	4905      	ldr	r1, [pc, #20]	@ (800025c <main+0x60>)
 8000246:	4806      	ldr	r0, [pc, #24]	@ (8000260 <main+0x64>)
 8000248:	f003 fbcb 	bl	80039e2 <HAL_UART_Transmit>
    HAL_Delay(1000u);
 800024c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000250:	f001 f824 	bl	800129c <HAL_Delay>
    LED_Update();
 8000254:	f000 fbb4 	bl	80009c0 <LED_Update>
    HAL_UART_Transmit(&huart1, (uint8_t *)"Ping\r\n", 6, HAL_MAX_DELAY);
 8000258:	bf00      	nop
 800025a:	e7f0      	b.n	800023e <main+0x42>
 800025c:	08004d20 	.word	0x08004d20
 8000260:	2000015c 	.word	0x2000015c

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b096      	sub	sp, #88	@ 0x58
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2244      	movs	r2, #68	@ 0x44
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f004 fbbd 	bl	80049f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	463b      	mov	r3, r7
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000286:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800028a:	f001 fecb 	bl	8002024 <HAL_PWREx_ControlVoltageScaling>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000294:	f000 fb62 	bl	800095c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000298:	f001 fea6 	bl	8001fe8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800029c:	4b21      	ldr	r3, [pc, #132]	@ (8000324 <SystemClock_Config+0xc0>)
 800029e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80002a2:	4a20      	ldr	r2, [pc, #128]	@ (8000324 <SystemClock_Config+0xc0>)
 80002a4:	f023 0318 	bic.w	r3, r3, #24
 80002a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80002ac:	2314      	movs	r3, #20
 80002ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002bc:	2360      	movs	r3, #96	@ 0x60
 80002be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	2302      	movs	r3, #2
 80002c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002c4:	2301      	movs	r3, #1
 80002c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002c8:	2301      	movs	r3, #1
 80002ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002cc:	2328      	movs	r3, #40	@ 0x28
 80002ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002d0:	2307      	movs	r3, #7
 80002d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002d4:	2302      	movs	r3, #2
 80002d6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d8:	2302      	movs	r3, #2
 80002da:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 ffc1 	bl	8002268 <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002ec:	f000 fb36 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f4:	2303      	movs	r3, #3
 80002f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000304:	463b      	mov	r3, r7
 8000306:	2104      	movs	r1, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f002 fb89 	bl	8002a20 <HAL_RCC_ClockConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000314:	f000 fb22 	bl	800095c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000318:	f003 f890 	bl	800343c <HAL_RCCEx_EnableMSIPLLMode>
}
 800031c:	bf00      	nop
 800031e:	3758      	adds	r7, #88	@ 0x58
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40021000 	.word	0x40021000

08000328 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800032c:	4b18      	ldr	r3, [pc, #96]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 800032e:	4a19      	ldr	r2, [pc, #100]	@ (8000394 <MX_DFSDM1_Init+0x6c>)
 8000330:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000332:	4b17      	ldr	r3, [pc, #92]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 8000334:	2201      	movs	r2, #1
 8000336:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000338:	4b15      	ldr	r3, [pc, #84]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800033e:	4b14      	ldr	r3, [pc, #80]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 8000340:	2202      	movs	r2, #2
 8000342:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000344:	4b12      	ldr	r3, [pc, #72]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800034a:	4b11      	ldr	r3, [pc, #68]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000350:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 8000352:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000356:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000358:	4b0d      	ldr	r3, [pc, #52]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800035e:	4b0c      	ldr	r3, [pc, #48]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 8000360:	2204      	movs	r2, #4
 8000362:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000364:	4b0a      	ldr	r3, [pc, #40]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 8000366:	2200      	movs	r2, #0
 8000368:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800036a:	4b09      	ldr	r3, [pc, #36]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 800036c:	2201      	movs	r2, #1
 800036e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000370:	4b07      	ldr	r3, [pc, #28]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 8000372:	2200      	movs	r2, #0
 8000374:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000376:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 8000378:	2200      	movs	r2, #0
 800037a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800037c:	4804      	ldr	r0, [pc, #16]	@ (8000390 <MX_DFSDM1_Init+0x68>)
 800037e:	f001 f8c3 	bl	8001508 <HAL_DFSDM_ChannelInit>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000388:	f000 fae8 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000028 	.word	0x20000028
 8000394:	40016020 	.word	0x40016020

08000398 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <MX_I2C2_Init+0x74>)
 800039e:	4a1c      	ldr	r2, [pc, #112]	@ (8000410 <MX_I2C2_Init+0x78>)
 80003a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80003a2:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <MX_I2C2_Init+0x74>)
 80003a4:	f640 6214 	movw	r2, #3604	@ 0xe14
 80003a8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003aa:	4b18      	ldr	r3, [pc, #96]	@ (800040c <MX_I2C2_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b0:	4b16      	ldr	r3, [pc, #88]	@ (800040c <MX_I2C2_Init+0x74>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b6:	4b15      	ldr	r3, [pc, #84]	@ (800040c <MX_I2C2_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003bc:	4b13      	ldr	r3, [pc, #76]	@ (800040c <MX_I2C2_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <MX_I2C2_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c8:	4b10      	ldr	r3, [pc, #64]	@ (800040c <MX_I2C2_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ce:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <MX_I2C2_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003d4:	480d      	ldr	r0, [pc, #52]	@ (800040c <MX_I2C2_Init+0x74>)
 80003d6:	f001 fba2 	bl	8001b1e <HAL_I2C_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80003e0:	f000 fabc 	bl	800095c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003e4:	2100      	movs	r1, #0
 80003e6:	4809      	ldr	r0, [pc, #36]	@ (800040c <MX_I2C2_Init+0x74>)
 80003e8:	f001 fc34 	bl	8001c54 <HAL_I2CEx_ConfigAnalogFilter>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80003f2:	f000 fab3 	bl	800095c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003f6:	2100      	movs	r1, #0
 80003f8:	4804      	ldr	r0, [pc, #16]	@ (800040c <MX_I2C2_Init+0x74>)
 80003fa:	f001 fc76 	bl	8001cea <HAL_I2CEx_ConfigDigitalFilter>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000404:	f000 faaa 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000060 	.word	0x20000060
 8000410:	40005800 	.word	0x40005800

08000414 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000418:	4b0f      	ldr	r3, [pc, #60]	@ (8000458 <MX_QUADSPI_Init+0x44>)
 800041a:	4a10      	ldr	r2, [pc, #64]	@ (800045c <MX_QUADSPI_Init+0x48>)
 800041c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <MX_QUADSPI_Init+0x44>)
 8000420:	2202      	movs	r2, #2
 8000422:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000424:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <MX_QUADSPI_Init+0x44>)
 8000426:	2204      	movs	r2, #4
 8000428:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	@ (8000458 <MX_QUADSPI_Init+0x44>)
 800042c:	2210      	movs	r2, #16
 800042e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000430:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <MX_QUADSPI_Init+0x44>)
 8000432:	2217      	movs	r2, #23
 8000434:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000436:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <MX_QUADSPI_Init+0x44>)
 8000438:	2200      	movs	r2, #0
 800043a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <MX_QUADSPI_Init+0x44>)
 800043e:	2200      	movs	r2, #0
 8000440:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000442:	4805      	ldr	r0, [pc, #20]	@ (8000458 <MX_QUADSPI_Init+0x44>)
 8000444:	f001 fe54 	bl	80020f0 <HAL_QSPI_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800044e:	f000 fa85 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200000b4 	.word	0x200000b4
 800045c:	a0001000 	.word	0xa0001000

08000460 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000464:	4b1b      	ldr	r3, [pc, #108]	@ (80004d4 <MX_SPI3_Init+0x74>)
 8000466:	4a1c      	ldr	r2, [pc, #112]	@ (80004d8 <MX_SPI3_Init+0x78>)
 8000468:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800046a:	4b1a      	ldr	r3, [pc, #104]	@ (80004d4 <MX_SPI3_Init+0x74>)
 800046c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000470:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000472:	4b18      	ldr	r3, [pc, #96]	@ (80004d4 <MX_SPI3_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000478:	4b16      	ldr	r3, [pc, #88]	@ (80004d4 <MX_SPI3_Init+0x74>)
 800047a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800047e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000480:	4b14      	ldr	r3, [pc, #80]	@ (80004d4 <MX_SPI3_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000486:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <MX_SPI3_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800048c:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <MX_SPI3_Init+0x74>)
 800048e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000492:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000494:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <MX_SPI3_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800049a:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <MX_SPI3_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <MX_SPI3_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004a6:	4b0b      	ldr	r3, [pc, #44]	@ (80004d4 <MX_SPI3_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80004ac:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <MX_SPI3_Init+0x74>)
 80004ae:	2207      	movs	r2, #7
 80004b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004b2:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <MX_SPI3_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004b8:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <MX_SPI3_Init+0x74>)
 80004ba:	2208      	movs	r2, #8
 80004bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80004be:	4805      	ldr	r0, [pc, #20]	@ (80004d4 <MX_SPI3_Init+0x74>)
 80004c0:	f003 f99e 	bl	8003800 <HAL_SPI_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80004ca:	f000 fa47 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	200000f8 	.word	0x200000f8
 80004d8:	40003c00 	.word	0x40003c00

080004dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004e0:	4b14      	ldr	r3, [pc, #80]	@ (8000534 <MX_USART1_UART_Init+0x58>)
 80004e2:	4a15      	ldr	r2, [pc, #84]	@ (8000538 <MX_USART1_UART_Init+0x5c>)
 80004e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004e6:	4b13      	ldr	r3, [pc, #76]	@ (8000534 <MX_USART1_UART_Init+0x58>)
 80004e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ee:	4b11      	ldr	r3, [pc, #68]	@ (8000534 <MX_USART1_UART_Init+0x58>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <MX_USART1_UART_Init+0x58>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <MX_USART1_UART_Init+0x58>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <MX_USART1_UART_Init+0x58>)
 8000502:	220c      	movs	r2, #12
 8000504:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000506:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <MX_USART1_UART_Init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800050c:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <MX_USART1_UART_Init+0x58>)
 800050e:	2200      	movs	r2, #0
 8000510:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000512:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <MX_USART1_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <MX_USART1_UART_Init+0x58>)
 800051a:	2200      	movs	r2, #0
 800051c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800051e:	4805      	ldr	r0, [pc, #20]	@ (8000534 <MX_USART1_UART_Init+0x58>)
 8000520:	f003 fa11 	bl	8003946 <HAL_UART_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800052a:	f000 fa17 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000015c 	.word	0x2000015c
 8000538:	40013800 	.word	0x40013800

0800053c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000540:	4b14      	ldr	r3, [pc, #80]	@ (8000594 <MX_USART3_UART_Init+0x58>)
 8000542:	4a15      	ldr	r2, [pc, #84]	@ (8000598 <MX_USART3_UART_Init+0x5c>)
 8000544:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000546:	4b13      	ldr	r3, [pc, #76]	@ (8000594 <MX_USART3_UART_Init+0x58>)
 8000548:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800054c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <MX_USART3_UART_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000554:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <MX_USART3_UART_Init+0x58>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800055a:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <MX_USART3_UART_Init+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000560:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <MX_USART3_UART_Init+0x58>)
 8000562:	220c      	movs	r2, #12
 8000564:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <MX_USART3_UART_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <MX_USART3_UART_Init+0x58>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000572:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <MX_USART3_UART_Init+0x58>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <MX_USART3_UART_Init+0x58>)
 800057a:	2200      	movs	r2, #0
 800057c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800057e:	4805      	ldr	r0, [pc, #20]	@ (8000594 <MX_USART3_UART_Init+0x58>)
 8000580:	f003 f9e1 	bl	8003946 <HAL_UART_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800058a:	f000 f9e7 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200001e4 	.word	0x200001e4
 8000598:	40004800 	.word	0x40004800

0800059c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80005a0:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80005a8:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005aa:	2206      	movs	r2, #6
 80005ac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80005ae:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005b0:	2202      	movs	r2, #2
 80005b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80005cc:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80005d8:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005e0:	f001 fbcf 	bl	8001d82 <HAL_PCD_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80005ea:	f000 f9b7 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000026c 	.word	0x2000026c

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	@ 0x28
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800060e:	4bbd      	ldr	r3, [pc, #756]	@ (8000904 <MX_GPIO_Init+0x30c>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	4abc      	ldr	r2, [pc, #752]	@ (8000904 <MX_GPIO_Init+0x30c>)
 8000614:	f043 0310 	orr.w	r3, r3, #16
 8000618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061a:	4bba      	ldr	r3, [pc, #744]	@ (8000904 <MX_GPIO_Init+0x30c>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	f003 0310 	and.w	r3, r3, #16
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4bb7      	ldr	r3, [pc, #732]	@ (8000904 <MX_GPIO_Init+0x30c>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	4ab6      	ldr	r2, [pc, #728]	@ (8000904 <MX_GPIO_Init+0x30c>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000632:	4bb4      	ldr	r3, [pc, #720]	@ (8000904 <MX_GPIO_Init+0x30c>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4bb1      	ldr	r3, [pc, #708]	@ (8000904 <MX_GPIO_Init+0x30c>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4ab0      	ldr	r2, [pc, #704]	@ (8000904 <MX_GPIO_Init+0x30c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4bae      	ldr	r3, [pc, #696]	@ (8000904 <MX_GPIO_Init+0x30c>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4bab      	ldr	r3, [pc, #684]	@ (8000904 <MX_GPIO_Init+0x30c>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4aaa      	ldr	r2, [pc, #680]	@ (8000904 <MX_GPIO_Init+0x30c>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4ba8      	ldr	r3, [pc, #672]	@ (8000904 <MX_GPIO_Init+0x30c>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	4ba5      	ldr	r3, [pc, #660]	@ (8000904 <MX_GPIO_Init+0x30c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4aa4      	ldr	r2, [pc, #656]	@ (8000904 <MX_GPIO_Init+0x30c>)
 8000674:	f043 0308 	orr.w	r3, r3, #8
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4ba2      	ldr	r3, [pc, #648]	@ (8000904 <MX_GPIO_Init+0x30c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0308 	and.w	r3, r3, #8
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800068c:	489e      	ldr	r0, [pc, #632]	@ (8000908 <MX_GPIO_Init+0x310>)
 800068e:	f001 f9f1 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069c:	f001 f9ea 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80006a0:	2200      	movs	r2, #0
 80006a2:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80006a6:	4899      	ldr	r0, [pc, #612]	@ (800090c <MX_GPIO_Init+0x314>)
 80006a8:	f001 f9e4 	bl	8001a74 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f241 0181 	movw	r1, #4225	@ 0x1081
 80006b2:	4897      	ldr	r0, [pc, #604]	@ (8000910 <MX_GPIO_Init+0x318>)
 80006b4:	f001 f9de 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006be:	4894      	ldr	r0, [pc, #592]	@ (8000910 <MX_GPIO_Init+0x318>)
 80006c0:	f001 f9d8 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80006ca:	4892      	ldr	r0, [pc, #584]	@ (8000914 <MX_GPIO_Init+0x31c>)
 80006cc:	f001 f9d2 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2120      	movs	r1, #32
 80006d4:	488d      	ldr	r0, [pc, #564]	@ (800090c <MX_GPIO_Init+0x314>)
 80006d6:	f001 f9cd 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2101      	movs	r1, #1
 80006de:	488a      	ldr	r0, [pc, #552]	@ (8000908 <MX_GPIO_Init+0x310>)
 80006e0:	f001 f9c8 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80006e4:	f240 1315 	movw	r3, #277	@ 0x115
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4882      	ldr	r0, [pc, #520]	@ (8000908 <MX_GPIO_Init+0x310>)
 80006fe:	f001 f80f 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000702:	236a      	movs	r3, #106	@ 0x6a
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000706:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	487c      	ldr	r0, [pc, #496]	@ (8000908 <MX_GPIO_Init+0x310>)
 8000718:	f001 f802 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800071c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000722:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4878      	ldr	r0, [pc, #480]	@ (8000914 <MX_GPIO_Init+0x31c>)
 8000734:	f000 fff4 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000738:	233f      	movs	r3, #63	@ 0x3f
 800073a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800073c:	230b      	movs	r3, #11
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4872      	ldr	r0, [pc, #456]	@ (8000914 <MX_GPIO_Init+0x31c>)
 800074c:	f000 ffe8 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000750:	2303      	movs	r3, #3
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000760:	2308      	movs	r3, #8
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076e:	f000 ffd7 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000772:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078e:	f000 ffc7 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000792:	2308      	movs	r3, #8
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007a2:	2301      	movs	r3, #1
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b0:	f000 ffb6 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80007b4:	2310      	movs	r3, #16
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007b8:	230b      	movs	r3, #11
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ca:	f000 ffa9 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80007ce:	23e0      	movs	r3, #224	@ 0xe0
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007de:	2305      	movs	r3, #5
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ec:	f000 ff98 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80007f0:	2301      	movs	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	4841      	ldr	r0, [pc, #260]	@ (800090c <MX_GPIO_Init+0x314>)
 8000806:	f000 ff8b 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800080a:	2302      	movs	r3, #2
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800080e:	230b      	movs	r3, #11
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	483b      	ldr	r0, [pc, #236]	@ (800090c <MX_GPIO_Init+0x314>)
 800081e:	f000 ff7f 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000822:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000826:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4834      	ldr	r0, [pc, #208]	@ (800090c <MX_GPIO_Init+0x314>)
 800083c:	f000 ff70 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000840:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000844:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000846:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	482e      	ldr	r0, [pc, #184]	@ (8000910 <MX_GPIO_Init+0x318>)
 8000858:	f000 ff62 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800085c:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	4826      	ldr	r0, [pc, #152]	@ (8000910 <MX_GPIO_Init+0x318>)
 8000876:	f000 ff53 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800087a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4820      	ldr	r0, [pc, #128]	@ (8000914 <MX_GPIO_Init+0x31c>)
 8000894:	f000 ff44 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000898:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4819      	ldr	r0, [pc, #100]	@ (8000914 <MX_GPIO_Init+0x31c>)
 80008b0:	f000 ff36 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80008b4:	2302      	movs	r3, #2
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c4:	2305      	movs	r3, #5
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4810      	ldr	r0, [pc, #64]	@ (8000910 <MX_GPIO_Init+0x318>)
 80008d0:	f000 ff26 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80008d4:	2378      	movs	r3, #120	@ 0x78
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e4:	2307      	movs	r3, #7
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4808      	ldr	r0, [pc, #32]	@ (8000910 <MX_GPIO_Init+0x318>)
 80008f0:	f000 ff16 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80008f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fa:	2312      	movs	r3, #18
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	e00a      	b.n	8000918 <MX_GPIO_Init+0x320>
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000
 8000908:	48001000 	.word	0x48001000
 800090c:	48000400 	.word	0x48000400
 8000910:	48000c00 	.word	0x48000c00
 8000914:	48000800 	.word	0x48000800
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800091e:	2304      	movs	r3, #4
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	480b      	ldr	r0, [pc, #44]	@ (8000958 <MX_GPIO_Init+0x360>)
 800092a:	f000 fef9 	bl	8001720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2017      	movs	r0, #23
 8000934:	f000 fdb1 	bl	800149a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000938:	2017      	movs	r0, #23
 800093a:	f000 fdca 	bl	80014d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2028      	movs	r0, #40	@ 0x28
 8000944:	f000 fda9 	bl	800149a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000948:	2028      	movs	r0, #40	@ 0x28
 800094a:	f000 fdc2 	bl	80014d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	@ 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	48000400 	.word	0x48000400

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    /* LED Indication */
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000964:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000968:	4804      	ldr	r0, [pc, #16]	@ (800097c <Error_Handler+0x20>)
 800096a:	f001 f89b 	bl	8001aa4 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 800096e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000972:	f000 fc93 	bl	800129c <HAL_Delay>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000976:	bf00      	nop
 8000978:	e7f4      	b.n	8000964 <Error_Handler+0x8>
 800097a:	bf00      	nop
 800097c:	48000400 	.word	0x48000400

08000980 <LED_Init>:

static LED_Mode current_mode = LED_OFF;
static uint32_t last_toggle_time = 0;
static uint8_t led_state = 0;

void LED_Init(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    LED_Pin_Reset();
 8000984:	f000 f8c0 	bl	8000b08 <LED_Pin_Reset>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <LED_SetMode>:

void LED_SetMode(LED_Mode mode) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
    current_mode = mode;
 8000996:	4a07      	ldr	r2, [pc, #28]	@ (80009b4 <LED_SetMode+0x28>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	7013      	strb	r3, [r2, #0]
    led_state = 0;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <LED_SetMode+0x2c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
    last_toggle_time = LED_Tick_get();
 80009a2:	f000 f8bd 	bl	8000b20 <LED_Tick_get>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a04      	ldr	r2, [pc, #16]	@ (80009bc <LED_SetMode+0x30>)
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000750 	.word	0x20000750
 80009b8:	20000758 	.word	0x20000758
 80009bc:	20000754 	.word	0x20000754

080009c0 <LED_Update>:

void LED_Update(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
    uint32_t current_time = LED_Tick_get();
 80009c6:	f000 f8ab 	bl	8000b20 <LED_Tick_get>
 80009ca:	6078      	str	r0, [r7, #4]

    switch(current_mode) {
 80009cc:	4b42      	ldr	r3, [pc, #264]	@ (8000ad8 <LED_Update+0x118>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d87c      	bhi.n	8000ace <LED_Update+0x10e>
 80009d4:	a201      	add	r2, pc, #4	@ (adr r2, 80009dc <LED_Update+0x1c>)
 80009d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009da:	bf00      	nop
 80009dc:	080009f1 	.word	0x080009f1
 80009e0:	080009f7 	.word	0x080009f7
 80009e4:	080009fd 	.word	0x080009fd
 80009e8:	08000a33 	.word	0x08000a33
 80009ec:	08000a67 	.word	0x08000a67
        case LED_OFF:
            LED_Pin_Reset();
 80009f0:	f000 f88a 	bl	8000b08 <LED_Pin_Reset>
            break;
 80009f4:	e06b      	b.n	8000ace <LED_Update+0x10e>

        case LED_ON:
            LED_Pin_Set();
 80009f6:	f000 f87b 	bl	8000af0 <LED_Pin_Set>
            break;
 80009fa:	e068      	b.n	8000ace <LED_Update+0x10e>

        case LED_BLINK_SLOW:
            if(current_time - last_toggle_time >= 500) {
 80009fc:	4b37      	ldr	r3, [pc, #220]	@ (8000adc <LED_Update+0x11c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a08:	d35c      	bcc.n	8000ac4 <LED_Update+0x104>
                last_toggle_time = current_time;
 8000a0a:	4a34      	ldr	r2, [pc, #208]	@ (8000adc <LED_Update+0x11c>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6013      	str	r3, [r2, #0]
                led_state ^= 1;
 8000a10:	4b33      	ldr	r3, [pc, #204]	@ (8000ae0 <LED_Update+0x120>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	f083 0301 	eor.w	r3, r3, #1
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ae0 <LED_Update+0x120>)
 8000a1c:	701a      	strb	r2, [r3, #0]
                if (led_state)
 8000a1e:	4b30      	ldr	r3, [pc, #192]	@ (8000ae0 <LED_Update+0x120>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <LED_Update+0x6c>
                {
                    LED_Pin_Set();
 8000a26:	f000 f863 	bl	8000af0 <LED_Pin_Set>
                else
                {
                    LED_Pin_Reset();
                }
            }
            break;
 8000a2a:	e04b      	b.n	8000ac4 <LED_Update+0x104>
                    LED_Pin_Reset();
 8000a2c:	f000 f86c 	bl	8000b08 <LED_Pin_Reset>
            break;
 8000a30:	e048      	b.n	8000ac4 <LED_Update+0x104>

        case LED_BLINK_FAST:
            if(current_time - last_toggle_time >= 100) {
 8000a32:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <LED_Update+0x11c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	2b63      	cmp	r3, #99	@ 0x63
 8000a3c:	d944      	bls.n	8000ac8 <LED_Update+0x108>
                last_toggle_time = current_time;
 8000a3e:	4a27      	ldr	r2, [pc, #156]	@ (8000adc <LED_Update+0x11c>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6013      	str	r3, [r2, #0]
                led_state ^= 1;
 8000a44:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <LED_Update+0x120>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	f083 0301 	eor.w	r3, r3, #1
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ae0 <LED_Update+0x120>)
 8000a50:	701a      	strb	r2, [r3, #0]
                if (led_state)
 8000a52:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <LED_Update+0x120>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <LED_Update+0xa0>
                {
                    LED_Pin_Set();
 8000a5a:	f000 f849 	bl	8000af0 <LED_Pin_Set>
                else
                {
                    LED_Pin_Reset();
                }
            }
            break;
 8000a5e:	e033      	b.n	8000ac8 <LED_Update+0x108>
                    LED_Pin_Reset();
 8000a60:	f000 f852 	bl	8000b08 <LED_Pin_Reset>
            break;
 8000a64:	e030      	b.n	8000ac8 <LED_Update+0x108>

        case LED_BLINK_SOS: {
            static const uint16_t sos_pattern[] = {200, 200, 200, 500, 500, 500, 200, 200, 200};
            static uint8_t pattern_index = 0;

            if(current_time - last_toggle_time >= sos_pattern[pattern_index]) {
 8000a66:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <LED_Update+0x11c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae4 <LED_Update+0x124>)
 8000a70:	7812      	ldrb	r2, [r2, #0]
 8000a72:	4611      	mov	r1, r2
 8000a74:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae8 <LED_Update+0x128>)
 8000a76:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d326      	bcc.n	8000acc <LED_Update+0x10c>
                last_toggle_time = current_time;
 8000a7e:	4a17      	ldr	r2, [pc, #92]	@ (8000adc <LED_Update+0x11c>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6013      	str	r3, [r2, #0]
                led_state ^= 1;
 8000a84:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <LED_Update+0x120>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	f083 0301 	eor.w	r3, r3, #1
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <LED_Update+0x120>)
 8000a90:	701a      	strb	r2, [r3, #0]
                pattern_index = (pattern_index + 1) % (sizeof(sos_pattern)/sizeof(sos_pattern[0]));
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <LED_Update+0x124>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <LED_Update+0x12c>)
 8000a9c:	fba3 2301 	umull	r2, r3, r3, r1
 8000aa0:	085a      	lsrs	r2, r3, #1
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	4413      	add	r3, r2
 8000aa8:	1aca      	subs	r2, r1, r3
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <LED_Update+0x124>)
 8000aae:	701a      	strb	r2, [r3, #0]
                if (led_state)
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <LED_Update+0x120>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d002      	beq.n	8000abe <LED_Update+0xfe>
                {
                    LED_Pin_Set();
 8000ab8:	f000 f81a 	bl	8000af0 <LED_Pin_Set>
                else
                {
                    LED_Pin_Reset();
                }
            }
            break;
 8000abc:	e006      	b.n	8000acc <LED_Update+0x10c>
                    LED_Pin_Reset();
 8000abe:	f000 f823 	bl	8000b08 <LED_Pin_Reset>
            break;
 8000ac2:	e003      	b.n	8000acc <LED_Update+0x10c>
            break;
 8000ac4:	bf00      	nop
 8000ac6:	e002      	b.n	8000ace <LED_Update+0x10e>
            break;
 8000ac8:	bf00      	nop
 8000aca:	e000      	b.n	8000ace <LED_Update+0x10e>
            break;
 8000acc:	bf00      	nop
        }
    }
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000750 	.word	0x20000750
 8000adc:	20000754 	.word	0x20000754
 8000ae0:	20000758 	.word	0x20000758
 8000ae4:	20000759 	.word	0x20000759
 8000ae8:	08004d28 	.word	0x08004d28
 8000aec:	38e38e39 	.word	0x38e38e39

08000af0 <LED_Pin_Set>:
#include "main.h"

void LED_Pin_Set(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000afa:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <LED_Pin_Set+0x14>)
 8000afc:	f000 ffba 	bl	8001a74 <HAL_GPIO_WritePin>
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	48000400 	.word	0x48000400

08000b08 <LED_Pin_Reset>:

void LED_Pin_Reset(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b12:	4802      	ldr	r0, [pc, #8]	@ (8000b1c <LED_Pin_Reset+0x14>)
 8000b14:	f000 ffae 	bl	8001a74 <HAL_GPIO_WritePin>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	48000400 	.word	0x48000400

08000b20 <LED_Tick_get>:

uint32_t LED_Tick_get(void){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000b24:	f000 fbae 	bl	8001284 <HAL_GetTick>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b52:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0ac      	sub	sp, #176	@ 0xb0
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2288      	movs	r2, #136	@ 0x88
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f003 ff2a 	bl	80049f2 <memset>
  if(DFSDM1_Init == 0)
 8000b9e:	4b25      	ldr	r3, [pc, #148]	@ (8000c34 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d142      	bne.n	8000c2c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000ba6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000baa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 f956 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000bc2:	f7ff fecb 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bca:	4a1b      	ldr	r2, [pc, #108]	@ (8000c38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000bcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bd2:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bde:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	4a15      	ldr	r2, [pc, #84]	@ (8000c38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000be4:	f043 0310 	orr.w	r3, r3, #16
 8000be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bea:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000bf6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000bfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c10:	2306      	movs	r3, #6
 8000c12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c16:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4807      	ldr	r0, [pc, #28]	@ (8000c3c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000c1e:	f000 fd7f 	bl	8001720 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000c22:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	4a02      	ldr	r2, [pc, #8]	@ (8000c34 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000c2a:	6013      	str	r3, [r2, #0]
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	37b0      	adds	r7, #176	@ 0xb0
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000075c 	.word	0x2000075c
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48001000 	.word	0x48001000

08000c40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0ac      	sub	sp, #176	@ 0xb0
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2288      	movs	r2, #136	@ 0x88
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f003 fec6 	bl	80049f2 <memset>
  if(hi2c->Instance==I2C2)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a21      	ldr	r2, [pc, #132]	@ (8000cf0 <HAL_I2C_MspInit+0xb0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d13b      	bne.n	8000ce8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c70:	2380      	movs	r3, #128	@ 0x80
 8000c72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 f8f3 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c88:	f7ff fe68 	bl	800095c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <HAL_I2C_MspInit+0xb4>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c90:	4a18      	ldr	r2, [pc, #96]	@ (8000cf4 <HAL_I2C_MspInit+0xb4>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c98:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <HAL_I2C_MspInit+0xb4>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000ca4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ca8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	2312      	movs	r3, #18
 8000cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480b      	ldr	r0, [pc, #44]	@ (8000cf8 <HAL_I2C_MspInit+0xb8>)
 8000ccc:	f000 fd28 	bl	8001720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <HAL_I2C_MspInit+0xb4>)
 8000cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd4:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <HAL_I2C_MspInit+0xb4>)
 8000cd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cda:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <HAL_I2C_MspInit+0xb4>)
 8000cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ce8:	bf00      	nop
 8000cea:	37b0      	adds	r7, #176	@ 0xb0
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40005800 	.word	0x40005800
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000400 	.word	0x48000400

08000cfc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	@ 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a17      	ldr	r2, [pc, #92]	@ (8000d78 <HAL_QSPI_MspInit+0x7c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d128      	bne.n	8000d70 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d1e:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <HAL_QSPI_MspInit+0x80>)
 8000d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d22:	4a16      	ldr	r2, [pc, #88]	@ (8000d7c <HAL_QSPI_MspInit+0x80>)
 8000d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d28:	6513      	str	r3, [r2, #80]	@ 0x50
 8000d2a:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <HAL_QSPI_MspInit+0x80>)
 8000d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <HAL_QSPI_MspInit+0x80>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3a:	4a10      	ldr	r2, [pc, #64]	@ (8000d7c <HAL_QSPI_MspInit+0x80>)
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <HAL_QSPI_MspInit+0x80>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000d4e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000d52:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d60:	230a      	movs	r3, #10
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <HAL_QSPI_MspInit+0x84>)
 8000d6c:	f000 fcd8 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	@ 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	a0001000 	.word	0xa0001000
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48001000 	.word	0x48001000

08000d84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a17      	ldr	r2, [pc, #92]	@ (8000e00 <HAL_SPI_MspInit+0x7c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d128      	bne.n	8000df8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <HAL_SPI_MspInit+0x80>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000daa:	4a16      	ldr	r2, [pc, #88]	@ (8000e04 <HAL_SPI_MspInit+0x80>)
 8000dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000db0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db2:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <HAL_SPI_MspInit+0x80>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <HAL_SPI_MspInit+0x80>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	4a10      	ldr	r2, [pc, #64]	@ (8000e04 <HAL_SPI_MspInit+0x80>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_SPI_MspInit+0x80>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000dd6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de8:	2306      	movs	r3, #6
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <HAL_SPI_MspInit+0x84>)
 8000df4:	f000 fc94 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	@ 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40003c00 	.word	0x40003c00
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48000800 	.word	0x48000800

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0ae      	sub	sp, #184	@ 0xb8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	2288      	movs	r2, #136	@ 0x88
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fde0 	bl	80049f2 <memset>
  if(huart->Instance==USART1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a42      	ldr	r2, [pc, #264]	@ (8000f40 <HAL_UART_MspInit+0x134>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d13b      	bne.n	8000eb4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e40:	2300      	movs	r3, #0
 8000e42:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 f80d 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e54:	f7ff fd82 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e58:	4b3a      	ldr	r3, [pc, #232]	@ (8000f44 <HAL_UART_MspInit+0x138>)
 8000e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5c:	4a39      	ldr	r2, [pc, #228]	@ (8000f44 <HAL_UART_MspInit+0x138>)
 8000e5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e62:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e64:	4b37      	ldr	r3, [pc, #220]	@ (8000f44 <HAL_UART_MspInit+0x138>)
 8000e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b34      	ldr	r3, [pc, #208]	@ (8000f44 <HAL_UART_MspInit+0x138>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e74:	4a33      	ldr	r2, [pc, #204]	@ (8000f44 <HAL_UART_MspInit+0x138>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7c:	4b31      	ldr	r3, [pc, #196]	@ (8000f44 <HAL_UART_MspInit+0x138>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000e88:	23c0      	movs	r3, #192	@ 0xc0
 8000e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4826      	ldr	r0, [pc, #152]	@ (8000f48 <HAL_UART_MspInit+0x13c>)
 8000eae:	f000 fc37 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eb2:	e040      	b.n	8000f36 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a24      	ldr	r2, [pc, #144]	@ (8000f4c <HAL_UART_MspInit+0x140>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d13b      	bne.n	8000f36 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f001 ffcc 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000ed6:	f7ff fd41 	bl	800095c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <HAL_UART_MspInit+0x138>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ede:	4a19      	ldr	r2, [pc, #100]	@ (8000f44 <HAL_UART_MspInit+0x138>)
 8000ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <HAL_UART_MspInit+0x138>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <HAL_UART_MspInit+0x138>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	4a13      	ldr	r2, [pc, #76]	@ (8000f44 <HAL_UART_MspInit+0x138>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <HAL_UART_MspInit+0x138>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000f0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f24:	2307      	movs	r3, #7
 8000f26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4807      	ldr	r0, [pc, #28]	@ (8000f50 <HAL_UART_MspInit+0x144>)
 8000f32:	f000 fbf5 	bl	8001720 <HAL_GPIO_Init>
}
 8000f36:	bf00      	nop
 8000f38:	37b8      	adds	r7, #184	@ 0xb8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40013800 	.word	0x40013800
 8000f44:	40021000 	.word	0x40021000
 8000f48:	48000400 	.word	0x48000400
 8000f4c:	40004800 	.word	0x40004800
 8000f50:	48000c00 	.word	0x48000c00

08000f54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b0ac      	sub	sp, #176	@ 0xb0
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2288      	movs	r2, #136	@ 0x88
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 fd3c 	bl	80049f2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f82:	d17c      	bne.n	800107e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f88:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000f8a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000f8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000f9a:	2318      	movs	r3, #24
 8000f9c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000faa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fae:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 ff57 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000fc0:	f7ff fccc 	bl	800095c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b30      	ldr	r3, [pc, #192]	@ (8001088 <HAL_PCD_MspInit+0x134>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8001088 <HAL_PCD_MspInit+0x134>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001088 <HAL_PCD_MspInit+0x134>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000fdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fe0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffa:	f000 fb91 	bl	8001720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000ffe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001002:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001018:	230a      	movs	r3, #10
 800101a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001028:	f000 fb7a 	bl	8001720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <HAL_PCD_MspInit+0x134>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001030:	4a15      	ldr	r2, [pc, #84]	@ (8001088 <HAL_PCD_MspInit+0x134>)
 8001032:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001036:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001038:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <HAL_PCD_MspInit+0x134>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001044:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <HAL_PCD_MspInit+0x134>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d114      	bne.n	800107a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <HAL_PCD_MspInit+0x134>)
 8001052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001054:	4a0c      	ldr	r2, [pc, #48]	@ (8001088 <HAL_PCD_MspInit+0x134>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800105a:	6593      	str	r3, [r2, #88]	@ 0x58
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <HAL_PCD_MspInit+0x134>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001068:	f001 f832 	bl	80020d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_PCD_MspInit+0x134>)
 800106e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001070:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <HAL_PCD_MspInit+0x134>)
 8001072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6593      	str	r3, [r2, #88]	@ 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001078:	e001      	b.n	800107e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800107a:	f001 f829 	bl	80020d0 <HAL_PWREx_EnableVddUSB>
}
 800107e:	bf00      	nop
 8001080:	37b0      	adds	r7, #176	@ 0xb0
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <NMI_Handler+0x4>

08001094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <MemManage_Handler+0x4>

080010a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e2:	f000 f8bb 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}

080010ea <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80010ee:	2020      	movs	r0, #32
 80010f0:	f000 fcf2 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80010f4:	2040      	movs	r0, #64	@ 0x40
 80010f6:	f000 fcef 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80010fa:	2080      	movs	r0, #128	@ 0x80
 80010fc:	f000 fcec 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001100:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001104:	f000 fce8 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001110:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001114:	f000 fce0 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001118:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800111c:	f000 fcdc 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001120:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001124:	f000 fcd8 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001128:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800112c:	f000 fcd4 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001130:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001134:	f000 fcd0 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001198 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001164:	f7ff ffea 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <LoopForever+0x6>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	@ (80011a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <LoopForever+0xe>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	@ (80011ac <LoopForever+0x16>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f003 fc39 	bl	8004a04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001192:	f7ff f833 	bl	80001fc <main>

08001196 <LoopForever>:

LoopForever:
    b LoopForever
 8001196:	e7fe      	b.n	8001196 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001198:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011a4:	08004d94 	.word	0x08004d94
  ldr r2, =_sbss
 80011a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011ac:	20000788 	.word	0x20000788

080011b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_2_IRQHandler>

080011b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 f961 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f80e 	bl	80011e4 <HAL_InitTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	e001      	b.n	80011d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011d4:	f7ff fcac 	bl	8000b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <HAL_InitTick+0x6c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d023      	beq.n	8001240 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <HAL_InitTick+0x70>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_InitTick+0x6c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f96d 	bl	80014ee <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10f      	bne.n	800123a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d809      	bhi.n	8001234 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001228:	f000 f937 	bl	800149a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800122c:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <HAL_InitTick+0x74>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e007      	b.n	8001244 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e004      	b.n	8001244 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	e001      	b.n	8001244 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008
 8001280:	20000760 	.word	0x20000760

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000760 	.word	0x20000760

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff ffee 	bl	8001284 <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012b4:	d005      	beq.n	80012c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012b6:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <HAL_Delay+0x44>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c2:	bf00      	nop
 80012c4:	f7ff ffde 	bl	8001284 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f7      	bhi.n	80012c4 <HAL_Delay+0x28>
  {
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4907      	ldr	r1, [pc, #28]	@ (8001380 <__NVIC_EnableIRQ+0x38>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	@ (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	@ (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	@ 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	@ 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001464:	f7ff ff8e 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff29 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff3e 	bl	800132c <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff8e 	bl	80013d8 <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff31 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa2 	bl	8001440 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0ac      	b.n	8001674 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f8b2 	bl	8001688 <DFSDM_GetChannelFromInstance>
 8001524:	4603      	mov	r3, r0
 8001526:	4a55      	ldr	r2, [pc, #340]	@ (800167c <HAL_DFSDM_ChannelInit+0x174>)
 8001528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e09f      	b.n	8001674 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fb1f 	bl	8000b78 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800153a:	4b51      	ldr	r3, [pc, #324]	@ (8001680 <HAL_DFSDM_ChannelInit+0x178>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	4a4f      	ldr	r2, [pc, #316]	@ (8001680 <HAL_DFSDM_ChannelInit+0x178>)
 8001542:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001544:	4b4e      	ldr	r3, [pc, #312]	@ (8001680 <HAL_DFSDM_ChannelInit+0x178>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d125      	bne.n	8001598 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800154c:	4b4d      	ldr	r3, [pc, #308]	@ (8001684 <HAL_DFSDM_ChannelInit+0x17c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a4c      	ldr	r2, [pc, #304]	@ (8001684 <HAL_DFSDM_ChannelInit+0x17c>)
 8001552:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001556:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001558:	4b4a      	ldr	r3, [pc, #296]	@ (8001684 <HAL_DFSDM_ChannelInit+0x17c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4948      	ldr	r1, [pc, #288]	@ (8001684 <HAL_DFSDM_ChannelInit+0x17c>)
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001566:	4b47      	ldr	r3, [pc, #284]	@ (8001684 <HAL_DFSDM_ChannelInit+0x17c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a46      	ldr	r2, [pc, #280]	@ (8001684 <HAL_DFSDM_ChannelInit+0x17c>)
 800156c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001570:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	791b      	ldrb	r3, [r3, #4]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800157a:	4b42      	ldr	r3, [pc, #264]	@ (8001684 <HAL_DFSDM_ChannelInit+0x17c>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	3b01      	subs	r3, #1
 8001584:	041b      	lsls	r3, r3, #16
 8001586:	493f      	ldr	r1, [pc, #252]	@ (8001684 <HAL_DFSDM_ChannelInit+0x17c>)
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800158c:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <HAL_DFSDM_ChannelInit+0x17c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a3c      	ldr	r2, [pc, #240]	@ (8001684 <HAL_DFSDM_ChannelInit+0x17c>)
 8001592:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001596:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80015a6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6819      	ldr	r1, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015b6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80015bc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 020f 	bic.w	r2, r2, #15
 80015d4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6819      	ldr	r1, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80015fc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6899      	ldr	r1, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160c:	3b01      	subs	r3, #1
 800160e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f002 0207 	and.w	r2, r2, #7
 8001628:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001634:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001654:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f810 	bl	8001688 <DFSDM_GetChannelFromInstance>
 8001668:	4602      	mov	r2, r0
 800166a:	4904      	ldr	r1, [pc, #16]	@ (800167c <HAL_DFSDM_ChannelInit+0x174>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000768 	.word	0x20000768
 8001680:	20000764 	.word	0x20000764
 8001684:	40016000 	.word	0x40016000

08001688 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a1c      	ldr	r2, [pc, #112]	@ (8001704 <DFSDM_GetChannelFromInstance+0x7c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d102      	bne.n	800169e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	e02b      	b.n	80016f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a19      	ldr	r2, [pc, #100]	@ (8001708 <DFSDM_GetChannelFromInstance+0x80>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d102      	bne.n	80016ac <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e024      	b.n	80016f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a17      	ldr	r2, [pc, #92]	@ (800170c <DFSDM_GetChannelFromInstance+0x84>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d102      	bne.n	80016ba <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e01d      	b.n	80016f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <DFSDM_GetChannelFromInstance+0x88>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d102      	bne.n	80016c8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80016c2:	2304      	movs	r3, #4
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	e016      	b.n	80016f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <DFSDM_GetChannelFromInstance+0x8c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d102      	bne.n	80016d6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80016d0:	2305      	movs	r3, #5
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e00f      	b.n	80016f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001718 <DFSDM_GetChannelFromInstance+0x90>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d102      	bne.n	80016e4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80016de:	2306      	movs	r3, #6
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	e008      	b.n	80016f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <DFSDM_GetChannelFromInstance+0x94>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d102      	bne.n	80016f2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80016ec:	2307      	movs	r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	e001      	b.n	80016f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80016f2:	2303      	movs	r3, #3
 80016f4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40016000 	.word	0x40016000
 8001708:	40016020 	.word	0x40016020
 800170c:	40016040 	.word	0x40016040
 8001710:	40016080 	.word	0x40016080
 8001714:	400160a0 	.word	0x400160a0
 8001718:	400160c0 	.word	0x400160c0
 800171c:	400160e0 	.word	0x400160e0

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172e:	e17f      	b.n	8001a30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8171 	beq.w	8001a2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d005      	beq.n	8001760 <HAL_GPIO_Init+0x40>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d130      	bne.n	80017c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	2201      	movs	r2, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 0201 	and.w	r2, r3, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d118      	bne.n	8001800 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017d4:	2201      	movs	r2, #1
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	08db      	lsrs	r3, r3, #3
 80017ea:	f003 0201 	and.w	r2, r3, #1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b03      	cmp	r3, #3
 800180a:	d017      	beq.n	800183c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d123      	bne.n	8001890 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	08da      	lsrs	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3208      	adds	r2, #8
 8001850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	220f      	movs	r2, #15
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	6939      	ldr	r1, [r7, #16]
 800188c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0203 	and.w	r2, r3, #3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80ac 	beq.w	8001a2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a50 <HAL_GPIO_Init+0x330>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d6:	4a5e      	ldr	r2, [pc, #376]	@ (8001a50 <HAL_GPIO_Init+0x330>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80018de:	4b5c      	ldr	r3, [pc, #368]	@ (8001a50 <HAL_GPIO_Init+0x330>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ea:	4a5a      	ldr	r2, [pc, #360]	@ (8001a54 <HAL_GPIO_Init+0x334>)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001914:	d025      	beq.n	8001962 <HAL_GPIO_Init+0x242>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4f      	ldr	r2, [pc, #316]	@ (8001a58 <HAL_GPIO_Init+0x338>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01f      	beq.n	800195e <HAL_GPIO_Init+0x23e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4e      	ldr	r2, [pc, #312]	@ (8001a5c <HAL_GPIO_Init+0x33c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0x23a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4d      	ldr	r2, [pc, #308]	@ (8001a60 <HAL_GPIO_Init+0x340>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0x236>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4c      	ldr	r2, [pc, #304]	@ (8001a64 <HAL_GPIO_Init+0x344>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00d      	beq.n	8001952 <HAL_GPIO_Init+0x232>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4b      	ldr	r2, [pc, #300]	@ (8001a68 <HAL_GPIO_Init+0x348>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x22e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4a      	ldr	r2, [pc, #296]	@ (8001a6c <HAL_GPIO_Init+0x34c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_GPIO_Init+0x22a>
 8001946:	2306      	movs	r3, #6
 8001948:	e00c      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800194a:	2307      	movs	r3, #7
 800194c:	e00a      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800194e:	2305      	movs	r3, #5
 8001950:	e008      	b.n	8001964 <HAL_GPIO_Init+0x244>
 8001952:	2304      	movs	r3, #4
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x244>
 8001956:	2303      	movs	r3, #3
 8001958:	e004      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800195a:	2302      	movs	r3, #2
 800195c:	e002      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x244>
 8001962:	2300      	movs	r3, #0
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	f002 0203 	and.w	r2, r2, #3
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	4093      	lsls	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001974:	4937      	ldr	r1, [pc, #220]	@ (8001a54 <HAL_GPIO_Init+0x334>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001982:	4b3b      	ldr	r3, [pc, #236]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019a6:	4a32      	ldr	r2, [pc, #200]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ac:	4b30      	ldr	r3, [pc, #192]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019d0:	4a27      	ldr	r2, [pc, #156]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019d6:	4b26      	ldr	r3, [pc, #152]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a24:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f47f ae78 	bne.w	8001730 <HAL_GPIO_Init+0x10>
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010000 	.word	0x40010000
 8001a58:	48000400 	.word	0x48000400
 8001a5c:	48000800 	.word	0x48000800
 8001a60:	48000c00 	.word	0x48000c00
 8001a64:	48001000 	.word	0x48001000
 8001a68:	48001400 	.word	0x48001400
 8001a6c:	48001800 	.word	0x48001800
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4013      	ands	r3, r2
 8001abc:	041a      	lsls	r2, r3, #16
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	43d9      	mvns	r1, r3
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ae2:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aee:	4a05      	ldr	r2, [pc, #20]	@ (8001b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f806 	bl	8001b08 <HAL_GPIO_EXTI_Callback>
  }
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e08d      	b.n	8001c4c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d106      	bne.n	8001b4a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff f87b 	bl	8000c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2224      	movs	r2, #36	@ 0x24
 8001b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0201 	bic.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d107      	bne.n	8001b98 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	e006      	b.n	8001ba6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ba4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d108      	bne.n	8001bc0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	e007      	b.n	8001bd0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001be2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69d9      	ldr	r1, [r3, #28]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1a      	ldr	r2, [r3, #32]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d138      	bne.n	8001cdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e032      	b.n	8001cde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2224      	movs	r2, #36	@ 0x24
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e000      	b.n	8001cde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cdc:	2302      	movs	r3, #2
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b085      	sub	sp, #20
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d139      	bne.n	8001d74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e033      	b.n	8001d76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2224      	movs	r2, #36	@ 0x24
 8001d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e000      	b.n	8001d76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d74:	2302      	movs	r3, #2
  }
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af02      	add	r7, sp, #8
 8001d88:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e101      	b.n	8001f98 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d106      	bne.n	8001dae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff f8d3 	bl	8000f54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2203      	movs	r2, #3
 8001db2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f002 fb97 	bl	80044f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7c1a      	ldrb	r2, [r3, #16]
 8001dce:	f88d 2000 	strb.w	r2, [sp]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dd6:	f002 fb60 	bl	800449a <USB_CoreInit>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0d5      	b.n	8001f98 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 fb8f 	bl	8004516 <USB_SetCurrentMode>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0c6      	b.n	8001f98 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]
 8001e0e:	e04a      	b.n	8001ea6 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3315      	adds	r3, #21
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3314      	adds	r3, #20
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	b298      	uxth	r0, r3
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	332e      	adds	r3, #46	@ 0x2e
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3318      	adds	r3, #24
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	331c      	adds	r3, #28
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	3320      	adds	r3, #32
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	3324      	adds	r3, #36	@ 0x24
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	791b      	ldrb	r3, [r3, #4]
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d3af      	bcc.n	8001e10 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	e044      	b.n	8001f40 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	791b      	ldrb	r3, [r3, #4]
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d3b5      	bcc.n	8001eb6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7c1a      	ldrb	r2, [r3, #16]
 8001f52:	f88d 2000 	strb.w	r2, [sp]
 8001f56:	3304      	adds	r3, #4
 8001f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5a:	f002 fb29 	bl	80045b0 <USB_DevInit>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e013      	b.n	8001f98 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7b1b      	ldrb	r3, [r3, #12]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d102      	bne.n	8001f8c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f80a 	bl	8001fa0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f002 fcce 	bl	8004932 <USB_DevDisconnect>

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	f043 0303 	orr.w	r3, r3, #3
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fec:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40007000 	.word	0x40007000

08002008 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800200c:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <HAL_PWREx_GetVoltageRange+0x18>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40007000 	.word	0x40007000

08002024 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002032:	d130      	bne.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002034:	4b23      	ldr	r3, [pc, #140]	@ (80020c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800203c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002040:	d038      	beq.n	80020b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002042:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800204a:	4a1e      	ldr	r2, [pc, #120]	@ (80020c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800204c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002050:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002052:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2232      	movs	r2, #50	@ 0x32
 8002058:	fb02 f303 	mul.w	r3, r2, r3
 800205c:	4a1b      	ldr	r2, [pc, #108]	@ (80020cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	0c9b      	lsrs	r3, r3, #18
 8002064:	3301      	adds	r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002068:	e002      	b.n	8002070 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3b01      	subs	r3, #1
 800206e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002070:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207c:	d102      	bne.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x60>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f2      	bne.n	800206a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002084:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800208c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002090:	d110      	bne.n	80020b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e00f      	b.n	80020b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002096:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020a2:	d007      	beq.n	80020b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020a4:	4b07      	ldr	r3, [pc, #28]	@ (80020c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020ac:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40007000 	.word	0x40007000
 80020c8:	20000000 	.word	0x20000000
 80020cc:	431bde83 	.word	0x431bde83

080020d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80020d4:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80020da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020de:	6053      	str	r3, [r2, #4]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40007000 	.word	0x40007000

080020f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff f8c4 	bl	8001284 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e063      	b.n	80021d0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10b      	bne.n	800212c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7fe fded 	bl	8000cfc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002122:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f858 	bl	80021dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	3b01      	subs	r3, #1
 800213c:	021a      	lsls	r2, r3, #8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	2120      	movs	r1, #32
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f850 	bl	80021f8 <QSPI_WaitFlagStateUntilTimeout>
 8002158:	4603      	mov	r3, r0
 800215a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800215c:	7afb      	ldrb	r3, [r7, #11]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d131      	bne.n	80021c6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800216c:	f023 0310 	bic.w	r3, r3, #16
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6852      	ldr	r2, [r2, #4]
 8002174:	0611      	lsls	r1, r2, #24
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68d2      	ldr	r2, [r2, #12]
 800217a:	4311      	orrs	r1, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	430b      	orrs	r3, r1
 8002182:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <HAL_QSPI_Init+0xe8>)
 800218c:	4013      	ands	r3, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6912      	ldr	r2, [r2, #16]
 8002192:	0411      	lsls	r1, r2, #16
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6952      	ldr	r2, [r2, #20]
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6992      	ldr	r2, [r2, #24]
 800219e:	4311      	orrs	r1, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	430b      	orrs	r3, r1
 80021a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80021ce:	7afb      	ldrb	r3, [r7, #11]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	ffe0f8fe 	.word	0xffe0f8fe

080021dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002208:	e01a      	b.n	8002240 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002210:	d016      	beq.n	8002240 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002212:	f7ff f837 	bl	8001284 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	429a      	cmp	r2, r3
 8002220:	d302      	bcc.n	8002228 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10b      	bne.n	8002240 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2204      	movs	r2, #4
 800222c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e00e      	b.n	800225e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	bf14      	ite	ne
 800224e:	2301      	movne	r3, #1
 8002250:	2300      	moveq	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	429a      	cmp	r2, r3
 800225a:	d1d6      	bne.n	800220a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e3ca      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227a:	4b97      	ldr	r3, [pc, #604]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002284:	4b94      	ldr	r3, [pc, #592]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80e4 	beq.w	8002464 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_RCC_OscConfig+0x4a>
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2b0c      	cmp	r3, #12
 80022a6:	f040 808b 	bne.w	80023c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	f040 8087 	bne.w	80023c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022b2:	4b89      	ldr	r3, [pc, #548]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x62>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e3a2      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1a      	ldr	r2, [r3, #32]
 80022ce:	4b82      	ldr	r3, [pc, #520]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d004      	beq.n	80022e4 <HAL_RCC_OscConfig+0x7c>
 80022da:	4b7f      	ldr	r3, [pc, #508]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022e2:	e005      	b.n	80022f0 <HAL_RCC_OscConfig+0x88>
 80022e4:	4b7c      	ldr	r3, [pc, #496]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80022e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d223      	bcs.n	800233c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fd55 	bl	8002da8 <RCC_SetFlashLatencyFromMSIRange>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e383      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002308:	4b73      	ldr	r3, [pc, #460]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a72      	ldr	r2, [pc, #456]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b70      	ldr	r3, [pc, #448]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	496d      	ldr	r1, [pc, #436]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002326:	4b6c      	ldr	r3, [pc, #432]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	4968      	ldr	r1, [pc, #416]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
 800233a:	e025      	b.n	8002388 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800233c:	4b66      	ldr	r3, [pc, #408]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a65      	ldr	r2, [pc, #404]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002342:	f043 0308 	orr.w	r3, r3, #8
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b63      	ldr	r3, [pc, #396]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4960      	ldr	r1, [pc, #384]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800235a:	4b5f      	ldr	r3, [pc, #380]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	495b      	ldr	r1, [pc, #364]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fd15 	bl	8002da8 <RCC_SetFlashLatencyFromMSIRange>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e343      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002388:	f000 fc4a 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 800238c:	4602      	mov	r2, r0
 800238e:	4b52      	ldr	r3, [pc, #328]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	4950      	ldr	r1, [pc, #320]	@ (80024dc <HAL_RCC_OscConfig+0x274>)
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	4a4e      	ldr	r2, [pc, #312]	@ (80024e0 <HAL_RCC_OscConfig+0x278>)
 80023a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023a8:	4b4e      	ldr	r3, [pc, #312]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe ff19 	bl	80011e4 <HAL_InitTick>
 80023b2:	4603      	mov	r3, r0
 80023b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d052      	beq.n	8002462 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	e327      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d032      	beq.n	800242e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023c8:	4b43      	ldr	r3, [pc, #268]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a42      	ldr	r2, [pc, #264]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d4:	f7fe ff56 	bl	8001284 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023dc:	f7fe ff52 	bl	8001284 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e310      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ee:	4b3a      	ldr	r3, [pc, #232]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023fa:	4b37      	ldr	r3, [pc, #220]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a36      	ldr	r2, [pc, #216]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b34      	ldr	r3, [pc, #208]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4931      	ldr	r1, [pc, #196]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002418:	4b2f      	ldr	r3, [pc, #188]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	492c      	ldr	r1, [pc, #176]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	e01a      	b.n	8002464 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800242e:	4b2a      	ldr	r3, [pc, #168]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a29      	ldr	r2, [pc, #164]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800243a:	f7fe ff23 	bl	8001284 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002442:	f7fe ff1f 	bl	8001284 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e2dd      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002454:	4b20      	ldr	r3, [pc, #128]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x1da>
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002462:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d074      	beq.n	800255a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b08      	cmp	r3, #8
 8002474:	d005      	beq.n	8002482 <HAL_RCC_OscConfig+0x21a>
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b0c      	cmp	r3, #12
 800247a:	d10e      	bne.n	800249a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d10b      	bne.n	800249a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d064      	beq.n	8002558 <HAL_RCC_OscConfig+0x2f0>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d160      	bne.n	8002558 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e2ba      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x24a>
 80024a4:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0b      	ldr	r2, [pc, #44]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e026      	b.n	8002500 <HAL_RCC_OscConfig+0x298>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ba:	d115      	bne.n	80024e8 <HAL_RCC_OscConfig+0x280>
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a05      	ldr	r2, [pc, #20]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a02      	ldr	r2, [pc, #8]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e014      	b.n	8002500 <HAL_RCC_OscConfig+0x298>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08004d3c 	.word	0x08004d3c
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000004 	.word	0x20000004
 80024e8:	4ba0      	ldr	r3, [pc, #640]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a9f      	ldr	r2, [pc, #636]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b9d      	ldr	r3, [pc, #628]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a9c      	ldr	r2, [pc, #624]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe febc 	bl	8001284 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe feb8 	bl	8001284 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	@ 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e276      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002522:	4b92      	ldr	r3, [pc, #584]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x2a8>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe fea8 	bl	8001284 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7fe fea4 	bl	8001284 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	@ 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e262      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800254a:	4b88      	ldr	r3, [pc, #544]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x2d0>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d060      	beq.n	8002628 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d005      	beq.n	8002578 <HAL_RCC_OscConfig+0x310>
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d119      	bne.n	80025a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d116      	bne.n	80025a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002578:	4b7c      	ldr	r3, [pc, #496]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_OscConfig+0x328>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e23f      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b76      	ldr	r3, [pc, #472]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	4973      	ldr	r1, [pc, #460]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a4:	e040      	b.n	8002628 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d023      	beq.n	80025f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ae:	4b6f      	ldr	r3, [pc, #444]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a6e      	ldr	r2, [pc, #440]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fe63 	bl	8001284 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c2:	f7fe fe5f 	bl	8001284 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e21d      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d4:	4b65      	ldr	r3, [pc, #404]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e0:	4b62      	ldr	r3, [pc, #392]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	495f      	ldr	r1, [pc, #380]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
 80025f4:	e018      	b.n	8002628 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f6:	4b5d      	ldr	r3, [pc, #372]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a5c      	ldr	r2, [pc, #368]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7fe fe3f 	bl	8001284 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260a:	f7fe fe3b 	bl	8001284 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e1f9      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800261c:	4b53      	ldr	r3, [pc, #332]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d03c      	beq.n	80026ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01c      	beq.n	8002676 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263c:	4b4b      	ldr	r3, [pc, #300]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800263e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002642:	4a4a      	ldr	r2, [pc, #296]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe fe1a 	bl	8001284 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002654:	f7fe fe16 	bl	8001284 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e1d4      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002666:	4b41      	ldr	r3, [pc, #260]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ef      	beq.n	8002654 <HAL_RCC_OscConfig+0x3ec>
 8002674:	e01b      	b.n	80026ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002676:	4b3d      	ldr	r3, [pc, #244]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800267c:	4a3b      	ldr	r2, [pc, #236]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002686:	f7fe fdfd 	bl	8001284 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268e:	f7fe fdf9 	bl	8001284 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1b7      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026a0:	4b32      	ldr	r3, [pc, #200]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ef      	bne.n	800268e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80a6 	beq.w	8002808 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026bc:	2300      	movs	r3, #0
 80026be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026c0:	4b2a      	ldr	r3, [pc, #168]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10d      	bne.n	80026e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026cc:	4b27      	ldr	r3, [pc, #156]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	4a26      	ldr	r2, [pc, #152]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80026d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026d8:	4b24      	ldr	r3, [pc, #144]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e4:	2301      	movs	r3, #1
 80026e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e8:	4b21      	ldr	r3, [pc, #132]	@ (8002770 <HAL_RCC_OscConfig+0x508>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d118      	bne.n	8002726 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002770 <HAL_RCC_OscConfig+0x508>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002770 <HAL_RCC_OscConfig+0x508>)
 80026fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002700:	f7fe fdc0 	bl	8001284 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002708:	f7fe fdbc 	bl	8001284 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e17a      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <HAL_RCC_OscConfig+0x508>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d108      	bne.n	8002740 <HAL_RCC_OscConfig+0x4d8>
 800272e:	4b0f      	ldr	r3, [pc, #60]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002734:	4a0d      	ldr	r2, [pc, #52]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800273e:	e029      	b.n	8002794 <HAL_RCC_OscConfig+0x52c>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b05      	cmp	r3, #5
 8002746:	d115      	bne.n	8002774 <HAL_RCC_OscConfig+0x50c>
 8002748:	4b08      	ldr	r3, [pc, #32]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274e:	4a07      	ldr	r2, [pc, #28]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002758:	4b04      	ldr	r3, [pc, #16]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275e:	4a03      	ldr	r2, [pc, #12]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002768:	e014      	b.n	8002794 <HAL_RCC_OscConfig+0x52c>
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	40007000 	.word	0x40007000
 8002774:	4b9c      	ldr	r3, [pc, #624]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277a:	4a9b      	ldr	r2, [pc, #620]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002784:	4b98      	ldr	r3, [pc, #608]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278a:	4a97      	ldr	r2, [pc, #604]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800278c:	f023 0304 	bic.w	r3, r3, #4
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d016      	beq.n	80027ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe fd72 	bl	8001284 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7fe fd6e 	bl	8001284 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e12a      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ba:	4b8b      	ldr	r3, [pc, #556]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ed      	beq.n	80027a4 <HAL_RCC_OscConfig+0x53c>
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ca:	f7fe fd5b 	bl	8001284 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe fd57 	bl	8001284 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e113      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027e8:	4b7f      	ldr	r3, [pc, #508]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1ed      	bne.n	80027d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f6:	7ffb      	ldrb	r3, [r7, #31]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fc:	4b7a      	ldr	r3, [pc, #488]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002800:	4a79      	ldr	r2, [pc, #484]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002806:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80fe 	beq.w	8002a0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002816:	2b02      	cmp	r3, #2
 8002818:	f040 80d0 	bne.w	80029bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800281c:	4b72      	ldr	r3, [pc, #456]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 0203 	and.w	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282c:	429a      	cmp	r2, r3
 800282e:	d130      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	3b01      	subs	r3, #1
 800283c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d127      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d11f      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800285c:	2a07      	cmp	r2, #7
 800285e:	bf14      	ite	ne
 8002860:	2201      	movne	r2, #1
 8002862:	2200      	moveq	r2, #0
 8002864:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002866:	4293      	cmp	r3, r2
 8002868:	d113      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d109      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	3b01      	subs	r3, #1
 800288c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d06e      	beq.n	8002970 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d069      	beq.n	800296c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002898:	4b53      	ldr	r3, [pc, #332]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028a4:	4b50      	ldr	r3, [pc, #320]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0ad      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028b4:	4b4c      	ldr	r3, [pc, #304]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a4b      	ldr	r2, [pc, #300]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028c0:	f7fe fce0 	bl	8001284 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fcdc 	bl	8001284 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e09a      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028da:	4b43      	ldr	r3, [pc, #268]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e6:	4b40      	ldr	r3, [pc, #256]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	4b40      	ldr	r3, [pc, #256]	@ (80029ec <HAL_RCC_OscConfig+0x784>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028f6:	3a01      	subs	r2, #1
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002900:	0212      	lsls	r2, r2, #8
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002908:	0852      	lsrs	r2, r2, #1
 800290a:	3a01      	subs	r2, #1
 800290c:	0552      	lsls	r2, r2, #21
 800290e:	4311      	orrs	r1, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002914:	0852      	lsrs	r2, r2, #1
 8002916:	3a01      	subs	r2, #1
 8002918:	0652      	lsls	r2, r2, #25
 800291a:	4311      	orrs	r1, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002920:	0912      	lsrs	r2, r2, #4
 8002922:	0452      	lsls	r2, r2, #17
 8002924:	430a      	orrs	r2, r1
 8002926:	4930      	ldr	r1, [pc, #192]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002928:	4313      	orrs	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800292c:	4b2e      	ldr	r3, [pc, #184]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a2d      	ldr	r2, [pc, #180]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002936:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002938:	4b2b      	ldr	r3, [pc, #172]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a2a      	ldr	r2, [pc, #168]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002942:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002944:	f7fe fc9e 	bl	8001284 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe fc9a 	bl	8001284 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e058      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	4b22      	ldr	r3, [pc, #136]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800296a:	e050      	b.n	8002a0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e04f      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002970:	4b1d      	ldr	r3, [pc, #116]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d148      	bne.n	8002a0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800297c:	4b1a      	ldr	r3, [pc, #104]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a19      	ldr	r2, [pc, #100]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002988:	4b17      	ldr	r3, [pc, #92]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a16      	ldr	r2, [pc, #88]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800298e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002992:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002994:	f7fe fc76 	bl	8001284 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe fc72 	bl	8001284 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e030      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	4b0e      	ldr	r3, [pc, #56]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x734>
 80029ba:	e028      	b.n	8002a0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d023      	beq.n	8002a0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a08      	ldr	r2, [pc, #32]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80029c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7fe fc59 	bl	8001284 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d4:	e00c      	b.n	80029f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d6:	f7fe fc55 	bl	8001284 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d905      	bls.n	80029f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e013      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
 80029e8:	40021000 	.word	0x40021000
 80029ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f0:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_RCC_OscConfig+0x7b0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1ec      	bne.n	80029d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_RCC_OscConfig+0x7b0>)
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	4905      	ldr	r1, [pc, #20]	@ (8002a18 <HAL_RCC_OscConfig+0x7b0>)
 8002a02:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <HAL_RCC_OscConfig+0x7b4>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	60cb      	str	r3, [r1, #12]
 8002a08:	e001      	b.n	8002a0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	feeefffc 	.word	0xfeeefffc

08002a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0e7      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b75      	ldr	r3, [pc, #468]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d910      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b72      	ldr	r3, [pc, #456]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4970      	ldr	r1, [pc, #448]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b6e      	ldr	r3, [pc, #440]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0cf      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d010      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	4b66      	ldr	r3, [pc, #408]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d908      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a80:	4b63      	ldr	r3, [pc, #396]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4960      	ldr	r1, [pc, #384]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d04c      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d121      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0a6      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002abe:	4b54      	ldr	r3, [pc, #336]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d115      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e09a      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e08e      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e086      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b46      	ldr	r3, [pc, #280]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4943      	ldr	r1, [pc, #268]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b08:	f7fe fbbc 	bl	8001284 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7fe fbb8 	bl	8001284 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e06e      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b3a      	ldr	r3, [pc, #232]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	4b31      	ldr	r3, [pc, #196]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d208      	bcs.n	8002b66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b54:	4b2e      	ldr	r3, [pc, #184]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	492b      	ldr	r1, [pc, #172]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b66:	4b29      	ldr	r3, [pc, #164]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d210      	bcs.n	8002b96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b74:	4b25      	ldr	r3, [pc, #148]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 0207 	bic.w	r2, r3, #7
 8002b7c:	4923      	ldr	r1, [pc, #140]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b84:	4b21      	ldr	r3, [pc, #132]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e036      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	4918      	ldr	r1, [pc, #96]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc0:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4910      	ldr	r1, [pc, #64]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bd4:	f000 f824 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	490b      	ldr	r1, [pc, #44]	@ (8002c14 <HAL_RCC_ClockConfig+0x1f4>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	4a09      	ldr	r2, [pc, #36]	@ (8002c18 <HAL_RCC_ClockConfig+0x1f8>)
 8002bf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bf4:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <HAL_RCC_ClockConfig+0x1fc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe faf3 	bl	80011e4 <HAL_InitTick>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c02:	7afb      	ldrb	r3, [r7, #11]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08004d3c 	.word	0x08004d3c
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000004 	.word	0x20000004

08002c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	@ 0x24
 8002c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c38:	4b3b      	ldr	r3, [pc, #236]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x34>
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d121      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d11e      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c54:	4b34      	ldr	r3, [pc, #208]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c60:	4b31      	ldr	r3, [pc, #196]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e005      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c70:	4b2d      	ldr	r3, [pc, #180]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c98:	4b25      	ldr	r3, [pc, #148]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	e004      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ca4:	4b23      	ldr	r3, [pc, #140]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d134      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cae:	4b1e      	ldr	r3, [pc, #120]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d003      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0xac>
 8002cc4:	e005      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc8:	617b      	str	r3, [r7, #20]
      break;
 8002cca:	e005      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cce:	617b      	str	r3, [r7, #20]
      break;
 8002cd0:	e002      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	617b      	str	r3, [r7, #20]
      break;
 8002cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cd8:	4b13      	ldr	r3, [pc, #76]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ce6:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	fb03 f202 	mul.w	r2, r3, r2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	0e5b      	lsrs	r3, r3, #25
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d18:	69bb      	ldr	r3, [r7, #24]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	@ 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	08004d54 	.word	0x08004d54
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	007a1200 	.word	0x007a1200

08002d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d3c:	4b03      	ldr	r3, [pc, #12]	@ (8002d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000000 	.word	0x20000000

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d54:	f7ff fff0 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4904      	ldr	r1, [pc, #16]	@ (8002d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	08004d4c 	.word	0x08004d4c

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d80:	f7ff ffda 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0adb      	lsrs	r3, r3, #11
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4904      	ldr	r1, [pc, #16]	@ (8002da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	08004d4c 	.word	0x08004d4c

08002da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002db4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dc0:	f7ff f922 	bl	8002008 <HAL_PWREx_GetVoltageRange>
 8002dc4:	6178      	str	r0, [r7, #20]
 8002dc6:	e014      	b.n	8002df2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dc8:	4b25      	ldr	r3, [pc, #148]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dcc:	4a24      	ldr	r2, [pc, #144]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dd4:	4b22      	ldr	r3, [pc, #136]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002de0:	f7ff f912 	bl	8002008 <HAL_PWREx_GetVoltageRange>
 8002de4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002de6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dea:	4a1d      	ldr	r2, [pc, #116]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002df8:	d10b      	bne.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b80      	cmp	r3, #128	@ 0x80
 8002dfe:	d919      	bls.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e04:	d902      	bls.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e06:	2302      	movs	r3, #2
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	e013      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	e010      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b80      	cmp	r3, #128	@ 0x80
 8002e16:	d902      	bls.n	8002e1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e18:	2303      	movs	r3, #3
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	e00a      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b80      	cmp	r3, #128	@ 0x80
 8002e22:	d102      	bne.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e24:	2302      	movs	r3, #2
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	e004      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b70      	cmp	r3, #112	@ 0x70
 8002e2e:	d101      	bne.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e30:	2301      	movs	r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 0207 	bic.w	r2, r3, #7
 8002e3c:	4909      	ldr	r1, [pc, #36]	@ (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e44:	4b07      	ldr	r3, [pc, #28]	@ (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40022000 	.word	0x40022000

08002e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e70:	2300      	movs	r3, #0
 8002e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e74:	2300      	movs	r3, #0
 8002e76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d041      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e8c:	d02a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e92:	d824      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e98:	d008      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e9e:	d81e      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ea8:	d010      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002eaa:	e018      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eac:	4b86      	ldr	r3, [pc, #536]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a85      	ldr	r2, [pc, #532]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 facb 	bl	800345c <RCCEx_PLLSAI1_Config>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eca:	e00c      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3320      	adds	r3, #32
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fbb6 	bl	8003644 <RCCEx_PLLSAI2_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002edc:	e003      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eec:	4b76      	ldr	r3, [pc, #472]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002efa:	4973      	ldr	r1, [pc, #460]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f02:	e001      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d041      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f1c:	d02a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f22:	d824      	bhi.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f28:	d008      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f2e:	d81e      	bhi.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f38:	d010      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f3a:	e018      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f3c:	4b62      	ldr	r3, [pc, #392]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a61      	ldr	r2, [pc, #388]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f48:	e015      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fa83 	bl	800345c <RCCEx_PLLSAI1_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f5a:	e00c      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3320      	adds	r3, #32
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fb6e 	bl	8003644 <RCCEx_PLLSAI2_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f6c:	e003      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	74fb      	strb	r3, [r7, #19]
      break;
 8002f72:	e000      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f76:	7cfb      	ldrb	r3, [r7, #19]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f7c:	4b52      	ldr	r3, [pc, #328]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f8a:	494f      	ldr	r1, [pc, #316]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f92:	e001      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a0 	beq.w	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002faa:	4b47      	ldr	r3, [pc, #284]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	4b41      	ldr	r3, [pc, #260]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc4:	4a40      	ldr	r2, [pc, #256]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fcc:	4b3e      	ldr	r3, [pc, #248]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a3a      	ldr	r2, [pc, #232]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe f94c 	bl	8001284 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fee:	e009      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff0:	f7fe f948 	bl	8001284 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d902      	bls.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	74fb      	strb	r3, [r7, #19]
        break;
 8003002:	e005      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003004:	4b31      	ldr	r3, [pc, #196]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ef      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d15c      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003016:	4b2c      	ldr	r3, [pc, #176]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003020:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01f      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	429a      	cmp	r2, r3
 8003032:	d019      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003034:	4b24      	ldr	r3, [pc, #144]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800303e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003040:	4b21      	ldr	r3, [pc, #132]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003046:	4a20      	ldr	r2, [pc, #128]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003050:	4b1d      	ldr	r3, [pc, #116]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003056:	4a1c      	ldr	r2, [pc, #112]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003060:	4a19      	ldr	r2, [pc, #100]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fe f907 	bl	8001284 <HAL_GetTick>
 8003076:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003078:	e00b      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe f903 	bl	8001284 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d902      	bls.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	74fb      	strb	r3, [r7, #19]
            break;
 8003090:	e006      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003092:	4b0d      	ldr	r3, [pc, #52]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ec      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a6:	4b08      	ldr	r3, [pc, #32]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b6:	4904      	ldr	r1, [pc, #16]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030be:	e009      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	74bb      	strb	r3, [r7, #18]
 80030c4:	e006      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d4:	7c7b      	ldrb	r3, [r7, #17]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d105      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030da:	4b9e      	ldr	r3, [pc, #632]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030de:	4a9d      	ldr	r2, [pc, #628]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030f2:	4b98      	ldr	r3, [pc, #608]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f8:	f023 0203 	bic.w	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003100:	4994      	ldr	r1, [pc, #592]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003114:	4b8f      	ldr	r3, [pc, #572]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311a:	f023 020c 	bic.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003122:	498c      	ldr	r1, [pc, #560]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003136:	4b87      	ldr	r3, [pc, #540]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	4983      	ldr	r1, [pc, #524]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003158:	4b7e      	ldr	r3, [pc, #504]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	497b      	ldr	r1, [pc, #492]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800317a:	4b76      	ldr	r3, [pc, #472]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003188:	4972      	ldr	r1, [pc, #456]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800319c:	4b6d      	ldr	r3, [pc, #436]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031aa:	496a      	ldr	r1, [pc, #424]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031be:	4b65      	ldr	r3, [pc, #404]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031cc:	4961      	ldr	r1, [pc, #388]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ee:	4959      	ldr	r1, [pc, #356]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003202:	4b54      	ldr	r3, [pc, #336]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003208:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003210:	4950      	ldr	r1, [pc, #320]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003224:	4b4b      	ldr	r3, [pc, #300]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003232:	4948      	ldr	r1, [pc, #288]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003246:	4b43      	ldr	r3, [pc, #268]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003254:	493f      	ldr	r1, [pc, #252]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d028      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003268:	4b3a      	ldr	r3, [pc, #232]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003276:	4937      	ldr	r1, [pc, #220]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003286:	d106      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003288:	4b32      	ldr	r3, [pc, #200]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4a31      	ldr	r2, [pc, #196]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003292:	60d3      	str	r3, [r2, #12]
 8003294:	e011      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800329a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800329e:	d10c      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f8d8 	bl	800345c <RCCEx_PLLSAI1_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032b6:	7cfb      	ldrb	r3, [r7, #19]
 80032b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d028      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032c6:	4b23      	ldr	r3, [pc, #140]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d4:	491f      	ldr	r1, [pc, #124]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032e4:	d106      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032f0:	60d3      	str	r3, [r2, #12]
 80032f2:	e011      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	2101      	movs	r1, #1
 8003304:	4618      	mov	r0, r3
 8003306:	f000 f8a9 	bl	800345c <RCCEx_PLLSAI1_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02b      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003324:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003332:	4908      	ldr	r1, [pc, #32]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800333e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003342:	d109      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003344:	4b03      	ldr	r3, [pc, #12]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a02      	ldr	r2, [pc, #8]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800334e:	60d3      	str	r3, [r2, #12]
 8003350:	e014      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800335c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003360:	d10c      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f877 	bl	800345c <RCCEx_PLLSAI1_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02f      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003388:	4b2b      	ldr	r3, [pc, #172]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003396:	4928      	ldr	r1, [pc, #160]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	2102      	movs	r1, #2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f854 	bl	800345c <RCCEx_PLLSAI1_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	74bb      	strb	r3, [r7, #18]
 80033c2:	e011      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3320      	adds	r3, #32
 80033d2:	2102      	movs	r1, #2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f935 	bl	8003644 <RCCEx_PLLSAI2_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033f4:	4b10      	ldr	r3, [pc, #64]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003402:	490d      	ldr	r1, [pc, #52]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003416:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003426:	4904      	ldr	r1, [pc, #16]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800342e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003440:	4b05      	ldr	r3, [pc, #20]	@ (8003458 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a04      	ldr	r2, [pc, #16]	@ (8003458 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000

0800345c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800346a:	4b75      	ldr	r3, [pc, #468]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d018      	beq.n	80034a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003476:	4b72      	ldr	r3, [pc, #456]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0203 	and.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d10d      	bne.n	80034a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
       ||
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800348e:	4b6c      	ldr	r3, [pc, #432]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
       ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d047      	beq.n	8003532 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	e044      	b.n	8003532 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d018      	beq.n	80034e2 <RCCEx_PLLSAI1_Config+0x86>
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d825      	bhi.n	8003500 <RCCEx_PLLSAI1_Config+0xa4>
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d002      	beq.n	80034be <RCCEx_PLLSAI1_Config+0x62>
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d009      	beq.n	80034d0 <RCCEx_PLLSAI1_Config+0x74>
 80034bc:	e020      	b.n	8003500 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034be:	4b60      	ldr	r3, [pc, #384]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d11d      	bne.n	8003506 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ce:	e01a      	b.n	8003506 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d116      	bne.n	800350a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e0:	e013      	b.n	800350a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034e2:	4b57      	ldr	r3, [pc, #348]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ee:	4b54      	ldr	r3, [pc, #336]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034fe:	e006      	b.n	800350e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      break;
 8003504:	e004      	b.n	8003510 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003506:	bf00      	nop
 8003508:	e002      	b.n	8003510 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800350e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10d      	bne.n	8003532 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003516:	4b4a      	ldr	r3, [pc, #296]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	430b      	orrs	r3, r1
 800352c:	4944      	ldr	r1, [pc, #272]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d17d      	bne.n	8003634 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003538:	4b41      	ldr	r3, [pc, #260]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a40      	ldr	r2, [pc, #256]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003544:	f7fd fe9e 	bl	8001284 <HAL_GetTick>
 8003548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800354a:	e009      	b.n	8003560 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800354c:	f7fd fe9a 	bl	8001284 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d902      	bls.n	8003560 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	73fb      	strb	r3, [r7, #15]
        break;
 800355e:	e005      	b.n	800356c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003560:	4b37      	ldr	r3, [pc, #220]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ef      	bne.n	800354c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d160      	bne.n	8003634 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d111      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003578:	4b31      	ldr	r3, [pc, #196]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6892      	ldr	r2, [r2, #8]
 8003588:	0211      	lsls	r1, r2, #8
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68d2      	ldr	r2, [r2, #12]
 800358e:	0912      	lsrs	r2, r2, #4
 8003590:	0452      	lsls	r2, r2, #17
 8003592:	430a      	orrs	r2, r1
 8003594:	492a      	ldr	r1, [pc, #168]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003596:	4313      	orrs	r3, r2
 8003598:	610b      	str	r3, [r1, #16]
 800359a:	e027      	b.n	80035ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d112      	bne.n	80035c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035a2:	4b27      	ldr	r3, [pc, #156]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80035aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6892      	ldr	r2, [r2, #8]
 80035b2:	0211      	lsls	r1, r2, #8
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6912      	ldr	r2, [r2, #16]
 80035b8:	0852      	lsrs	r2, r2, #1
 80035ba:	3a01      	subs	r2, #1
 80035bc:	0552      	lsls	r2, r2, #21
 80035be:	430a      	orrs	r2, r1
 80035c0:	491f      	ldr	r1, [pc, #124]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	610b      	str	r3, [r1, #16]
 80035c6:	e011      	b.n	80035ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80035d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6892      	ldr	r2, [r2, #8]
 80035d8:	0211      	lsls	r1, r2, #8
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6952      	ldr	r2, [r2, #20]
 80035de:	0852      	lsrs	r2, r2, #1
 80035e0:	3a01      	subs	r2, #1
 80035e2:	0652      	lsls	r2, r2, #25
 80035e4:	430a      	orrs	r2, r1
 80035e6:	4916      	ldr	r1, [pc, #88]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035ec:	4b14      	ldr	r3, [pc, #80]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a13      	ldr	r2, [pc, #76]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fd fe44 	bl	8001284 <HAL_GetTick>
 80035fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035fe:	e009      	b.n	8003614 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003600:	f7fd fe40 	bl	8001284 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d902      	bls.n	8003614 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	73fb      	strb	r3, [r7, #15]
          break;
 8003612:	e005      	b.n	8003620 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003614:	4b0a      	ldr	r3, [pc, #40]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ef      	beq.n	8003600 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003626:	4b06      	ldr	r3, [pc, #24]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	4904      	ldr	r1, [pc, #16]	@ (8003640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	4313      	orrs	r3, r2
 8003632:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003634:	7bfb      	ldrb	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000

08003644 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003652:	4b6a      	ldr	r3, [pc, #424]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d018      	beq.n	8003690 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800365e:	4b67      	ldr	r3, [pc, #412]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0203 	and.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d10d      	bne.n	800368a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
       ||
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003676:	4b61      	ldr	r3, [pc, #388]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
       ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d047      	beq.n	800371a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
 800368e:	e044      	b.n	800371a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d018      	beq.n	80036ca <RCCEx_PLLSAI2_Config+0x86>
 8003698:	2b03      	cmp	r3, #3
 800369a:	d825      	bhi.n	80036e8 <RCCEx_PLLSAI2_Config+0xa4>
 800369c:	2b01      	cmp	r3, #1
 800369e:	d002      	beq.n	80036a6 <RCCEx_PLLSAI2_Config+0x62>
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d009      	beq.n	80036b8 <RCCEx_PLLSAI2_Config+0x74>
 80036a4:	e020      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036a6:	4b55      	ldr	r3, [pc, #340]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11d      	bne.n	80036ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b6:	e01a      	b.n	80036ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036b8:	4b50      	ldr	r3, [pc, #320]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d116      	bne.n	80036f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c8:	e013      	b.n	80036f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ca:	4b4c      	ldr	r3, [pc, #304]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036d6:	4b49      	ldr	r3, [pc, #292]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036e6:	e006      	b.n	80036f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      break;
 80036ec:	e004      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ee:	bf00      	nop
 80036f0:	e002      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036fe:	4b3f      	ldr	r3, [pc, #252]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	3b01      	subs	r3, #1
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	430b      	orrs	r3, r1
 8003714:	4939      	ldr	r1, [pc, #228]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003716:	4313      	orrs	r3, r2
 8003718:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d167      	bne.n	80037f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003720:	4b36      	ldr	r3, [pc, #216]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a35      	ldr	r2, [pc, #212]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800372a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800372c:	f7fd fdaa 	bl	8001284 <HAL_GetTick>
 8003730:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003732:	e009      	b.n	8003748 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003734:	f7fd fda6 	bl	8001284 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d902      	bls.n	8003748 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	73fb      	strb	r3, [r7, #15]
        break;
 8003746:	e005      	b.n	8003754 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003748:	4b2c      	ldr	r3, [pc, #176]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ef      	bne.n	8003734 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d14a      	bne.n	80037f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d111      	bne.n	8003784 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003760:	4b26      	ldr	r3, [pc, #152]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6892      	ldr	r2, [r2, #8]
 8003770:	0211      	lsls	r1, r2, #8
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68d2      	ldr	r2, [r2, #12]
 8003776:	0912      	lsrs	r2, r2, #4
 8003778:	0452      	lsls	r2, r2, #17
 800377a:	430a      	orrs	r2, r1
 800377c:	491f      	ldr	r1, [pc, #124]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800377e:	4313      	orrs	r3, r2
 8003780:	614b      	str	r3, [r1, #20]
 8003782:	e011      	b.n	80037a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003784:	4b1d      	ldr	r3, [pc, #116]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800378c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6892      	ldr	r2, [r2, #8]
 8003794:	0211      	lsls	r1, r2, #8
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6912      	ldr	r2, [r2, #16]
 800379a:	0852      	lsrs	r2, r2, #1
 800379c:	3a01      	subs	r2, #1
 800379e:	0652      	lsls	r2, r2, #25
 80037a0:	430a      	orrs	r2, r1
 80037a2:	4916      	ldr	r1, [pc, #88]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037a8:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a13      	ldr	r2, [pc, #76]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b4:	f7fd fd66 	bl	8001284 <HAL_GetTick>
 80037b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037ba:	e009      	b.n	80037d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037bc:	f7fd fd62 	bl	8001284 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d902      	bls.n	80037d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	73fb      	strb	r3, [r7, #15]
          break;
 80037ce:	e005      	b.n	80037dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037d0:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ef      	beq.n	80037bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037e2:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	4904      	ldr	r1, [pc, #16]	@ (80037fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000

08003800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e095      	b.n	800393e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003822:	d009      	beq.n	8003838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	61da      	str	r2, [r3, #28]
 800382a:	e005      	b.n	8003838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd fa96 	bl	8000d84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800386e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003878:	d902      	bls.n	8003880 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e002      	b.n	8003886 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003880:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003884:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800388e:	d007      	beq.n	80038a0 <HAL_SPI_Init+0xa0>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003898:	d002      	beq.n	80038a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e2:	ea42 0103 	orr.w	r1, r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	0c1b      	lsrs	r3, r3, #16
 80038fc:	f003 0204 	and.w	r2, r3, #4
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800391c:	ea42 0103 	orr.w	r1, r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e040      	b.n	80039da <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d106      	bne.n	800396e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7fd fa4f 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2224      	movs	r2, #36	@ 0x24
 8003972:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fb69 	bl	8004064 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f8ae 	bl	8003af4 <UART_SetConfig>
 8003998:	4603      	mov	r3, r0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e01b      	b.n	80039da <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fbe8 	bl	80041a8 <UART_CheckIdleState>
 80039d8:	4603      	mov	r3, r0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b08a      	sub	sp, #40	@ 0x28
 80039e6:	af02      	add	r7, sp, #8
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	4613      	mov	r3, r2
 80039f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d177      	bne.n	8003aea <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_UART_Transmit+0x24>
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e070      	b.n	8003aec <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2221      	movs	r2, #33	@ 0x21
 8003a16:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a18:	f7fd fc34 	bl	8001284 <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	88fa      	ldrh	r2, [r7, #6]
 8003a2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a36:	d108      	bne.n	8003a4a <HAL_UART_Transmit+0x68>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d104      	bne.n	8003a4a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	e003      	b.n	8003a52 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a52:	e02f      	b.n	8003ab4 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2180      	movs	r1, #128	@ 0x80
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 fc4a 	bl	80042f8 <UART_WaitOnFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e03b      	b.n	8003aec <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a86:	b292      	uxth	r2, r2
 8003a88:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e007      	b.n	8003aa2 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1c9      	bne.n	8003a54 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2140      	movs	r1, #64	@ 0x40
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fc14 	bl	80042f8 <UART_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d004      	beq.n	8003ae0 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e005      	b.n	8003aec <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e000      	b.n	8003aec <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003aea:	2302      	movs	r3, #2
  }
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af8:	b08a      	sub	sp, #40	@ 0x28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4ba4      	ldr	r3, [pc, #656]	@ (8003db4 <UART_SetConfig+0x2c0>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a99      	ldr	r2, [pc, #612]	@ (8003db8 <UART_SetConfig+0x2c4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d004      	beq.n	8003b60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b70:	430a      	orrs	r2, r1
 8003b72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a90      	ldr	r2, [pc, #576]	@ (8003dbc <UART_SetConfig+0x2c8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d126      	bne.n	8003bcc <UART_SetConfig+0xd8>
 8003b7e:	4b90      	ldr	r3, [pc, #576]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d81b      	bhi.n	8003bc4 <UART_SetConfig+0xd0>
 8003b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b94 <UART_SetConfig+0xa0>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bb5 	.word	0x08003bb5
 8003b9c:	08003bad 	.word	0x08003bad
 8003ba0:	08003bbd 	.word	0x08003bbd
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003baa:	e116      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003bac:	2302      	movs	r3, #2
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb2:	e112      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bba:	e10e      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc2:	e10a      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bca:	e106      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a7c      	ldr	r2, [pc, #496]	@ (8003dc4 <UART_SetConfig+0x2d0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d138      	bne.n	8003c48 <UART_SetConfig+0x154>
 8003bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d82d      	bhi.n	8003c40 <UART_SetConfig+0x14c>
 8003be4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bec <UART_SetConfig+0xf8>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003c41 	.word	0x08003c41
 8003bf4:	08003c41 	.word	0x08003c41
 8003bf8:	08003c41 	.word	0x08003c41
 8003bfc:	08003c31 	.word	0x08003c31
 8003c00:	08003c41 	.word	0x08003c41
 8003c04:	08003c41 	.word	0x08003c41
 8003c08:	08003c41 	.word	0x08003c41
 8003c0c:	08003c29 	.word	0x08003c29
 8003c10:	08003c41 	.word	0x08003c41
 8003c14:	08003c41 	.word	0x08003c41
 8003c18:	08003c41 	.word	0x08003c41
 8003c1c:	08003c39 	.word	0x08003c39
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c26:	e0d8      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2e:	e0d4      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c30:	2304      	movs	r3, #4
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c36:	e0d0      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c38:	2308      	movs	r3, #8
 8003c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c3e:	e0cc      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c40:	2310      	movs	r3, #16
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c46:	e0c8      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a5e      	ldr	r2, [pc, #376]	@ (8003dc8 <UART_SetConfig+0x2d4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d125      	bne.n	8003c9e <UART_SetConfig+0x1aa>
 8003c52:	4b5b      	ldr	r3, [pc, #364]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c5c:	2b30      	cmp	r3, #48	@ 0x30
 8003c5e:	d016      	beq.n	8003c8e <UART_SetConfig+0x19a>
 8003c60:	2b30      	cmp	r3, #48	@ 0x30
 8003c62:	d818      	bhi.n	8003c96 <UART_SetConfig+0x1a2>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d00a      	beq.n	8003c7e <UART_SetConfig+0x18a>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d814      	bhi.n	8003c96 <UART_SetConfig+0x1a2>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <UART_SetConfig+0x182>
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d008      	beq.n	8003c86 <UART_SetConfig+0x192>
 8003c74:	e00f      	b.n	8003c96 <UART_SetConfig+0x1a2>
 8003c76:	2300      	movs	r3, #0
 8003c78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7c:	e0ad      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c84:	e0a9      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c86:	2304      	movs	r3, #4
 8003c88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8c:	e0a5      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c8e:	2308      	movs	r3, #8
 8003c90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c94:	e0a1      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c96:	2310      	movs	r3, #16
 8003c98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c9c:	e09d      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a4a      	ldr	r2, [pc, #296]	@ (8003dcc <UART_SetConfig+0x2d8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d125      	bne.n	8003cf4 <UART_SetConfig+0x200>
 8003ca8:	4b45      	ldr	r3, [pc, #276]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003cb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cb4:	d016      	beq.n	8003ce4 <UART_SetConfig+0x1f0>
 8003cb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cb8:	d818      	bhi.n	8003cec <UART_SetConfig+0x1f8>
 8003cba:	2b80      	cmp	r3, #128	@ 0x80
 8003cbc:	d00a      	beq.n	8003cd4 <UART_SetConfig+0x1e0>
 8003cbe:	2b80      	cmp	r3, #128	@ 0x80
 8003cc0:	d814      	bhi.n	8003cec <UART_SetConfig+0x1f8>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <UART_SetConfig+0x1d8>
 8003cc6:	2b40      	cmp	r3, #64	@ 0x40
 8003cc8:	d008      	beq.n	8003cdc <UART_SetConfig+0x1e8>
 8003cca:	e00f      	b.n	8003cec <UART_SetConfig+0x1f8>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cd2:	e082      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cda:	e07e      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce2:	e07a      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cea:	e076      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003cec:	2310      	movs	r3, #16
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf2:	e072      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a35      	ldr	r2, [pc, #212]	@ (8003dd0 <UART_SetConfig+0x2dc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d12a      	bne.n	8003d54 <UART_SetConfig+0x260>
 8003cfe:	4b30      	ldr	r3, [pc, #192]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d0c:	d01a      	beq.n	8003d44 <UART_SetConfig+0x250>
 8003d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d12:	d81b      	bhi.n	8003d4c <UART_SetConfig+0x258>
 8003d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d18:	d00c      	beq.n	8003d34 <UART_SetConfig+0x240>
 8003d1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d1e:	d815      	bhi.n	8003d4c <UART_SetConfig+0x258>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <UART_SetConfig+0x238>
 8003d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d28:	d008      	beq.n	8003d3c <UART_SetConfig+0x248>
 8003d2a:	e00f      	b.n	8003d4c <UART_SetConfig+0x258>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d32:	e052      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d34:	2302      	movs	r3, #2
 8003d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3a:	e04e      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d42:	e04a      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d44:	2308      	movs	r3, #8
 8003d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d4a:	e046      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d52:	e042      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a17      	ldr	r2, [pc, #92]	@ (8003db8 <UART_SetConfig+0x2c4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d13a      	bne.n	8003dd4 <UART_SetConfig+0x2e0>
 8003d5e:	4b18      	ldr	r3, [pc, #96]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d6c:	d01a      	beq.n	8003da4 <UART_SetConfig+0x2b0>
 8003d6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d72:	d81b      	bhi.n	8003dac <UART_SetConfig+0x2b8>
 8003d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d78:	d00c      	beq.n	8003d94 <UART_SetConfig+0x2a0>
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d7e:	d815      	bhi.n	8003dac <UART_SetConfig+0x2b8>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <UART_SetConfig+0x298>
 8003d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d88:	d008      	beq.n	8003d9c <UART_SetConfig+0x2a8>
 8003d8a:	e00f      	b.n	8003dac <UART_SetConfig+0x2b8>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d92:	e022      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d94:	2302      	movs	r3, #2
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9a:	e01e      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da2:	e01a      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003da4:	2308      	movs	r3, #8
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003daa:	e016      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003dac:	2310      	movs	r3, #16
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db2:	e012      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003db4:	efff69f3 	.word	0xefff69f3
 8003db8:	40008000 	.word	0x40008000
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40004400 	.word	0x40004400
 8003dc8:	40004800 	.word	0x40004800
 8003dcc:	40004c00 	.word	0x40004c00
 8003dd0:	40005000 	.word	0x40005000
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a9f      	ldr	r2, [pc, #636]	@ (800405c <UART_SetConfig+0x568>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d17a      	bne.n	8003eda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003de4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d824      	bhi.n	8003e36 <UART_SetConfig+0x342>
 8003dec:	a201      	add	r2, pc, #4	@ (adr r2, 8003df4 <UART_SetConfig+0x300>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e37 	.word	0x08003e37
 8003dfc:	08003e21 	.word	0x08003e21
 8003e00:	08003e37 	.word	0x08003e37
 8003e04:	08003e27 	.word	0x08003e27
 8003e08:	08003e37 	.word	0x08003e37
 8003e0c:	08003e37 	.word	0x08003e37
 8003e10:	08003e37 	.word	0x08003e37
 8003e14:	08003e2f 	.word	0x08003e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e18:	f7fe ff9a 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8003e1c:	61f8      	str	r0, [r7, #28]
        break;
 8003e1e:	e010      	b.n	8003e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e20:	4b8f      	ldr	r3, [pc, #572]	@ (8004060 <UART_SetConfig+0x56c>)
 8003e22:	61fb      	str	r3, [r7, #28]
        break;
 8003e24:	e00d      	b.n	8003e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e26:	f7fe fefb 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8003e2a:	61f8      	str	r0, [r7, #28]
        break;
 8003e2c:	e009      	b.n	8003e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e32:	61fb      	str	r3, [r7, #28]
        break;
 8003e34:	e005      	b.n	8003e42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80fb 	beq.w	8004040 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	4413      	add	r3, r2
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d305      	bcc.n	8003e66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d903      	bls.n	8003e6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e6c:	e0e8      	b.n	8004040 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	2200      	movs	r2, #0
 8003e72:	461c      	mov	r4, r3
 8003e74:	4615      	mov	r5, r2
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	022b      	lsls	r3, r5, #8
 8003e80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e84:	0222      	lsls	r2, r4, #8
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	6849      	ldr	r1, [r1, #4]
 8003e8a:	0849      	lsrs	r1, r1, #1
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	4688      	mov	r8, r1
 8003e90:	4681      	mov	r9, r0
 8003e92:	eb12 0a08 	adds.w	sl, r2, r8
 8003e96:	eb43 0b09 	adc.w	fp, r3, r9
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ea8:	4650      	mov	r0, sl
 8003eaa:	4659      	mov	r1, fp
 8003eac:	f7fc f96c 	bl	8000188 <__aeabi_uldivmod>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ebe:	d308      	bcc.n	8003ed2 <UART_SetConfig+0x3de>
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ec6:	d204      	bcs.n	8003ed2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	60da      	str	r2, [r3, #12]
 8003ed0:	e0b6      	b.n	8004040 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ed8:	e0b2      	b.n	8004040 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee2:	d15e      	bne.n	8003fa2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d828      	bhi.n	8003f3e <UART_SetConfig+0x44a>
 8003eec:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef4 <UART_SetConfig+0x400>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f29 	.word	0x08003f29
 8003f00:	08003f3f 	.word	0x08003f3f
 8003f04:	08003f2f 	.word	0x08003f2f
 8003f08:	08003f3f 	.word	0x08003f3f
 8003f0c:	08003f3f 	.word	0x08003f3f
 8003f10:	08003f3f 	.word	0x08003f3f
 8003f14:	08003f37 	.word	0x08003f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7fe ff1a 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	61f8      	str	r0, [r7, #28]
        break;
 8003f1e:	e014      	b.n	8003f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f20:	f7fe ff2c 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8003f24:	61f8      	str	r0, [r7, #28]
        break;
 8003f26:	e010      	b.n	8003f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f28:	4b4d      	ldr	r3, [pc, #308]	@ (8004060 <UART_SetConfig+0x56c>)
 8003f2a:	61fb      	str	r3, [r7, #28]
        break;
 8003f2c:	e00d      	b.n	8003f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2e:	f7fe fe77 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8003f32:	61f8      	str	r0, [r7, #28]
        break;
 8003f34:	e009      	b.n	8003f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f3a:	61fb      	str	r3, [r7, #28]
        break;
 8003f3c:	e005      	b.n	8003f4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d077      	beq.n	8004040 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005a      	lsls	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	441a      	add	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b0f      	cmp	r3, #15
 8003f6a:	d916      	bls.n	8003f9a <UART_SetConfig+0x4a6>
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f72:	d212      	bcs.n	8003f9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f023 030f 	bic.w	r3, r3, #15
 8003f7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	8afb      	ldrh	r3, [r7, #22]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	8afa      	ldrh	r2, [r7, #22]
 8003f96:	60da      	str	r2, [r3, #12]
 8003f98:	e052      	b.n	8004040 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fa0:	e04e      	b.n	8004040 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d827      	bhi.n	8003ffa <UART_SetConfig+0x506>
 8003faa:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb0 <UART_SetConfig+0x4bc>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08003fdd 	.word	0x08003fdd
 8003fb8:	08003fe5 	.word	0x08003fe5
 8003fbc:	08003ffb 	.word	0x08003ffb
 8003fc0:	08003feb 	.word	0x08003feb
 8003fc4:	08003ffb 	.word	0x08003ffb
 8003fc8:	08003ffb 	.word	0x08003ffb
 8003fcc:	08003ffb 	.word	0x08003ffb
 8003fd0:	08003ff3 	.word	0x08003ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd4:	f7fe febc 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8003fd8:	61f8      	str	r0, [r7, #28]
        break;
 8003fda:	e014      	b.n	8004006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fdc:	f7fe fece 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8003fe0:	61f8      	str	r0, [r7, #28]
        break;
 8003fe2:	e010      	b.n	8004006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8004060 <UART_SetConfig+0x56c>)
 8003fe6:	61fb      	str	r3, [r7, #28]
        break;
 8003fe8:	e00d      	b.n	8004006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fea:	f7fe fe19 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8003fee:	61f8      	str	r0, [r7, #28]
        break;
 8003ff0:	e009      	b.n	8004006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ff6:	61fb      	str	r3, [r7, #28]
        break;
 8003ff8:	e005      	b.n	8004006 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004004:	bf00      	nop
    }

    if (pclk != 0U)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d019      	beq.n	8004040 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	085a      	lsrs	r2, r3, #1
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	441a      	add	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2b0f      	cmp	r3, #15
 8004024:	d909      	bls.n	800403a <UART_SetConfig+0x546>
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402c:	d205      	bcs.n	800403a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60da      	str	r2, [r3, #12]
 8004038:	e002      	b.n	8004040 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800404c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004050:	4618      	mov	r0, r3
 8004052:	3728      	adds	r7, #40	@ 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800405a:	bf00      	nop
 800405c:	40008000 	.word	0x40008000
 8004060:	00f42400 	.word	0x00f42400

08004064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01a      	beq.n	800417a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004162:	d10a      	bne.n	800417a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	605a      	str	r2, [r3, #4]
  }
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b098      	sub	sp, #96	@ 0x60
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041b8:	f7fd f864 	bl	8001284 <HAL_GetTick>
 80041bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d12e      	bne.n	800422a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d4:	2200      	movs	r2, #0
 80041d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f88c 	bl	80042f8 <UART_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d021      	beq.n	800422a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004204:	647b      	str	r3, [r7, #68]	@ 0x44
 8004206:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800420a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e6      	bne.n	80041e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e062      	b.n	80042f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b04      	cmp	r3, #4
 8004236:	d149      	bne.n	80042cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004238:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004240:	2200      	movs	r2, #0
 8004242:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f856 	bl	80042f8 <UART_WaitOnFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d03c      	beq.n	80042cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	623b      	str	r3, [r7, #32]
   return(result);
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004270:	633b      	str	r3, [r7, #48]	@ 0x30
 8004272:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800427e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e6      	bne.n	8004252 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3308      	adds	r3, #8
 800428a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	60fb      	str	r3, [r7, #12]
   return(result);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3308      	adds	r3, #8
 80042a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042a4:	61fa      	str	r2, [r7, #28]
 80042a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	69b9      	ldr	r1, [r7, #24]
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	617b      	str	r3, [r7, #20]
   return(result);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e5      	bne.n	8004284 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e011      	b.n	80042f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3758      	adds	r7, #88	@ 0x58
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004308:	e04f      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004310:	d04b      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fc ffb7 	bl	8001284 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <UART_WaitOnFlagUntilTimeout+0x30>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e04e      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d037      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b80      	cmp	r3, #128	@ 0x80
 800433e:	d034      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b40      	cmp	r3, #64	@ 0x40
 8004344:	d031      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b08      	cmp	r3, #8
 8004352:	d110      	bne.n	8004376 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2208      	movs	r2, #8
 800435a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f838 	bl	80043d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2208      	movs	r2, #8
 8004366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e029      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004384:	d111      	bne.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800438e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f81e 	bl	80043d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e00f      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4013      	ands	r3, r2
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	bf0c      	ite	eq
 80043ba:	2301      	moveq	r3, #1
 80043bc:	2300      	movne	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d0a0      	beq.n	800430a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b095      	sub	sp, #84	@ 0x54
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80043fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e6      	bne.n	80043da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	61fb      	str	r3, [r7, #28]
   return(result);
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3308      	adds	r3, #8
 800442a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800442c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800442e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e5      	bne.n	800440c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004444:	2b01      	cmp	r3, #1
 8004446:	d118      	bne.n	800447a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	60bb      	str	r3, [r7, #8]
   return(result);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f023 0310 	bic.w	r3, r3, #16
 800445c:	647b      	str	r3, [r7, #68]	@ 0x44
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6979      	ldr	r1, [r7, #20]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	613b      	str	r3, [r7, #16]
   return(result);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e6      	bne.n	8004448 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800448e:	bf00      	nop
 8004490:	3754      	adds	r7, #84	@ 0x54
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800449a:	b084      	sub	sp, #16
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	f107 001c 	add.w	r0, r7, #28
 80044a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fa69 	bl	8004990 <USB_CoreReset>
 80044be:	4603      	mov	r3, r0
 80044c0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80044c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80044d6:	e005      	b.n	80044e4 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044f0:	b004      	add	sp, #16
 80044f2:	4770      	bx	lr

080044f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f023 0201 	bic.w	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	460b      	mov	r3, r1
 8004520:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d115      	bne.n	8004564 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004544:	200a      	movs	r0, #10
 8004546:	f7fc fea9 	bl	800129c <HAL_Delay>
      ms += 10U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	330a      	adds	r3, #10
 800454e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fa0f 	bl	8004974 <USB_GetMode>
 8004556:	4603      	mov	r3, r0
 8004558:	2b01      	cmp	r3, #1
 800455a:	d01e      	beq.n	800459a <USB_SetCurrentMode+0x84>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004560:	d9f0      	bls.n	8004544 <USB_SetCurrentMode+0x2e>
 8004562:	e01a      	b.n	800459a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d115      	bne.n	8004596 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004576:	200a      	movs	r0, #10
 8004578:	f7fc fe90 	bl	800129c <HAL_Delay>
      ms += 10U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	330a      	adds	r3, #10
 8004580:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f9f6 	bl	8004974 <USB_GetMode>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d005      	beq.n	800459a <USB_SetCurrentMode+0x84>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2bc7      	cmp	r3, #199	@ 0xc7
 8004592:	d9f0      	bls.n	8004576 <USB_SetCurrentMode+0x60>
 8004594:	e001      	b.n	800459a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e005      	b.n	80045a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2bc8      	cmp	r3, #200	@ 0xc8
 800459e:	d101      	bne.n	80045a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045b0:	b084      	sub	sp, #16
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b086      	sub	sp, #24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80045be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045ca:	2300      	movs	r3, #0
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	e009      	b.n	80045e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3340      	adds	r3, #64	@ 0x40
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	2200      	movs	r2, #0
 80045dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3301      	adds	r3, #1
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b0e      	cmp	r3, #14
 80045e8:	d9f2      	bls.n	80045d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d11c      	bne.n	800462c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004600:	f043 0302 	orr.w	r3, r3, #2
 8004604:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	e005      	b.n	8004638 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004630:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800463e:	461a      	mov	r2, r3
 8004640:	2300      	movs	r3, #0
 8004642:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004644:	2103      	movs	r1, #3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f95a 	bl	8004900 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800464c:	2110      	movs	r1, #16
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f8f6 	bl	8004840 <USB_FlushTxFifo>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f920 	bl	80048a4 <USB_FlushRxFifo>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004674:	461a      	mov	r2, r3
 8004676:	2300      	movs	r3, #0
 8004678:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004680:	461a      	mov	r2, r3
 8004682:	2300      	movs	r3, #0
 8004684:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800468c:	461a      	mov	r2, r3
 800468e:	2300      	movs	r3, #0
 8004690:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	e043      	b.n	8004720 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046ae:	d118      	bne.n	80046e2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c2:	461a      	mov	r2, r3
 80046c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e013      	b.n	80046f4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d8:	461a      	mov	r2, r3
 80046da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	e008      	b.n	80046f4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ee:	461a      	mov	r2, r3
 80046f0:	2300      	movs	r3, #0
 80046f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004700:	461a      	mov	r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004712:	461a      	mov	r2, r3
 8004714:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004718:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	3301      	adds	r3, #1
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004724:	461a      	mov	r2, r3
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4293      	cmp	r3, r2
 800472a:	d3b5      	bcc.n	8004698 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	e043      	b.n	80047ba <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004748:	d118      	bne.n	800477c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800475c:	461a      	mov	r2, r3
 800475e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	e013      	b.n	800478e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004772:	461a      	mov	r2, r3
 8004774:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e008      	b.n	800478e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004788:	461a      	mov	r2, r3
 800478a:	2300      	movs	r3, #0
 800478c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479a:	461a      	mov	r2, r3
 800479c:	2300      	movs	r3, #0
 800479e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ac:	461a      	mov	r2, r3
 80047ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	3301      	adds	r3, #1
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047be:	461a      	mov	r2, r3
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d3b5      	bcc.n	8004732 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80047e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	f043 0210 	orr.w	r2, r3, #16
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699a      	ldr	r2, [r3, #24]
 80047f8:	4b10      	ldr	r3, [pc, #64]	@ (800483c <USB_DevInit+0x28c>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004800:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f043 0208 	orr.w	r2, r3, #8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004814:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004818:	2b01      	cmp	r3, #1
 800481a:	d107      	bne.n	800482c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004824:	f043 0304 	orr.w	r3, r3, #4
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800482c:	7dfb      	ldrb	r3, [r7, #23]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004838:	b004      	add	sp, #16
 800483a:	4770      	bx	lr
 800483c:	803c3800 	.word	0x803c3800

08004840 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3301      	adds	r3, #1
 8004852:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800485a:	d901      	bls.n	8004860 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e01b      	b.n	8004898 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	daf2      	bge.n	800484e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	019b      	lsls	r3, r3, #6
 8004870:	f043 0220 	orr.w	r2, r3, #32
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3301      	adds	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004884:	d901      	bls.n	800488a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e006      	b.n	8004898 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b20      	cmp	r3, #32
 8004894:	d0f0      	beq.n	8004878 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3301      	adds	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048bc:	d901      	bls.n	80048c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e018      	b.n	80048f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	daf2      	bge.n	80048b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2210      	movs	r2, #16
 80048d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3301      	adds	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048e0:	d901      	bls.n	80048e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e006      	b.n	80048f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d0f0      	beq.n	80048d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	68f9      	ldr	r1, [r7, #12]
 800491c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004920:	4313      	orrs	r3, r2
 8004922:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004932:	b480      	push	{r7}
 8004934:	b085      	sub	sp, #20
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800494c:	f023 0303 	bic.w	r3, r3, #3
 8004950:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004960:	f043 0302 	orr.w	r3, r3, #2
 8004964:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f003 0301 	and.w	r3, r3, #1
}
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3301      	adds	r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049a8:	d901      	bls.n	80049ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e01b      	b.n	80049e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	daf2      	bge.n	800499c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f043 0201 	orr.w	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3301      	adds	r3, #1
 80049ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049d2:	d901      	bls.n	80049d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e006      	b.n	80049e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d0f0      	beq.n	80049c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <memset>:
 80049f2:	4402      	add	r2, r0
 80049f4:	4603      	mov	r3, r0
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d100      	bne.n	80049fc <memset+0xa>
 80049fa:	4770      	bx	lr
 80049fc:	f803 1b01 	strb.w	r1, [r3], #1
 8004a00:	e7f9      	b.n	80049f6 <memset+0x4>
	...

08004a04 <__libc_init_array>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	4b0d      	ldr	r3, [pc, #52]	@ (8004a3c <__libc_init_array+0x38>)
 8004a08:	4d0d      	ldr	r5, [pc, #52]	@ (8004a40 <__libc_init_array+0x3c>)
 8004a0a:	1b5b      	subs	r3, r3, r5
 8004a0c:	109c      	asrs	r4, r3, #2
 8004a0e:	2600      	movs	r6, #0
 8004a10:	42a6      	cmp	r6, r4
 8004a12:	d109      	bne.n	8004a28 <__libc_init_array+0x24>
 8004a14:	f000 f978 	bl	8004d08 <_init>
 8004a18:	4d0a      	ldr	r5, [pc, #40]	@ (8004a44 <__libc_init_array+0x40>)
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a48 <__libc_init_array+0x44>)
 8004a1c:	1b5b      	subs	r3, r3, r5
 8004a1e:	109c      	asrs	r4, r3, #2
 8004a20:	2600      	movs	r6, #0
 8004a22:	42a6      	cmp	r6, r4
 8004a24:	d105      	bne.n	8004a32 <__libc_init_array+0x2e>
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
 8004a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2c:	4798      	blx	r3
 8004a2e:	3601      	adds	r6, #1
 8004a30:	e7ee      	b.n	8004a10 <__libc_init_array+0xc>
 8004a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a36:	4798      	blx	r3
 8004a38:	3601      	adds	r6, #1
 8004a3a:	e7f2      	b.n	8004a22 <__libc_init_array+0x1e>
 8004a3c:	08004d8c 	.word	0x08004d8c
 8004a40:	08004d8c 	.word	0x08004d8c
 8004a44:	08004d8c 	.word	0x08004d8c
 8004a48:	08004d90 	.word	0x08004d90

08004a4c <__udivmoddi4>:
 8004a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	468c      	mov	ip, r1
 8004a52:	468e      	mov	lr, r1
 8004a54:	9e08      	ldr	r6, [sp, #32]
 8004a56:	4615      	mov	r5, r2
 8004a58:	4604      	mov	r4, r0
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 80d0 	bne.w	8004c02 <__udivmoddi4+0x1b6>
 8004a62:	4572      	cmp	r2, lr
 8004a64:	d947      	bls.n	8004af6 <__udivmoddi4+0xaa>
 8004a66:	fab2 f782 	clz	r7, r2
 8004a6a:	b14f      	cbz	r7, 8004a80 <__udivmoddi4+0x34>
 8004a6c:	f1c7 0320 	rsb	r3, r7, #32
 8004a70:	fa0e fc07 	lsl.w	ip, lr, r7
 8004a74:	fa20 f303 	lsr.w	r3, r0, r3
 8004a78:	40bd      	lsls	r5, r7
 8004a7a:	ea43 0c0c 	orr.w	ip, r3, ip
 8004a7e:	40bc      	lsls	r4, r7
 8004a80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004a84:	b2a8      	uxth	r0, r5
 8004a86:	fbbc f8fe 	udiv	r8, ip, lr
 8004a8a:	0c23      	lsrs	r3, r4, #16
 8004a8c:	fb0e cc18 	mls	ip, lr, r8, ip
 8004a90:	fb08 f900 	mul.w	r9, r8, r0
 8004a94:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8004a98:	4599      	cmp	r9, r3
 8004a9a:	d928      	bls.n	8004aee <__udivmoddi4+0xa2>
 8004a9c:	18eb      	adds	r3, r5, r3
 8004a9e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8004aa2:	d204      	bcs.n	8004aae <__udivmoddi4+0x62>
 8004aa4:	4599      	cmp	r9, r3
 8004aa6:	d902      	bls.n	8004aae <__udivmoddi4+0x62>
 8004aa8:	f1a8 0202 	sub.w	r2, r8, #2
 8004aac:	442b      	add	r3, r5
 8004aae:	eba3 0309 	sub.w	r3, r3, r9
 8004ab2:	b2a4      	uxth	r4, r4
 8004ab4:	fbb3 fcfe 	udiv	ip, r3, lr
 8004ab8:	fb0e 331c 	mls	r3, lr, ip, r3
 8004abc:	fb0c f000 	mul.w	r0, ip, r0
 8004ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004ac4:	42a0      	cmp	r0, r4
 8004ac6:	d914      	bls.n	8004af2 <__udivmoddi4+0xa6>
 8004ac8:	192c      	adds	r4, r5, r4
 8004aca:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8004ace:	d204      	bcs.n	8004ada <__udivmoddi4+0x8e>
 8004ad0:	42a0      	cmp	r0, r4
 8004ad2:	d902      	bls.n	8004ada <__udivmoddi4+0x8e>
 8004ad4:	f1ac 0302 	sub.w	r3, ip, #2
 8004ad8:	442c      	add	r4, r5
 8004ada:	1a24      	subs	r4, r4, r0
 8004adc:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8004ae0:	b11e      	cbz	r6, 8004aea <__udivmoddi4+0x9e>
 8004ae2:	40fc      	lsrs	r4, r7
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6034      	str	r4, [r6, #0]
 8004ae8:	6073      	str	r3, [r6, #4]
 8004aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aee:	4642      	mov	r2, r8
 8004af0:	e7dd      	b.n	8004aae <__udivmoddi4+0x62>
 8004af2:	4663      	mov	r3, ip
 8004af4:	e7f1      	b.n	8004ada <__udivmoddi4+0x8e>
 8004af6:	2a00      	cmp	r2, #0
 8004af8:	d079      	beq.n	8004bee <__udivmoddi4+0x1a2>
 8004afa:	fab2 f382 	clz	r3, r2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d03f      	beq.n	8004b82 <__udivmoddi4+0x136>
 8004b02:	4619      	mov	r1, r3
 8004b04:	f1c1 0320 	rsb	r3, r1, #32
 8004b08:	fa02 f501 	lsl.w	r5, r2, r1
 8004b0c:	fa2e f203 	lsr.w	r2, lr, r3
 8004b10:	fa0e fe01 	lsl.w	lr, lr, r1
 8004b14:	fa20 f303 	lsr.w	r3, r0, r3
 8004b18:	ea43 030e 	orr.w	r3, r3, lr
 8004b1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004b20:	fa00 f401 	lsl.w	r4, r0, r1
 8004b24:	fbb2 fcfe 	udiv	ip, r2, lr
 8004b28:	b2af      	uxth	r7, r5
 8004b2a:	fb0e 201c 	mls	r0, lr, ip, r2
 8004b2e:	0c1a      	lsrs	r2, r3, #16
 8004b30:	fb0c f807 	mul.w	r8, ip, r7
 8004b34:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004b38:	4590      	cmp	r8, r2
 8004b3a:	d95a      	bls.n	8004bf2 <__udivmoddi4+0x1a6>
 8004b3c:	18aa      	adds	r2, r5, r2
 8004b3e:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8004b42:	d204      	bcs.n	8004b4e <__udivmoddi4+0x102>
 8004b44:	4590      	cmp	r8, r2
 8004b46:	d902      	bls.n	8004b4e <__udivmoddi4+0x102>
 8004b48:	f1ac 0002 	sub.w	r0, ip, #2
 8004b4c:	442a      	add	r2, r5
 8004b4e:	eba2 0208 	sub.w	r2, r2, r8
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	fbb2 fcfe 	udiv	ip, r2, lr
 8004b58:	fb0e 221c 	mls	r2, lr, ip, r2
 8004b5c:	fb0c f707 	mul.w	r7, ip, r7
 8004b60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b64:	429f      	cmp	r7, r3
 8004b66:	d946      	bls.n	8004bf6 <__udivmoddi4+0x1aa>
 8004b68:	18eb      	adds	r3, r5, r3
 8004b6a:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 8004b6e:	d204      	bcs.n	8004b7a <__udivmoddi4+0x12e>
 8004b70:	429f      	cmp	r7, r3
 8004b72:	d902      	bls.n	8004b7a <__udivmoddi4+0x12e>
 8004b74:	f1ac 0202 	sub.w	r2, ip, #2
 8004b78:	442b      	add	r3, r5
 8004b7a:	1bdb      	subs	r3, r3, r7
 8004b7c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004b80:	e002      	b.n	8004b88 <__udivmoddi4+0x13c>
 8004b82:	ebae 0302 	sub.w	r3, lr, r2
 8004b86:	2201      	movs	r2, #1
 8004b88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004b8c:	b2af      	uxth	r7, r5
 8004b8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8004b92:	0c20      	lsrs	r0, r4, #16
 8004b94:	fb0e 331c 	mls	r3, lr, ip, r3
 8004b98:	fb0c f807 	mul.w	r8, ip, r7
 8004b9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8004ba0:	4598      	cmp	r8, r3
 8004ba2:	d92a      	bls.n	8004bfa <__udivmoddi4+0x1ae>
 8004ba4:	18eb      	adds	r3, r5, r3
 8004ba6:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8004baa:	d204      	bcs.n	8004bb6 <__udivmoddi4+0x16a>
 8004bac:	4598      	cmp	r8, r3
 8004bae:	d902      	bls.n	8004bb6 <__udivmoddi4+0x16a>
 8004bb0:	f1ac 0002 	sub.w	r0, ip, #2
 8004bb4:	442b      	add	r3, r5
 8004bb6:	eba3 0308 	sub.w	r3, r3, r8
 8004bba:	b2a4      	uxth	r4, r4
 8004bbc:	fbb3 fcfe 	udiv	ip, r3, lr
 8004bc0:	fb0e 331c 	mls	r3, lr, ip, r3
 8004bc4:	fb0c f707 	mul.w	r7, ip, r7
 8004bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004bcc:	42a7      	cmp	r7, r4
 8004bce:	d916      	bls.n	8004bfe <__udivmoddi4+0x1b2>
 8004bd0:	192c      	adds	r4, r5, r4
 8004bd2:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8004bd6:	d204      	bcs.n	8004be2 <__udivmoddi4+0x196>
 8004bd8:	42a7      	cmp	r7, r4
 8004bda:	d902      	bls.n	8004be2 <__udivmoddi4+0x196>
 8004bdc:	f1ac 0302 	sub.w	r3, ip, #2
 8004be0:	442c      	add	r4, r5
 8004be2:	1be4      	subs	r4, r4, r7
 8004be4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004be8:	460f      	mov	r7, r1
 8004bea:	4611      	mov	r1, r2
 8004bec:	e778      	b.n	8004ae0 <__udivmoddi4+0x94>
 8004bee:	211f      	movs	r1, #31
 8004bf0:	e788      	b.n	8004b04 <__udivmoddi4+0xb8>
 8004bf2:	4660      	mov	r0, ip
 8004bf4:	e7ab      	b.n	8004b4e <__udivmoddi4+0x102>
 8004bf6:	4662      	mov	r2, ip
 8004bf8:	e7bf      	b.n	8004b7a <__udivmoddi4+0x12e>
 8004bfa:	4660      	mov	r0, ip
 8004bfc:	e7db      	b.n	8004bb6 <__udivmoddi4+0x16a>
 8004bfe:	4663      	mov	r3, ip
 8004c00:	e7ef      	b.n	8004be2 <__udivmoddi4+0x196>
 8004c02:	4573      	cmp	r3, lr
 8004c04:	d906      	bls.n	8004c14 <__udivmoddi4+0x1c8>
 8004c06:	b916      	cbnz	r6, 8004c0e <__udivmoddi4+0x1c2>
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4608      	mov	r0, r1
 8004c0c:	e76d      	b.n	8004aea <__udivmoddi4+0x9e>
 8004c0e:	e9c6 0e00 	strd	r0, lr, [r6]
 8004c12:	e7f9      	b.n	8004c08 <__udivmoddi4+0x1bc>
 8004c14:	fab3 f783 	clz	r7, r3
 8004c18:	b987      	cbnz	r7, 8004c3c <__udivmoddi4+0x1f0>
 8004c1a:	4573      	cmp	r3, lr
 8004c1c:	d301      	bcc.n	8004c22 <__udivmoddi4+0x1d6>
 8004c1e:	4282      	cmp	r2, r0
 8004c20:	d807      	bhi.n	8004c32 <__udivmoddi4+0x1e6>
 8004c22:	1a84      	subs	r4, r0, r2
 8004c24:	eb6e 0303 	sbc.w	r3, lr, r3
 8004c28:	2001      	movs	r0, #1
 8004c2a:	469c      	mov	ip, r3
 8004c2c:	b91e      	cbnz	r6, 8004c36 <__udivmoddi4+0x1ea>
 8004c2e:	2100      	movs	r1, #0
 8004c30:	e75b      	b.n	8004aea <__udivmoddi4+0x9e>
 8004c32:	4638      	mov	r0, r7
 8004c34:	e7fa      	b.n	8004c2c <__udivmoddi4+0x1e0>
 8004c36:	e9c6 4c00 	strd	r4, ip, [r6]
 8004c3a:	e7f8      	b.n	8004c2e <__udivmoddi4+0x1e2>
 8004c3c:	f1c7 0c20 	rsb	ip, r7, #32
 8004c40:	40bb      	lsls	r3, r7
 8004c42:	fa22 f50c 	lsr.w	r5, r2, ip
 8004c46:	431d      	orrs	r5, r3
 8004c48:	fa20 f10c 	lsr.w	r1, r0, ip
 8004c4c:	fa2e f30c 	lsr.w	r3, lr, ip
 8004c50:	fa0e fe07 	lsl.w	lr, lr, r7
 8004c54:	ea41 010e 	orr.w	r1, r1, lr
 8004c58:	ea4f 4915 	mov.w	r9, r5, lsr #16
 8004c5c:	fa00 f407 	lsl.w	r4, r0, r7
 8004c60:	fbb3 f8f9 	udiv	r8, r3, r9
 8004c64:	fa1f fe85 	uxth.w	lr, r5
 8004c68:	fb09 3018 	mls	r0, r9, r8, r3
 8004c6c:	0c0b      	lsrs	r3, r1, #16
 8004c6e:	fb08 fa0e 	mul.w	sl, r8, lr
 8004c72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004c76:	459a      	cmp	sl, r3
 8004c78:	fa02 f207 	lsl.w	r2, r2, r7
 8004c7c:	d940      	bls.n	8004d00 <__udivmoddi4+0x2b4>
 8004c7e:	18eb      	adds	r3, r5, r3
 8004c80:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8004c84:	d204      	bcs.n	8004c90 <__udivmoddi4+0x244>
 8004c86:	459a      	cmp	sl, r3
 8004c88:	d902      	bls.n	8004c90 <__udivmoddi4+0x244>
 8004c8a:	f1a8 0002 	sub.w	r0, r8, #2
 8004c8e:	442b      	add	r3, r5
 8004c90:	eba3 030a 	sub.w	r3, r3, sl
 8004c94:	b289      	uxth	r1, r1
 8004c96:	fbb3 f8f9 	udiv	r8, r3, r9
 8004c9a:	fb09 3318 	mls	r3, r9, r8, r3
 8004c9e:	fb08 fe0e 	mul.w	lr, r8, lr
 8004ca2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004ca6:	458e      	cmp	lr, r1
 8004ca8:	d92c      	bls.n	8004d04 <__udivmoddi4+0x2b8>
 8004caa:	1869      	adds	r1, r5, r1
 8004cac:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004cb0:	d204      	bcs.n	8004cbc <__udivmoddi4+0x270>
 8004cb2:	458e      	cmp	lr, r1
 8004cb4:	d902      	bls.n	8004cbc <__udivmoddi4+0x270>
 8004cb6:	f1a8 0302 	sub.w	r3, r8, #2
 8004cba:	4429      	add	r1, r5
 8004cbc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004cc0:	fba0 9802 	umull	r9, r8, r0, r2
 8004cc4:	eba1 010e 	sub.w	r1, r1, lr
 8004cc8:	4541      	cmp	r1, r8
 8004cca:	46ce      	mov	lr, r9
 8004ccc:	4643      	mov	r3, r8
 8004cce:	d302      	bcc.n	8004cd6 <__udivmoddi4+0x28a>
 8004cd0:	d106      	bne.n	8004ce0 <__udivmoddi4+0x294>
 8004cd2:	454c      	cmp	r4, r9
 8004cd4:	d204      	bcs.n	8004ce0 <__udivmoddi4+0x294>
 8004cd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8004cda:	eb68 0305 	sbc.w	r3, r8, r5
 8004cde:	3801      	subs	r0, #1
 8004ce0:	2e00      	cmp	r6, #0
 8004ce2:	d0a4      	beq.n	8004c2e <__udivmoddi4+0x1e2>
 8004ce4:	ebb4 020e 	subs.w	r2, r4, lr
 8004ce8:	eb61 0103 	sbc.w	r1, r1, r3
 8004cec:	fa01 fc0c 	lsl.w	ip, r1, ip
 8004cf0:	fa22 f307 	lsr.w	r3, r2, r7
 8004cf4:	ea4c 0303 	orr.w	r3, ip, r3
 8004cf8:	40f9      	lsrs	r1, r7
 8004cfa:	e9c6 3100 	strd	r3, r1, [r6]
 8004cfe:	e796      	b.n	8004c2e <__udivmoddi4+0x1e2>
 8004d00:	4640      	mov	r0, r8
 8004d02:	e7c5      	b.n	8004c90 <__udivmoddi4+0x244>
 8004d04:	4643      	mov	r3, r8
 8004d06:	e7d9      	b.n	8004cbc <__udivmoddi4+0x270>

08004d08 <_init>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	bf00      	nop
 8004d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0e:	bc08      	pop	{r3}
 8004d10:	469e      	mov	lr, r3
 8004d12:	4770      	bx	lr

08004d14 <_fini>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	bf00      	nop
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr
